<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[מחשבות על תכנות]]></title><description><![CDATA[מחשבות על תכנות ובכלל]]></description><link>https://assapir.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Thu, 30 Sep 2021 05:59:40 GMT</lastBuildDate><item><title><![CDATA[להשתמש בכח של כמה עוגות יחד]]></title><description><![CDATA[כמו שכתבתי בפוסט קודם יש לי, כעובד מיקרוסופט, 15…]]></description><link>https://assapir.github.io/general/k3s/</link><guid isPermaLink="false">https://assapir.github.io/general/k3s/</guid><pubDate>Thu, 16 Sep 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;כמו שכתבתי ב&lt;a href=&quot;https://blog.ass.af/general/terraform/&quot;&gt;פוסט קודם&lt;/a&gt; יש לי, כעובד מיקרוסופט, 150$ בחודש לשימוש באז’ור. בהתחלה חשבתי שזה המון, אבל מסתבר שלא, ולהחזיק שרתים על קוברנטיס מנוהל זה די יקר, במיוחד אם לא שמים לב לבחירות שעושים, למשל על אילו מכונות בדיוק ה &lt;em&gt;Nodes&lt;/em&gt; רצים, כמה מכונות כאלו מופעלות וכו’.&lt;/p&gt;
&lt;p&gt;אחרי ששילמתי קצת קנס על למידה, הצלחתי לגרום למה שרץ לעמוד בתקציב (בינתיים…) , אבל זה נתן לי את הרעיון הבא: למה בעצם לא להקים שרת קוברנטיס לבד בבית?&lt;/p&gt;
&lt;p&gt;טוב, האמת שהתשובה לזה די ברורה: האינטרנט שלי בבית חרא. אין לי סיבים, לצערי, עדיין, ככה שהמהירות ממש לא קרובה ללהיות סימטרית, וההעלאה עלובה, כלומר, שאם הרבה יותר מדי אנשים יכנסו בבת אחת לאתר, זה פשוט לא יעבוד. אבל, זה עדיין אתגר מעניין לעשות.&lt;/p&gt;
&lt;p&gt;התחלתי את המחקר לקראת הפרויקט במחשבה שאני הולך להשתמש בהפצה מלאה של קוברנטיס ולהריץ הכל על הרספברייפי 4. אבל, בהמשך למדתי שזה ממש לא מומלץ, ושעדיף להשתמש בהפצות אחרות של קוברנטיס, כמו &lt;a href=&quot;https://microk8s.io/&quot;&gt;micro8k&lt;/a&gt;, או מה שאני בחרתי להשתמש בו - &lt;a href=&quot;https://k3s.io/&quot;&gt;k3s&lt;/a&gt;. שתי ההפצות נועדו לרוץ על מכשירים חלשים (יחסית. הרספברייפי 4 עם 4 ג’יגה ממש לא חלש), אבל בחרתי די אקראית ב k3s, בעיקר כי פחדתי שמיקרו8קיי קשור מדי לאובונטו, כיוון ששניהם מופצים ע”י קנוניקל, ואני כמובן הולך להתקין את הכל על ההפצה האהובה עלי, &lt;strong&gt;ArchLimux&lt;/strong&gt; או במקרה הספציפי הזה, &lt;a href=&quot;http://www.archlinuxarm.org&quot;&gt;ArchLinux Arm&lt;/a&gt;, שמהווה גירסה המתאימה למעבדי ARM של ארצ’.&lt;/p&gt;
&lt;p&gt;הוראות ההתקנה של ההפצה לרספבריפיי 4 &lt;a href=&quot;https://archlinuxarm.org/platforms/armv8/broadcom/raspberry-pi-4&quot;&gt;לא מאוד ארוכות&lt;/a&gt;, אבל למה לעשות משהו ידנית אם אפשר להפוך אותו לאוטומטי, במיוחד שהזמנתי כבר עוד 3 ראספברי, ולא בא לי לעבוד כמו חמור. אז מצאתי באינטרנט ריפוזיטורי חביב של בחור ספרדי בשם Pablo Navais, שכבר עשה הכל לפני, ויצר &lt;a href=&quot;https://github.com/pnavais/rpi4-arch&quot;&gt;סקריפט&lt;/a&gt; ממש מגניב כדי לעשות את הדברים פשוטים יותר.&lt;/p&gt;
&lt;p&gt;לצערי, הסקריפט עשה הרבה דברים שלא ברור לי למה לעשות אותם, כמו להתקין קרנל לבד במקום להשתמש במה שההפצה נותנת, ולכן, אחרי ששלחתי לו PR שתיקן לו באג שהיה עשוי להיות הרסני (ולמחוק לך את המחשב), עשיתי &lt;a href=&quot;https://github.com/assapir/rpi4-arch&quot;&gt;פורק&lt;/a&gt;, ותיקנתי את הסקריפט כך שיתקין את המערכת כפי שאני הייתי רוצה, ויותר בצמוד להוראות הרשמיות. כל הכבוד לקוד פתוח!&lt;/p&gt;
&lt;p&gt;אבל, כמובן שגם אחרי ההתקנה של המערכת, צריך להתקין עוד המון דברים. ולשנות ולהתאים שהכל יעבוד חלק בקלות. למזלי, אותו בחור ספרדי דאג גם לזה, באמצעות שימוש בכלי בשם &lt;a href=&quot;https://www.ansible.com/&quot;&gt;Ansible&lt;/a&gt;, שנועד לעזור לעשות אוטומציה בדיוק לדברים האלו.
גם כאן, “נאלצתי” ל&lt;a href=&quot;https://github.com/pnavais/rpi4-ansible/compare/master...assapir:main&quot;&gt;לשנות המון&lt;/a&gt; כדי שהכל יתאים לצרכי, ולקח לי יום שלם, כולל להישאר ער עד 3 בלילה (כי אני לא מסוגל להפסיק עבודה באמצע) כדי שהכל יעבוד כמו שאני רוצה.&lt;/p&gt;
&lt;p&gt;לשמחתי, זה השתלם, והתוצאה:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-shell line-numbers&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;command-line-prompt&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;❯ kubectl get nodes -o wide
NAME          STATUS   ROLES                  AGE    VERSION        INTERNAL-IP     EXTERNAL-IP   OS-IMAGE         KERNEL-VERSION   CONTAINER-RUNTIME
k3s-master    Ready    control-plane,master   127m   v1.21.4+k3s1   &lt;span class=&quot;token number&quot;&gt;192.168&lt;/span&gt;.1.113   &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;none&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;        Arch Linux ARM   &lt;span class=&quot;token number&quot;&gt;5.11&lt;/span&gt;.4-1-ARCH    containerd://1.4.9-k3s1
k3s-node-01   Ready    worker                 52m    v1.21.4+k3s1   &lt;span class=&quot;token number&quot;&gt;192.168&lt;/span&gt;.1.106   &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;none&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;        Arch Linux ARM   &lt;span class=&quot;token number&quot;&gt;5.11&lt;/span&gt;.4-1-ARCH    containerd://1.4.9-k3s1&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;התוכניות לעתיד:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;להוסיף עוד 2 מכונות: הן כבר הגיעו, מחכה לסוויצ’ וכבלים שצריכים להגיע.&lt;/li&gt;
&lt;li&gt;להדפיס בתלת מימד מארז נוח לכל העסק הזה. מזל שאחי הקטן לומד הנדסת מכונות והוא בדיוק בחופשת סמסטר.&lt;/li&gt;
&lt;li&gt;לכתוב בלוג יותר מפורט על מה ואיך.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[פונקציות או לא להיות]]></title><description><![CDATA[פונקציות הן כלי חשוב בכמעט כל שפת תכנות. הן מאפשרות שימוש חוזר בקוד בקלות יחסית וכך לשמור על העיקרון החשוב של DRY – Don’t Repeat Yourself…]]></description><link>https://assapir.github.io/rust/functions-1/</link><guid isPermaLink="false">https://assapir.github.io/rust/functions-1/</guid><pubDate>Wed, 18 Aug 2021 13:00:00 GMT</pubDate><content:encoded>&lt;p&gt;פונקציות הן כלי חשוב בכמעט כל שפת תכנות. הן מאפשרות שימוש חוזר בקוד בקלות יחסית וכך לשמור על העיקרון החשוב של DRY – Don’t Repeat Yourself, שבתורו מאפשר לקוד להיות קריא הרבה יותר, וכתוב בצורה שמאפשרת בקלות יותר לעקוב אחרי מה שהתוכנה שכתבנו עושה. בעצם, כבר פגשנו פונקציה אחת בפוסטים הקודמים, אולי אפילו הפונקציה החשובה ביותר: &lt;code class=&quot;language-text&quot;&gt;main&lt;/code&gt;, שכפי שראינו, שם מתחילה התוכנה שלנו.&lt;/p&gt;
&lt;p&gt;פונקציה בראסט מוגדרת באמצעות החתימה (signature) הבאה:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;rust&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-rust line-numbers&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;function_name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arguments&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; argumentType&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; returnValue &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;החתימה מתחילה בשימוש במילה השמורה &lt;code class=&quot;language-text&quot;&gt;fn&lt;/code&gt;, ולאחריה שם הפונקציה. מקובל כי שמות הפונקציות בראסט כתובות ב &lt;em&gt;snake_case&lt;/em&gt;, כלומר, אותיות קטנות בלבד ושימוש בקו תחחתון (&lt;code class=&quot;language-text&quot;&gt;_&lt;/code&gt;) כדי להפריד בין מילים.
לאחר מכן, בסוגריים, נתונה רשימת הארגומנטים (נקראים גם &lt;em&gt;פרמטרים&lt;/em&gt;) המועברים לפונקציה, כאשר נתון השם של הארגומנט ולאחריו הסוג של הארגומנט. אם לא מועברים פרמטרים לפונקציה, יש צורך בסוגריים ריקות. לבסוף, לאחר סימן חץ (מקף אמצעי ולאחריו סוגריים משולשים ימינה &amp;#x3C;-), ישנו הסוג של ערך החזרה של הפונקציה, כאשר אם היא לא מחזירה שום ערך (כמו &lt;code class=&quot;language-text&quot;&gt;void&lt;/code&gt; בשפות אחרות), אפשר לא לכתוב את החלק הזה כלל. גוף הפונקציה מוכל בתוך סוגריים מסולסלים.&lt;/p&gt;
&lt;p&gt;נכתוב קצת קוד!
ניצור פרויקט חדש בעזרת קרגו, ונקרא לו functions. בקובץ &lt;code class=&quot;language-text&quot;&gt;src/main.rs&lt;/code&gt; נכתוב את הקוד הבא:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;rust&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-rust line-numbers&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;another_function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;another_function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token macro property&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;The value of x is: {}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ונריץ את התוכנה המתוחכמת שלנו.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-shell line-numbers&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;command-line-prompt&quot;&gt;&lt;span data-user=assaf data-host=ass.af&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;cargo run
   Compiling functions v0.1.0 …
    Finished dev &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;unoptimized + debuginfo&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; target&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;.35s
     Running &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;target/debug/functions&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
The value of x is: &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;נעבור על מה שעשינו: בשורה 2 קראנו לפונקציה בשם &lt;code class=&quot;language-text&quot;&gt;another_function&lt;/code&gt; (שניתן לראות אותה בשורה 5), תוך העברת הפרמטר &lt;code class=&quot;language-text&quot;&gt;5&lt;/code&gt;. כאמור, בשורה 5 הצהרנו על הפונקציה הנ”ל, כאשר היא מקבלת ארגומנט בשם &lt;code class=&quot;language-text&quot;&gt;x&lt;/code&gt;, מסוג &lt;code class=&quot;language-text&quot;&gt;i32&lt;/code&gt;. בשורה 6, שהיא &lt;em&gt;גוף הפונקציה&lt;/em&gt;, אנחנו מדפיסים באמצעות המקרו &lt;code class=&quot;language-text&quot;&gt;println&lt;/code&gt; את השורה &lt;code class=&quot;language-text&quot;&gt;”The value of x is 5”&lt;/code&gt;, כאשר במקום הסוגריים המסולסלים הריקים, המקרו יציג את ה&lt;strong&gt;ערך&lt;/strong&gt; של המשתנה שהועבר לו, במקרה הזה &lt;code class=&quot;language-text&quot;&gt;x&lt;/code&gt;. ואכן, זה מה שראינו על כתוצאה מריצת התוכנה שלנו.&lt;/p&gt;
&lt;p&gt;מאחורי הקלעים, כאשר המעבד נתקל בקריאה לפונקציה, הוא מחפש איפה הפונקציה הזאת מוגדרת, ומעביר את השליטה אליה, תוך העברת הפרמטרים לפונקציה לפי הסדר שבהם הם נכתבו. לאחר סיום הפונקציה, כלומר כאשר מגיעים לסוגריים המסולסלים הסוגרים את גוף הפונקציה, השליטה בזרימת הקוד חוזרת בדיוק למקום ממנו הגענו לפונקציה. כיוון שבמקרה שלנו אין יותר קוד, התוכנה פשוט מסיימת את הריצה שלה ויוצאת.&lt;/p&gt;
&lt;p&gt;מה יקרה אם נעביר סוג אחר של ארגומנט לפונקציה ממה שהיא מצפה לו? ננסה: נחליף את שורה 2 בקוד כך שהיא תעביר לפונקציה את הארגומנט &lt;code class=&quot;language-text&quot;&gt;’hello’&lt;/code&gt; במקום 5.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;rust&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber 1&quot; class=&quot;language-rust line-numbers&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;    &lt;span class=&quot;token function&quot;&gt;another_function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;“hello”&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ונריץ:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-shell line-numbers&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;command-line-prompt&quot;&gt;&lt;span data-user=assaf data-host=ass.af&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;cargo run
   Compiling functions v0.1.0 ….
error&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;E0308&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: mismatched types
 --&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; src/main.rs:2:22
  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;     another_function&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;                      ^^^^^^^ expected &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;i32&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt;, found &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;str&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;אז כן, התוכנה לא תתקמפל ותסרב לרוץ, כיוון שהפונקציה מצפה לסוג מסוים של פרמטר, מספר בגודל 32 ביט, אבל קיבלה רפרנס למחרוזת (&lt;code class=&quot;language-text&quot;&gt;&amp;amp;str&lt;/code&gt;). שגיאה אחרת נוכל לקבל גם אם נעביר מספר לא מספיק או יותר מדי פרמטרים לפונקציה. מוזמנים לנסות בעצמכם!&lt;/p&gt;
&lt;p&gt;מה לגבי החזרה של ערך מהפונקציה? נכתוב את הפונקציה הבאה:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;rust&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-rust line-numbers&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; val &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; val&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;בשורה 2, הצהרנו (מלשון &lt;em&gt;statement&lt;/em&gt;) על הפעולה הבאה סכמנו את הפרמטרים &lt;code class=&quot;language-text&quot;&gt;a&lt;/code&gt; ו &lt;code class=&quot;language-text&quot;&gt;b&lt;/code&gt; לתוך המשתנה &lt;code class=&quot;language-text&quot;&gt;val&lt;/code&gt;. הצהרות, בהגדרה, הן פעולות שלא מחזירות ערך. כלומר, לפעולה &lt;code class=&quot;language-text&quot;&gt;let val…&lt;/code&gt; אין שום ערך, ולא ניתן להציב את התוצאה שלה למשתנה (בשונה למשל משפת C). בשורה 3, החזרנו את הערך של &lt;code class=&quot;language-text&quot;&gt;val&lt;/code&gt; באמצעות השימוש במילה השמורה &lt;code class=&quot;language-text&quot;&gt;return&lt;/code&gt;.
נקרא לפונקציה מהפונקציה &lt;code class=&quot;language-text&quot;&gt;main&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;rust&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-rust line-numbers&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; val &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token macro property&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;5 + 6 = {}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; val&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;כשנריץ, אכן נקבל את הפלט הרצוי:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-shell line-numbers&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;command-line-prompt&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; + &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;בשורה 2 של הפונקציה main, הצבנו את הערך החוזר לתוך משתנה בשם &lt;code class=&quot;language-text&quot;&gt;val&lt;/code&gt;, והדפסנו אותו בשורה 3. ניתן להשתמש באותו שם למשתנה כיוון שבראסט, כמו בשפות אחרות, שמות של משתנים מוכלים לתוך ה &lt;em&gt;Scope&lt;/em&gt; , טווח ההכרה, של הפונקציה, כך שהפונקציה שקוראת או הפונקציה שנקראת לא מכירות מה קורה בתוך הפונקציה האחרת.&lt;/p&gt;
&lt;p&gt;דרך נוספת להחזיר תוצאה מפונקציה בראסט, ולרוב המקובלת יותר, היא ללא המילה &lt;code class=&quot;language-text&quot;&gt;return&lt;/code&gt;. בראסט, כברירת מחדל, אם אין נקודה פסיק בסוף המשפט האחרון בפונקציה, הערך במשפט האחרון של הפונקציה הוא הערך שיחזור. אם נשנה את מה שכתבנו ונכתוב&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;rust&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-rust line-numbers&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; val &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    val
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;עדיין נקבל את אותה התוצאה, ואפילו עם נכתוב -&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;rust&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-rust line-numbers&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;נקבל את אותה התוצאה בדיוק.&lt;/p&gt;
&lt;p&gt;בפוסט הבא אשתדל לכתוב עוד קצת על פונקציות, ונתמקד בסוג של העברת פרמטרים לפונקציה.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[משתנים שאי אפשר לשנות (בערך)]]></title><description><![CDATA[…]]></description><link>https://assapir.github.io/rust/vars/</link><guid isPermaLink="false">https://assapir.github.io/rust/vars/</guid><pubDate>Tue, 03 Aug 2021 08:00:00 GMT</pubDate><content:encoded>&lt;p&gt;לאחר שיצרנו את התוכנה הראשונה שלנו, נוכל לשים לב די בקלות שהיא לא עושה שום דבר מתוחכם. אולם, בשביל לעשות דברים מתוחכמים, יש צורך ללמוד כמה קונספטים, כאשר רוב הקונספטים האלו קיימים ברוב (ואולי בכל) שפות התכנות, אבל לעיתים קצת שונים בראסט.
הקונספט הראשון שנדבר עליו, ואולי החשוב ביותר, הוא &lt;strong&gt;משתנים&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;הצהרה על משתנה&lt;/h3&gt;
&lt;p&gt;ניצור פרויקט חדש (אם לא זוכרים כיצד, אפשר להסתכל על ה&lt;a href=&quot;https://blog.ass.af/rust/hello_world/&quot;&gt;פוסט הקודם&lt;/a&gt; ולהיזכר איך לעשות את זה בעזרת קרגו). נשנה את הקוד בקובץ &lt;code class=&quot;language-text&quot;&gt;src/main.rs&lt;/code&gt; לקוד הבא:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;rust&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-rust line-numbers&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token macro property&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;The value of x is: {}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;נריץ את התוכנה המדהימה שכתבנו באמצעות הפקודה&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-shell line-numbers&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;command-line-prompt&quot;&gt;&lt;span data-user=assaf data-host=ass.af&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;cargo run
…
The value of x is: &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;יש! הכל עבד כצפוי.&lt;/p&gt;
&lt;p&gt;נעבור על מה עשינו כאן: בשורה &lt;em&gt;1&lt;/em&gt; הצהרנו כרגיל על הפונקציה &lt;code class=&quot;language-text&quot;&gt;main&lt;/code&gt;, שלא מקבלת שום ארגומנטים. בשורה &lt;em&gt;2&lt;/em&gt; הצהרנו על &lt;strong&gt;משתנה&lt;/strong&gt; בשם &lt;code class=&quot;language-text&quot;&gt;x&lt;/code&gt; באמצעות מילת המפתח &lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt;, ונתנו לו את הערך &lt;code class=&quot;language-text&quot;&gt;5&lt;/code&gt;. בשורה &lt;em&gt;3&lt;/em&gt; השתמשנו במקרו &lt;code class=&quot;language-text&quot;&gt;println&lt;/code&gt; והדפסנו למסך את המשפט &lt;code class=&quot;language-text&quot;&gt;The value of x is: 5&lt;/code&gt;, כאשר במקום הסוגריים המסולסלים יבוא הייצוג של &lt;code class=&quot;language-text&quot;&gt;x&lt;/code&gt; כמחרוזת (String), כיוון שהוא המשתנה שנמצא אחרי הפסיק.&lt;/p&gt;
&lt;p&gt;אבל רגע! אם נסתכל בוויקיפדיה, נראה שראסט היא &lt;a href=&quot;https://he.wikipedia.org/wiki/%D7%9E%D7%A2%D7%A8%D7%9B%D7%AA_%D7%98%D7%99%D7%A4%D7%95%D7%A1%D7%99%D7%9D#%D7%98%D7%99%D7%A4%D7%95%D7%A1%D7%99%D7%95%D7%AA_%D7%A1%D7%98%D7%98%D7%99%D7%AA&quot;&gt;שפה סטטית&lt;/a&gt;, ולא דינמית, כלומר הטיפוס (או המילים אחרות, הסוג) של המשתנה &lt;code class=&quot;language-text&quot;&gt;x&lt;/code&gt; חייב להיות ידוע כבר בזמן הקימפול. אז איך זה כן עובד? הקומפיילר (rustc) מסיק את הטיפוסים של המשתנים כל פעם שהוא מסוגל (שזה רוב המקרים). בדוגמה שלנו, הקומפיילר יסיק שהטיפוס של &lt;code class=&quot;language-text&quot;&gt;x&lt;/code&gt; הוא &lt;code class=&quot;language-text&quot;&gt;i32&lt;/code&gt; - כלומר Integer בגודל 32 בתים signed (כשהכוונה ב”סימן” פה הכוונה ליכולת להיות שלילי). אם נרצה לקבוע את הטיפוס של המשתנה במפורש, נשנה את הקוד שלנו:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;rust&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber 1&quot; class=&quot;language-rust line-numbers&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;u64&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;אם נריץ את התוכנה שוב, נראה שבאופן לא מפתיע התוצאה לא השתנתה, אבל מאחורי הקלעים, הטיפוס של המשתנה השתנה, וכעת הוא מסוג &lt;code class=&quot;language-text&quot;&gt;u64&lt;/code&gt; - כלומר מספר בגודל 64 בתים, unsigned – כלומר שאינו יכול להיות שלילי. אפשר לראות את זה די בקלות אם ננסה לתת למשנה &lt;code class=&quot;language-text&quot;&gt;x&lt;/code&gt; ערך שלילי:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;rust&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber 1&quot; class=&quot;language-rust line-numbers&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;u64&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;אם ננסה את להריץ את התוכנה עכשיו, נקבל את השגיאה הבאה:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-shell line-numbers&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;command-line-prompt&quot;&gt;&lt;span data-user=assaf data-host=ass.af&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;cargo run
   Compiling …
error&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;E0600&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: cannot apply unary operator &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;-&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt; to &lt;span class=&quot;token builtin class-name&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;u64&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
 --&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; src/main.rs:2:18
  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;token builtin class-name&quot;&gt;let&lt;/span&gt; x: u64 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; -5&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;                  ^^ cannot apply unary operator &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;-&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; note: unsigned values cannot be negated

error: aborting due to previous error

For &lt;span class=&quot;token function&quot;&gt;more&lt;/span&gt; information about this error, try &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;rustc --explain E0600&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;השגיאה עצמה כתובה באנגלית ממש פשוטה, וזה, לעניות דעתי, אחת החוזקות של ראסט – גם כשכבר עושים טעות, די קל להבין מה הטעות ואיפה בדיוק היא נמצאת, כי הודעות השגיאה של הקומפיילר ברורות למדי - כתוב בדיוק באיזו שורה השגיאה (2), ומה בדיוק השגיאה היתה:
&lt;code class=&quot;language-text&quot;&gt;note: unsigned values cannot be negated&lt;/code&gt; - בדיוק כמו שציפינו.&lt;/p&gt;
&lt;p&gt;ניתן למצוא את רשימת הטיפוסים המלאה של ראסט ב&lt;a href=&quot;https://doc.rust-lang.org/reference/types.html&quot;&gt;תיעוד&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;השמה למשתנה&lt;/h3&gt;
&lt;p&gt;ברוב שפות התכנות, אפשר להכריז על משתנים, ולא לתת להם ערך כלל. למשל, בשפת C:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-c line-numbers&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;%d&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;והתכנה חוקית לגמרי ואפילו תתקמפל (אבל זה כנראה באג) והכל יעבוד. אבל אם ננסה לעשות אותו דבר בראסט:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;rust&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber 1&quot; class=&quot;language-rust line-numbers&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token macro property&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;The value of x is: {}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;נקבל את השגיאה:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-shell line-numbers&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;command-line-prompt&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;println&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;The value of x is: {}&quot;&lt;/span&gt;, x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                                  ^ use of possibly-uninitialized &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;x&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;באמצעות השגיאה הזאת, אנחנו מבטיחים שאין מצב שאנחנו ניגשים לזיכרון לא מאותחל, ולא בטעות נבצע פעולות על NULL. אחלה – נמנעו לנו באגים טיפשיים!&lt;/p&gt;
&lt;h3&gt;משתנה שאי אפשר לשנות – Imutability&lt;/h3&gt;
&lt;p&gt;ברוב שפות התכנות, לאחר שהצהרנו על משתנה, ניתן לשנות את הערך ששמור בו, למשל:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-c line-numbers&quot;&gt;&lt;code class=&quot;language-c&quot;&gt; &lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;%d\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;%d&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ננסה לכתוב משהו דומה בראסט:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;rust&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-rust line-numbers&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token macro property&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;The value of x is: {}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token macro property&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;The value of x is: {}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;התכונה תסרב להתקמפל ונקבל שגיאה:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-shell line-numbers&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;command-line-prompt&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;cannot assign twice to immutable variable &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;x&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
 --&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; src/main.rs:4:5
  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;token builtin class-name&quot;&gt;let&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;         -
  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;         &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;         first assignment to &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;x&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;         help: consider making this binding mutable: &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;mut x&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;     println&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;The value of x is: {}&quot;&lt;/span&gt;, x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;     x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;     ^^^^^ cannot assign twice to immutable variable&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;השגיאה נובעת מכך שבראסט, כברירת מחדל, ובניגוד לרוב השפות (שאני מכיר לפחות…) המשתנים הם immutable (אשמח למושג בעברית), דומה יותר ל &lt;code class=&quot;language-text&quot;&gt;const&lt;/code&gt; בג’אווה סקריפט, ובניגוד למשל ל &lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt; באותה השפה. הסיבה להתנהגות הלא סטנדרטית הזאת של השפה היא שוב על מנת לעזור לנו לתפוס שגיאות כבר בזמן הקומפילציה, הפעם שגיאות שבהן אנחנו מניחים באזור מסוים בקוד כי למשתנה יש ערך כלשהוא, אבל בפועל הערך שלו השתנה, בלי שנדע, במקום אחר. לכן, כברירת מחדל, כל המשתנים בראסט הם לא ממש משתנים.&lt;/p&gt;
&lt;p&gt;על מנת שנוכל להציב למשתנה, עלינו להצהיר עליו בצורה קצת שונה:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;rust&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber 1&quot; class=&quot;language-rust line-numbers&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;באמצעות מילת המפתח &lt;code class=&quot;language-text&quot;&gt;mut&lt;/code&gt; הפכנו את הטיפוס של המשתנה &lt;code class=&quot;language-text&quot;&gt;x&lt;/code&gt; מסוג &lt;code class=&quot;language-text&quot;&gt;i32&lt;/code&gt; לסוג &lt;code class=&quot;language-text&quot;&gt;mut i32&lt;/code&gt;, ולכן אם נריץ את התוכנה שלנו עכשיו, נקבל את התוצאה הצפויה:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-shell line-numbers&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;command-line-prompt&quot;&gt;&lt;span data-user=assaf data-host=ass.af&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;cargo run
…
The value of x is: &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;
The value of x is: &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;נשים לב, שהשפה היא עדיין שפה עם טיפוסיות סטטית, כלומר הקוד הבא:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;rust&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber 1&quot; class=&quot;language-rust line-numbers&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;עדיין תכשל עם שגיאה:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-shell line-numbers&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;command-line-prompt&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;E0308&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: mismatched types
 --&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; src/main.rs:3:9
  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;     x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;         ^^^^^^^^ expected integer, found &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;str&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt;

error: aborting due to previous error&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[בוקר טוב עולם]]></title><description><![CDATA[התקנו את כל מה שצריך בשביל לכתוב קוד, והיום ממש ממש נכתוב קוד. כמקובל בענף, נתחיל עם התוכנית הידועה בה נדפיס “Hello World…]]></description><link>https://assapir.github.io/rust/hello_world/</link><guid isPermaLink="false">https://assapir.github.io/rust/hello_world/</guid><pubDate>Sun, 25 Jul 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;התקנו את כל מה שצריך בשביל לכתוב קוד, והיום ממש ממש נכתוב קוד. כמקובל בענף, נתחיל עם התוכנית הידועה בה נדפיס “Hello World”. גם כאן, קארגו יסייע לנו לעשות זאת בקלות. תחילה, נעבור לתיקיה בה נרצה ליצור את הפרויקט החדש שלנו. שימו לב: לא התיקיה בה הקוד שלנו יהיה, אלא התיקיה המכילה אותה. לדוגמה, אני אוהב לרכז את כל הקוד שלא קשור לעבודה שלי בתיקיה private תחת המשתמש שלי, ולכן זה מה שאעשה:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-shell line-numbers&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;command-line-prompt&quot;&gt;&lt;span data-user=assaf data-host=ass.af&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; ~/private&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ניצור פרויקט חדש באמצעות קרגו. נריץ:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-shell line-numbers&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;command-line-prompt&quot;&gt;&lt;span data-user=assaf data-host=ass.af&gt;&lt;/span&gt;&lt;/span&gt;cargo new hello_world&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ונקבל בתגובה&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber 1&quot; class=&quot;language-shell line-numbers&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;command-line-prompt&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;Created binary &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;application&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;hello_world&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt; package&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;מעולה! קרגו יצר לנו את הבסיס לתוכנה שלנו. הוא יצא לנו תיקיה בשם &lt;code class=&quot;language-text&quot;&gt;hello_world&lt;/code&gt;, כי זה שם הפרויקט שהעברנו לקרגו כפרמטר. נכנס לתיקיה ונפתח את VSCODE:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-shell line-numbers&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;command-line-prompt&quot;&gt;&lt;span data-user=assaf data-host=ass.af&gt;&lt;/span&gt;&lt;span data-user=assaf data-host=ass.af&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; hello_world
code &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;כעת, אם נבחן את הפרויקט שלנו, נוכל לשים לב לכמה דברים בנוסף לתיקיה עצמה שקרגו יצר לנו. נתחיל מהקובץ &lt;code class=&quot;language-text&quot;&gt;gitignore.&lt;/code&gt;. זה לא המקום להרחיב, אבל זה יכול לרמוז לנו שהתיקיה שלנו היא כבר ריפוזיטורי של git. מעולה! נחסך לנו שלב אם וכאשר נרצה להעלות את הקוד שלנו לגיטהאב, או סתם יקל עלינו לנהל גרסאות שלו מקומית.&lt;/p&gt;
&lt;p&gt;בנוסף, נוצר לנו גם קובץ בשם &lt;code class=&quot;language-text&quot;&gt;Cargo.toml&lt;/code&gt;. כפי ששם הקובץ מרמז, הוא משמש כקובץ הגדרות לקרגו בזמן שאנחנו בפרויקט, בדומה לקובץ &lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt; בפרויקטים של Node. הסיומת &lt;code class=&quot;language-text&quot;&gt;toml&lt;/code&gt; היא של סוג מידע שגם בני אדם וגם מחשבים יכולים לקרוא, ולקרוב משמש להגדרות, בדומה לקבצי &lt;code class=&quot;language-text&quot;&gt;yaml&lt;/code&gt; או &lt;code class=&quot;language-text&quot;&gt;json&lt;/code&gt;.
נפתח את הקובץ ונבחן אותו:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;toml&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-toml line-numbers&quot;&gt;&lt;code class=&quot;language-toml&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token table class-name&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token key property&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;hello_world&quot;&lt;/span&gt;
&lt;span class=&quot;token key property&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;0.1.0&quot;&lt;/span&gt;
&lt;span class=&quot;token key property&quot;&gt;edition&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;2018&quot;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token table class-name&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;החלק הראשון, לאחר הכותרת &lt;code class=&quot;language-text&quot;&gt;package&lt;/code&gt; מכיל פרטים על החבילה שאנחנו נבנה: שם החבילה, גירסה שלה, ובאיזו גירסה של ראסט אנחנו נשתמש.
בחלק השני, לאחר הכותרת &lt;code class=&quot;language-text&quot;&gt;dependency&lt;/code&gt;, אין כרגע כלום, אך בעתיד נשתמש בה כדי לציין חבילות נוספות שנדרשות לפיתוח התוכנה שלנו. כרגע, אין לנו שום תלויות, ולכן החלק הזה ריק.&lt;/p&gt;
&lt;p&gt;התיקיה החשובה יותר היא תיקיית &lt;code class=&quot;language-text&quot;&gt;src&lt;/code&gt;, קיצור של &lt;code class=&quot;language-text&quot;&gt;source&lt;/code&gt;. כאן נמצאת התוכנה שלנו ממש. שם נמצא קובץ בשם &lt;code class=&quot;language-text&quot;&gt;main.rs&lt;/code&gt;. כל חבילה של ראסט שתתקמפל לקובץ הרצה, &lt;strong&gt;חייבת&lt;/strong&gt; להכיל קובץ בשם &lt;code class=&quot;language-text&quot;&gt;main.rs&lt;/code&gt;. משם הקומפיילר יודע מאיפה להתחיל. &lt;code class=&quot;language-text&quot;&gt;rs&lt;/code&gt; היא הסיומת לקבצים של ראסט. בתוך הקובץ נוכל לראות שכברירת מחדל, יש לנו כבר תוכנת “שלום עולם” מוכנה:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;rust&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-rust line-numbers&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token macro property&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Hello, world!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;נעבור על הקובץ שורה שורה:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;rust&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-rust line-numbers&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;כפי שכל תוכנה של ראסט חייבת להכיל קובץ &lt;code class=&quot;language-text&quot;&gt;main.rs&lt;/code&gt;, כך גם הקובץ הזה חייב להכיל פונקציה בשם &lt;code class=&quot;language-text&quot;&gt;main&lt;/code&gt; (עוד על מה זה בדיוק פונקציות, בהמשך). ההצהרה על הפונקציה &lt;code class=&quot;language-text&quot;&gt;main&lt;/code&gt; נעשית באמצעות מילת המפתח &lt;code class=&quot;language-text&quot;&gt;fn&lt;/code&gt; (קיצור של function), שם הפונקציה (בראסט מקובל להשתמש ב snake_case, כלומר להפריד מילים באמצעות קו תחתון ולא במאצעות אותו גדולה), ורשימת הארגומנטים שהיא מקבל, בתוך הסוגריים. כיוון שבמקרה שלנו &lt;code class=&quot;language-text&quot;&gt;main&lt;/code&gt; לא מקבלת שום ארגומנטים, היא מכילה סוגריים רייקים. החלק האחרון בשורה הראשונה הוא סוגריים מסולסלים, שפותחים את טווח ההכרה, הסקופ, של הפונקציה.&lt;/p&gt;
&lt;p&gt;השורה הבאה שלנו היא&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;rust&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber 1&quot; class=&quot;language-rust line-numbers&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token macro property&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Hello, world!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;כאן אנו משתמשים ב&lt;em&gt;מקרו&lt;/em&gt; (וגם על מקרואים אשתדל לכתוב עוד בהמשך) &lt;code class=&quot;language-text&quot;&gt;!println&lt;/code&gt;. מקרואים בראסט מזוהים באמצעות העובדה שלפני העברת הפרמטרים אליהם יש סימן קריאה. זו היא לא קונבנציה, בניגוד לשם של המקרו, אלא ממש דרישה של השפה שבקריאה למקרו יהיה שימוש ב־&lt;code class=&quot;language-text&quot;&gt;!&lt;/code&gt;. הפרמטר אותו העברנו למקרו הוא הטקסט שברצוננו לכתוב. ראסט משתמשת כברירת מחדל בקידוד &lt;a href=&quot;https://he.wikipedia.org/wiki/UTF-8&quot;&gt;utf8&lt;/a&gt;, כלומר, ניתן להשתמש גם בעברית בתוך מחרוזות טקסט.&lt;/p&gt;
&lt;p&gt;בשורה האחרונה אנו סוגרים את הבלוק שפתחתנו בשורה מספר 1.&lt;/p&gt;
&lt;p&gt;נריץ את הפרויקט ע”י קריאה, שוב, לקרגו:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-shell line-numbers&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;command-line-prompt&quot;&gt;&lt;span data-user=assaf data-host=ass.af&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;cargo run
   Compiling hello_world v0.1.0 &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;/Users/assapir/private/hello_world&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    Finished dev &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;unoptimized + debuginfo&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; target&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;.47s
     Running &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;target/debug/hello_world&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
Hello, world&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;קרגו מבשר לנו כי הוא קימפל את התוכנה &lt;code class=&quot;language-text&quot;&gt;hello_world&lt;/code&gt; בגירסה 0.1.0 (זוכרים את ההגדרה בקובץ Cargo.toml?), בתצורה של &lt;code class=&quot;language-text&quot;&gt;dev&lt;/code&gt;, ללא אופטמיזציה ועם &lt;a href=&quot;https://en.wikipedia.org/wiki/Debug_symbol&quot;&gt;“סימבולים”&lt;/a&gt;, כדי שאם נרצה לדבג, נוכל לעשות את זה. בשורה האחרונה: התוצאה של הריצה:&lt;/p&gt;
&lt;p&gt;אם נסתכל היטב, נראה שנוספה לנו תיקיה נוספת, בשם &lt;code class=&quot;language-text&quot;&gt;target&lt;/code&gt;, שגיט מתעלם ממנה. שם נוצרים התוצרים השונים של הקומפילציה. הקובץ שאותנו מעניין יהיה תחת &lt;code class=&quot;language-text&quot;&gt;target/debug&lt;/code&gt;, ויהיה בשם של הפרויקט (כפי שהגדרנו בקובץ toml), ללא כל סיומת (במק או לינוקס) או עם סיומת exe בחלונות. את הקובץ הזה אנחנו יכולים להריץ לגמרי לבד:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-shell line-numbers&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;command-line-prompt&quot;&gt;&lt;span data-user=assaf data-host=ass.af&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;./target/debug/hello_world
Hello, world&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;איזה יופי! תוכנה משלנו!&lt;/p&gt;
&lt;h4&gt;אם משהו לא עובד&lt;/h4&gt;
&lt;p&gt;יתכן מצב ובו נקבל שגיאה כאשר נריץ את קרגו, למשל:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-shell line-numbers&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;command-line-prompt&quot;&gt;&lt;span data-user=assaf data-host=ass.af&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;cargo run
error: no override and no default toolchain &lt;span class=&quot;token builtin class-name&quot;&gt;set&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;בשביל לתקן את זה נצטרך להתקין את ה toolchain המתאים:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-shell line-numbers&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;command-line-prompt&quot;&gt;&lt;span data-user=assaf data-host=ass.af&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;rustup &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; stable
&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
info: default toolchain &lt;span class=&quot;token builtin class-name&quot;&gt;set&lt;/span&gt; to &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[להתקין הכל מהתחלה, כמו לנשום בפעם הראשונה]]></title><description><![CDATA[…]]></description><link>https://assapir.github.io/rust/setup/</link><guid isPermaLink="false">https://assapir.github.io/rust/setup/</guid><pubDate>Sun, 18 Jul 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;על מנת לתכנת בראסט, ובכן, צריך להתקין את הקומפיילר של ראסט על המחשב שלנו. למזלנו, לראסט יש כמה כלים נפלאים שעוזרים לנו בביצוע מטלות שכאלו. הכלי הראשון הוא &lt;code class=&quot;language-text&quot;&gt;rustup&lt;/code&gt;. אני לא ממליץ באופן כללי להריץ סקריפטים ישירות מההורדה שלהם, כיוון שהם עלולים מאוד בקלות להכיל תוכנה זדונית. לכן, אין לי שום אחריות עם פתאום המחשב עולה באש וכו’. זה יעבוד רק בלינוקס\מק.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-bash line-numbers&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;command-line-prompt&quot;&gt;&lt;span data-user=assaf data-host=ass.af&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; --proto &lt;span class=&quot;token string&quot;&gt;&apos;=https&apos;&lt;/span&gt; --tlsv1.2 https://sh.rustup.rs -sSf &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sh&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;בפקודה &lt;code class=&quot;language-text&quot;&gt;curl&lt;/code&gt;, אותה מומלץ להכיר בלי קשר, מורידים וישר מריצים (דרך ה&lt;code class=&quot;language-text&quot;&gt;sh |&lt;/code&gt;) את ההתקנה של &lt;code class=&quot;language-text&quot;&gt;rustup&lt;/code&gt;. אם יש צורך להזין ססמה, הזינו את הססמה שלכם. בסיום ההתקנה, היא תספר לכם על כך שהכל עבר בהצלחה.&lt;/p&gt;
&lt;p&gt;ראסטאפ מתקינה עוד מספר כלים בנוסף לקומפיילר (&lt;code class=&quot;language-text&quot;&gt;rustc&lt;/code&gt;). החשוב מבניהם, בעיני, הוא &lt;code class=&quot;language-text&quot;&gt;Cargo&lt;/code&gt;. קארגו הוא סופר-כלי, אולר שוויצרי שיסייע לכם בכל מה שקשור לפיתוח תוכנה בראסט: ניהול חבילות, קומפילציה, פרסום של החבילה ועוד. הוא אפילו עוזר בביצוע lint. באופן כללי, הוא בעיקר מספק מעטפת נוחה לביצוע של פעולות שאחרת היינו צריכים לזכור מלא פקודות נפרדות עבורן.&lt;/p&gt;
&lt;p&gt;בשלב זה, באופן עקרוני, הכל מוכן לתחילת העבודה, אך יש לי עוד כמה המלצות שכדאי לעשות לפני שנתחיל ממש בפיתוח. קודם כל, נדרש עורך טקסט, IDE, שבו נכתוב את הקוד שלנו. אני משתמש ב &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;, ונעזר בהרחבה &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=matklad.rust-analyzer&quot;&gt;rust-analyzer&lt;/a&gt; שמקלה מאוד על הפיתוח: נותנת השלמות אוטומטיות (IntelliSense), גישה קלה לדוקמנטציה ועוד מלא דברים נחמדים. שימו לב לא להתבלבל ולהתקין את ההרחבה ה”רשמית” של מיקרוסופט לראסט, שהיא פחות טובה, וכנראה תוחלף בקרוב ע”י ראסט אנאלייזר.&lt;/p&gt;
&lt;p&gt;מזל טוב, כעת אנחנו מוכנים באופן רשמי להתחיל ולתכנת בראסט!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[להקים הכל מאפס]]></title><description><![CDATA[הבלוג הזה, כפי שכתוב כאן למטה, מופעל באמצעות Gatsby…]]></description><link>https://assapir.github.io/general/terraform/</link><guid isPermaLink="false">https://assapir.github.io/general/terraform/</guid><pubDate>Tue, 13 Jul 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;הבלוג הזה, כפי שכתוב כאן למטה, מופעל באמצעות &lt;a href=&quot;https://www.gatsbyjs.com/&quot;&gt;Gatsby&lt;/a&gt;. גטסבי הוא כלי המאפשר יצירה של אתר סטטי - כלומר, אתר שכולו בצד לקוח, בדפדפן, ולא שולח בקשות לשום שרת. האתר “מתארח” באמצעות &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;, שמאפשרים אירוח חינמי של אתרים סטטיטיים. הבעיה עם אתר סטטי, באופן טבעי, זה שהוא סטטי, כלומר, אין לו איפה לשמור תגובות, ולכן אי אפשר להוסיף תגובות.
אז מה עושים? מוסיפים בקאנד!&lt;/p&gt;
&lt;p&gt;אז חפשתי קצת באינטרנט, ומצאתי את המאמר &lt;a href=&quot;https://www.gatsbyjs.com/blog/2019-08-27-roll-your-own-comment-system/&quot;&gt;הזה&lt;/a&gt;. במאמר היא כותבת על איך להשתמש בהירוקו על מנת לארח את השרת והדאטה בייס. אומנם הירוקו הוא שירות חינמי במקרה הזה, אבל אז איפה האתגר? כל הכיף זה לבנות דברים מאפס וללמוד תוך כדי.&lt;/p&gt;
&lt;p&gt;אז החלטתי החלטה אולי קצת מוזרה ולאתגר את עצמי ולהקים את הדאטה בייס באז’ור. עובד מיקרוסופט אחרי הכל, לא?&lt;/p&gt;
&lt;p&gt;אבל, מכיוון שאנחנו בשנת 2021, וכפי שיש דרך מודרנית לכתוב קוד, אז יש גם דרך מודרנית להקים תשתית:
&lt;strong&gt;Infrastructure as Code&lt;/strong&gt;. או בקיצור, IaC.&lt;/p&gt;
&lt;p&gt;רגע, אבל מה זה אומר בכלל &lt;em&gt;תשתית כקוד&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;הרעיון מאחורי &lt;em&gt;תשתית כקוד&lt;/em&gt; הוא שההוראות איך ליצור את התשתית שלך - הרשת בענן, הקלאסטרים, המכונות הוירטואליות, הכל, נמצא בקובץ שמאפשר ליצור בצורה הצהרתית (דקלרטיבית) מה אני כמשתמש רוצה שיהיה בתוצאה הסופית, והכל קורה כבמטה קסם. איזה מגניב!
היתרון הברור הוא שאפשר לשמור בקלות את מה שעשינו, אפילו בגיט (אבל לשים לב שלא עושים קומיט לשמור סודות!) וע”י כך לדעת בקלות יחסית מה השתנה ומתי, לשחזר סביבות ולחזור אחורה בזמן בקלות.&lt;/p&gt;
&lt;p&gt;הכלי שבו בחרתי להשתמש הוא &lt;a href=&quot;https://www.terraform.io/&quot;&gt;Terraform&lt;/a&gt;, כלי שנוצר בקוד פתוח, ומאפשר באמצעות לכתוב מעיין מניפסיטים של מה שרוצים להשיג בשפה שדומה קצת לJSON, אבל לא בדיוק, ונקראת HCL. דוגמה לקוד
כזה:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;hcl&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber NaN&quot; class=&quot;language-hcl line-numbers&quot;&gt;&lt;code class=&quot;language-hcl&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;resource &lt;span class=&quot;token type variable&quot;&gt;&quot;azurerm_resource_group&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;rg&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;name&lt;/span&gt;     &lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt; var.resource_group_name
  &lt;span class=&quot;token property&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt; var.resource_group_location
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;סה”כ אנגלית די פשוטה: הגדרנו &lt;code class=&quot;language-text&quot;&gt;resource&lt;/code&gt; מסוג &lt;code class=&quot;language-text&quot;&gt;azurerm_resource_group&lt;/code&gt; בשם &lt;code class=&quot;language-text&quot;&gt;rg&lt;/code&gt; עם מאפיינים מסויימים שמגיעים ממשתנים שמוגדרים בקובץ אחר. עכשיו טרהפורם תדע לבד איך ליצור את זה בשבילי באז’ור, ולהשוות את מה שאני רוצה למצב הקיים בענן שלי, ולעשות רק את העבודה החדשה, בלי לחזור על דברים שכבר קרו.&lt;/p&gt;
&lt;p&gt;ידעתי מה אני צריך ממדריכים שונים באינטרנט, ולכל סוג resource יש תיעוד מצויין באתר של טרהפורם, למשל בדוגמה למעלה, זה נתון &lt;a href=&quot;https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/resource_group&quot;&gt;כאן&lt;/a&gt; כולל כל האפשרויות השונות. בעייני, זה הרבה יותר קל מאשר להגדיר בUI של אז’ור.&lt;/p&gt;
&lt;p&gt;אז מה הייתי צריך להגדיר:&lt;/p&gt;
&lt;ul class=&quot;contains-task-list&quot;&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; יצירה של הבסיס באז’ור: רשתות, Resource group וכו’&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; דאטה בייס של פוסטגרס&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; קוברנטיס מנוהל - AKS - יארח את השירות שיאפשר את הגישה לדאטה בייס.&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; שהכל יעבוד&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;כל זה לקח לי ערב שלם, עם הרבה ניסוי וטעיה (כמובן שאין שם שום מידע שחשוב לי שישמר, אז זה הרבה פחות בעיה פשוט למחוק ולהתחיל מחדש).&lt;/p&gt;
&lt;p&gt;בסוף, כאמור, הכל נכנס לקוד, במקרה שלי, לאותו גיט שבו &lt;a href=&quot;https://github.com/assapir/assapir.github.io/tree/main/terraform&quot;&gt;כל הקוד של הבלוג הזה נמצא&lt;/a&gt;.&lt;/p&gt;
&lt;/dir&gt;</content:encoded></item><item><title><![CDATA[טעות מיליארד הדולר]]></title><description><![CDATA[אחד ממציאי שפת התכנות אלגול, Tony Hoare המציא את הפוינטר לNULL…]]></description><link>https://assapir.github.io/rust/intro/</link><guid isPermaLink="false">https://assapir.github.io/rust/intro/</guid><pubDate>Fri, 02 Jul 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;אחד ממציאי שפת התכנות אלגול, Tony Hoare המציא את הפוינטר לNULL לדבריו פשוט כי זה היה קל מאוד למימוש ומפתה מידי מכדי לא לעשות את זה. לא הוא ובטח לא אחרים חשבו עד כמה זה נוראי, וכמה בעיות זה יציג בכמעט כל שפת תכנות.&lt;sup id=&quot;fnref-1&quot;&gt;&lt;a href=&quot;#fn-1&quot; class=&quot;footnote-ref&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; זה בולט במיוחד בשפות בהן המתכנת כותב די קרוב ל”ברזלים”, שפות כמו C++/C.&lt;/p&gt;
&lt;p&gt;בקצרה, ברוב שפות התכנות תתרחש שגיאה (או התנהגות לא מוגדרת) כשנפנה לזיכרון ששום דבר לא ממופה אליו. זה יכול לגרום לקריסה של התוכנה (במקרה הטוב?) או לאפשרות לקרוא ולכתוב מזיכרון שלתוכנה לא אמורה להיות גישה אליה, מה שיכול להוות בעיית אבטחה.&lt;/p&gt;
&lt;p&gt;שפת התכנות Rust באה לפתור את הבעיה הזאת (ובעיות נוספות), ע”י כך שאין בשפה את הקונספט של מצביע ל־NULL בכלל&lt;sup id=&quot;fnref-2&quot;&gt;&lt;a href=&quot;#fn-2&quot; class=&quot;footnote-ref&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; - אין דבר כזה משתנה שלא מצביע לזיכרון ולידי. אם מקרה כזה קורה, התוכנה לא תתקמפל, ותודיע מראש שיש לך בעיה. בניגוד ל־++C, השגיאה גם תהיה מובנת ולרוב תכיל עזרה על איך לפתור אותה.&lt;/p&gt;
&lt;p&gt;המטרה של הפוסט הזה (ונקווה שגם הבאים אחריו) היא לעזור לי ללמוד ראסט. אם אתם מוצאים טעות או משהו לא ברור, אשמח לשמוע.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&quot;fn-1&quot;&gt;&lt;a href=&quot;https://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare/&quot; target=&quot;_blank&quot; &gt;מקור&lt;/a&gt;&lt;a href=&quot;#fnref-1&quot; class=&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li id=&quot;fn-2&quot;&gt;טוב, זה לא מדוייק לגמרי, אבל נכון ב99% לפחות מהמקרים.&lt;a href=&quot;#fnref-2&quot; class=&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content:encoded></item></channel></rss>