<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[מחשבות על תכנות]]></title><description><![CDATA[מחשבות על תכנות ובכלל]]></description><link>https://assapir.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Sat, 17 Jul 2021 21:56:05 GMT</lastBuildDate><item><title><![CDATA[להקים הכל מאפס]]></title><description><![CDATA[הבלוג הזה,כפי שכתוב כאן למטה, מופעל באמצעות Gatsby…]]></description><link>https://assapir.github.io/general/terraform/</link><guid isPermaLink="false">https://assapir.github.io/general/terraform/</guid><pubDate>Tue, 13 Jul 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;הבלוג הזה,כפי שכתוב כאן למטה, מופעל באמצעות &lt;a href=&quot;https://www.gatsbyjs.com/&quot;&gt;Gatsby&lt;/a&gt;. גטסבי הוא כלי המאפשר יצירה של אתר סטטי - כלומר, אתר שכולו בצד לקוח, בדפדפן, ולא שולח בקשות לשום שרת. האתר “מתארח” באמצעות &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;, שמאפשרים אירוח חינמי של אתרים סטטיטיים. הבעיה עם אתר סטטי, באופן טבעי, זה שהוא סטטי, כלומר, אין לו איפה לשמור תגובות, ולכן אי אפשר להוסיף תגובות.
אז מה עושים? מוסיפים בקאנד!&lt;/p&gt;
&lt;p&gt;אז חפשתי קצת באינטרנט, ומצאתי את המאמר &lt;a href=&quot;https://www.gatsbyjs.com/blog/2019-08-27-roll-your-own-comment-system/&quot;&gt;הזה&lt;/a&gt;. במאמר היא כותבת על איך להשתמש בהירוקו על מנת לארח את השרת והדאטה בייס. אומנם הירוקו הוא שירות חינמי במקרה הזה, אבל אז איפה האתגר? כל הכיף זה לבנות דברים מאפס וללמוד תוך כדי.&lt;/p&gt;
&lt;p&gt;אז החלטתי החלטה אולי קצת מוזרה ולאתגר את עצמי ולהקים את הדאטה בייס באז’ור. עובד מיקרוסופט אחרי הכל, לא?&lt;/p&gt;
&lt;p&gt;אבל, מכיוון שאנחנו בשנת 2021, וכפי שיש דרך מודרנית לכתוב קוד, אז יש גם דרך מודרנית להקים תשתית:
&lt;strong&gt;Infrastructure as Code&lt;/strong&gt;. או בקיצור, IaC.&lt;/p&gt;
&lt;p&gt;רגע, אבל מה זה אומר בכלל &lt;em&gt;תשתית כקוד&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;הרעיון מאחורי &lt;em&gt;תשתית כקוד&lt;/em&gt; הוא שההוראות איך ליצור את התשתית שלך - הרשת בענן, הקלאסטרים, המכונות הוירטואליות, הכל, נמצא בקובץ שמאפשר ליצור בצורה הצהרתית (דקלרטיבית) מה אני כמשתמש רוצה שיהיה בתוצאה הסופית, והכל קורה כבמטה קסם. איזה מגניב!
היתרון הברור הוא שאפשר לשמור בקלות את מה שעשינו, אפילו בגיט (אבל לשים לב שלא עושים קומיט לשמור סודות!) וע”י כך לדעת בקלות יחסית מה השתנה ומתי, לשחזר סביבות ולחזור אחורה בזמן בקלות.&lt;/p&gt;
&lt;p&gt;הכלי שבו בחרתי להשתמש הוא &lt;a href=&quot;https://www.terraform.io/&quot;&gt;Terraform&lt;/a&gt;, כלי שנוצר בקוד פתוח, ומאפשר באמצעות לכתוב מעיין מניפסיטים של מה שרוצים להשיג בשפה שדומה קצת לJSON, אבל לא בדיוק, ונקראת HCL. דוגמה לקוד
כזה:&lt;/p&gt;
&lt;div dir=&apos;ltr&apos;&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;hcl&quot;&gt;&lt;pre class=&quot;language-hcl&quot;&gt;&lt;code class=&quot;language-hcl&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;resource &lt;span class=&quot;token type variable&quot;&gt;&quot;azurerm_resource_group&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;rg&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;name&lt;/span&gt;     &lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt; var.resource_group_name
  &lt;span class=&quot;token property&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt; var.resource_group_location
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;סה”כ אנגלית די פשוטה: הגדרנו &lt;code class=&quot;language-text&quot;&gt;resource&lt;/code&gt; מסוג &lt;code class=&quot;language-text&quot;&gt;azurerm_resource_group&lt;/code&gt; בשם &lt;code class=&quot;language-text&quot;&gt;rg&lt;/code&gt; עם מאפיינים מסויימים שמגיעים ממשתנים שמוגדרים בקובץ אחר. עכשיו טרהפורם תדע לבד איך ליצור את זה בשבילי באז’ור, ולהשוות את מה שאני רוצה למצב הקיים בענן שלי, ולעשות רק את העבודה החדשה, בלי לחזור על דברים שכבר קרו.&lt;/p&gt;
&lt;p&gt;ידעתי מה אני צריך ממדריכים שונים באינטרנט, ולכל סוג resource יש תיעוד מצויין באתר של טרהפורם, למשל בדוגמה למעלה, זה נתון &lt;a href=&quot;https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/resource_group&quot;&gt;כאן&lt;/a&gt; כולל כל האפשרויות השונות. בעייני, זה הרבה יותר קל מאשר להגדיר בUI של אז’ור.&lt;/p&gt;
&lt;p&gt;אז מה הייתי צריך להגדיר:&lt;/p&gt;
&lt;ul class=&quot;contains-task-list&quot;&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; יצירה של הבסיס באז’ור: רשתות, Resource group וכו’&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; דאטה בייס של פוסטגרס&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; קוברנטיס מנוהל - AKS - יארח את השירות שיאפשר את הגישה לדאטה בייס.&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; שהכל יעבוד&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;כל זה לקח לי ערב שלם, עם הרבה ניסוי וטעיה (כמובן שאין שם שום מידע שחשוב לי שישמר, אז זה הרבה פחות בעיה פשוט למחוק ולהתחיל מחדש).&lt;/p&gt;
&lt;p&gt;בסוף, כאמור, הכל נכנס לקוד, במקרה שלי, לאותו גיט שבו &lt;a href=&quot;https://github.com/assapir/assapir.github.io/tree/main/terraform&quot;&gt;כל הקוד של הבלוג הזה נמצא&lt;/a&gt;.&lt;/p&gt;
&lt;/dir&gt;</content:encoded></item><item><title><![CDATA[טעות מיליארד הדולר]]></title><description><![CDATA[אחד ממציאי שפת התכנות אלגול, Tony Hoare המציא את הפוינטר לNULL…]]></description><link>https://assapir.github.io/rust/intro/</link><guid isPermaLink="false">https://assapir.github.io/rust/intro/</guid><pubDate>Fri, 02 Jul 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;אחד ממציאי שפת התכנות אלגול, Tony Hoare המציא את הפוינטר לNULL לדבריו פשוט כי זה היה קל מאוד למימוש ומפתה מידי מכדי לא לעשות את זה. לא הוא ובטח לא אחרים חשבו עד כמה זה נוראי, וכמה בעיות זה יציג בכמעט כל שפת תכנות.&lt;sup id=&quot;a1&quot;&gt;&lt;a href=&quot;#f1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; זה בולט במיוחד בשפות בהן המתכנת כותב די קרוב ל”ברזלים”, שפות כמו C++/C.&lt;/p&gt;
&lt;p&gt;בקצרה, ברוב שפות התכנות תתרחש שגיאה (או התנהגות לא מוגדרת) כשנפנה לזיכרון ששום דבר לא ממופה אליו. זה יכול לגרום לקריסה של התוכנה (במקרה הטוב?) או לאפשרות לקרוא ולכתוב מזיכרון שלתוכנה לא אמורה להיות גישה אליה, מה שיכול להוות בעיית אבטחה.&lt;/p&gt;
&lt;p&gt;שפת התכנות Rust באה לפתור את הבעיה הזאת (ובעיות נוספות), ע”י כך שאין בשפה את הקונספט של מצביע ל־NULL בכלל&lt;sup id=&quot;a2&quot;&gt;&lt;a href=&quot;#f2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; - אין דבר כזה משתנה שלא מצביע לזיכרון ולידי. אם מקרה כזה קורה, התוכנה לא תתקמפל, ותודיע מראש שיש לך בעיה. בניגוד ל־++C, השגיאה גם תהיה מובנת ולרוב תכיל עזרה על איך לפתור אותה.&lt;/p&gt;
&lt;p&gt;המטרה של הפוסט הזה (ונקווה שגם הבאים אחריו) היא לעזור לי ללמוד ראסט. אם אתם מוצאים טעות או משהו לא ברור, אשמח לשמוע.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;footnote&quot;&gt;1. &lt;a href=&quot;https://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare/&quot; dir=&quot;auto&quot; id=&quot;f1&quot; target=&quot;_blank&quot; &gt;מקור &lt;a href=&quot;#a1&quot;&gt;↩&lt;/a&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;f2&quot; class=&quot;footnote&quot;&gt;2. טוב, זה לא מדוייק לגמרי, אבל נכון ב99% לפחות מהמקרים. &lt;a href=&quot;#a2&quot;&gt;↩&lt;/a&gt; &lt;/span&gt;&lt;/p&gt;</content:encoded></item></channel></rss>