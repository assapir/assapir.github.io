(self.webpackChunkassapir_github_io=self.webpackChunkassapir_github_io||[]).push([[143],{1506:function(module){eval("function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized;\nmodule.exports.default = module.exports, module.exports.__esModule = true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUwNi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esc0JBQXlCLG1CQUFtQix5QkFBeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hc3NhcGlyLmdpdGh1Yi5pby8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcz8zYzk2Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZDtcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1506\n")},7154:function(module){eval("function _extends() {\n  module.exports = _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  module.exports.default = module.exports, module.exports.__esModule = true;\n  return _extends.apply(this, arguments);\n}\n\nmodule.exports = _extends;\nmodule.exports.default = module.exports, module.exports.__esModule = true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzE1NC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0Esb0JBQW9CLHNCQUFzQjtBQUMxQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxFQUFFLHNCQUF5QixtQkFBbUIseUJBQXlCO0FBQ3ZFO0FBQ0E7O0FBRUE7QUFDQSxzQkFBeUIsbUJBQW1CLHlCQUF5QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Fzc2FwaXIuZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcy5qcz9hNTU5Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9leHRlbmRzO1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7154\n")},5354:function(module,__unused_webpack_exports,__webpack_require__){eval("var setPrototypeOf = __webpack_require__(9489);\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}\n\nmodule.exports = _inheritsLoose;\nmodule.exports.default = module.exports, module.exports.__esModule = true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTM1NC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxQkFBcUIsbUJBQU8sQ0FBQyxJQUFxQjs7QUFFbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHNCQUF5QixtQkFBbUIseUJBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXNzYXBpci5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlLmpzPzU1YjUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZShcIi4vc2V0UHJvdG90eXBlT2YuanNcIik7XG5cbmZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbmhlcml0c0xvb3NlO1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5354\n")},5318:function(module){eval('function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    "default": obj\n  };\n}\n\nmodule.exports = _interopRequireDefault;\nmodule.exports.default = module.exports, module.exports.__esModule = true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTMxOC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esc0JBQXlCLG1CQUFtQix5QkFBeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hc3NhcGlyLmdpdGh1Yi5pby8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qcz80ZWE0Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgXCJkZWZhdWx0XCI6IG9ialxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5318\n')},7316:function(module){eval("function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutPropertiesLoose;\nmodule.exports.default = module.exports, module.exports.__esModule = true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzMxNi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGNBQWMsdUJBQXVCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxzQkFBeUIsbUJBQW1CLHlCQUF5QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Fzc2FwaXIuZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcz9mMGU0Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlO1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7316\n")},9489:function(module){eval("function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  module.exports.default = module.exports, module.exports.__esModule = true;\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf;\nmodule.exports.default = module.exports, module.exports.__esModule = true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTQ4OS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEVBQUUsc0JBQXlCLG1CQUFtQix5QkFBeUI7QUFDdkU7QUFDQTs7QUFFQTtBQUNBLHNCQUF5QixtQkFBbUIseUJBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXNzYXBpci5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zZXRQcm90b3R5cGVPZi5qcz80YTRiIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfc2V0UHJvdG90eXBlT2Y7XG5tb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9489\n")},2393:function(__unused_webpack_module,exports){"use strict";eval('var __webpack_unused_export__;\n\n\n__webpack_unused_export__ = true;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar getLocation = function getLocation(source) {\n  var _source$location = source.location,\n      search = _source$location.search,\n      hash = _source$location.hash,\n      href = _source$location.href,\n      origin = _source$location.origin,\n      protocol = _source$location.protocol,\n      host = _source$location.host,\n      hostname = _source$location.hostname,\n      port = _source$location.port;\n  var pathname = source.location.pathname;\n\n  if (!pathname && href && canUseDOM) {\n    var url = new URL(href);\n    pathname = url.pathname;\n  }\n\n  return {\n    pathname: encodeURI(decodeURI(pathname)),\n    search: search,\n    hash: hash,\n    href: href,\n    origin: origin,\n    protocol: protocol,\n    host: host,\n    hostname: hostname,\n    port: port,\n    state: source.history.state,\n    key: source.history.state && source.history.state.key || "initial"\n  };\n};\n\nvar createHistory = function createHistory(source, options) {\n  var listeners = [];\n  var location = getLocation(source);\n  var transitioning = false;\n\n  var resolveTransition = function resolveTransition() {};\n\n  return {\n    get location() {\n      return location;\n    },\n\n    get transitioning() {\n      return transitioning;\n    },\n\n    _onTransitionComplete: function _onTransitionComplete() {\n      transitioning = false;\n      resolveTransition();\n    },\n    listen: function listen(listener) {\n      listeners.push(listener);\n\n      var popstateListener = function popstateListener() {\n        location = getLocation(source);\n        listener({\n          location: location,\n          action: "POP"\n        });\n      };\n\n      source.addEventListener("popstate", popstateListener);\n      return function () {\n        source.removeEventListener("popstate", popstateListener);\n        listeners = listeners.filter(function (fn) {\n          return fn !== listener;\n        });\n      };\n    },\n    navigate: function navigate(to) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          state = _ref.state,\n          _ref$replace = _ref.replace,\n          replace = _ref$replace === undefined ? false : _ref$replace;\n\n      if (typeof to === "number") {\n        source.history.go(to);\n      } else {\n        state = _extends({}, state, {\n          key: Date.now() + ""\n        }); // try...catch iOS Safari limits to 100 pushState calls\n\n        try {\n          if (transitioning || replace) {\n            source.history.replaceState(state, null, to);\n          } else {\n            source.history.pushState(state, null, to);\n          }\n        } catch (e) {\n          source.location[replace ? "replace" : "assign"](to);\n        }\n      }\n\n      location = getLocation(source);\n      transitioning = true;\n      var transition = new Promise(function (res) {\n        return resolveTransition = res;\n      });\n      listeners.forEach(function (listener) {\n        return listener({\n          location: location,\n          action: "PUSH"\n        });\n      });\n      return transition;\n    }\n  };\n}; ////////////////////////////////////////////////////////////////////////////////\n// Stores history entries in memory for testing or other platforms like Native\n\n\nvar createMemorySource = function createMemorySource() {\n  var initialPath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "/";\n  var searchIndex = initialPath.indexOf("?");\n  var initialLocation = {\n    pathname: searchIndex > -1 ? initialPath.substr(0, searchIndex) : initialPath,\n    search: searchIndex > -1 ? initialPath.substr(searchIndex) : ""\n  };\n  var index = 0;\n  var stack = [initialLocation];\n  var states = [null];\n  return {\n    get location() {\n      return stack[index];\n    },\n\n    addEventListener: function addEventListener(name, fn) {},\n    removeEventListener: function removeEventListener(name, fn) {},\n    history: {\n      get entries() {\n        return stack;\n      },\n\n      get index() {\n        return index;\n      },\n\n      get state() {\n        return states[index];\n      },\n\n      pushState: function pushState(state, _, uri) {\n        var _uri$split = uri.split("?"),\n            pathname = _uri$split[0],\n            _uri$split$ = _uri$split[1],\n            search = _uri$split$ === undefined ? "" : _uri$split$;\n\n        index++;\n        stack.push({\n          pathname: pathname,\n          search: search.length ? "?" + search : search\n        });\n        states.push(state);\n      },\n      replaceState: function replaceState(state, _, uri) {\n        var _uri$split2 = uri.split("?"),\n            pathname = _uri$split2[0],\n            _uri$split2$ = _uri$split2[1],\n            search = _uri$split2$ === undefined ? "" : _uri$split2$;\n\n        stack[index] = {\n          pathname: pathname,\n          search: search\n        };\n        states[index] = state;\n      },\n      go: function go(to) {\n        var newIndex = index + to;\n\n        if (newIndex < 0 || newIndex > states.length - 1) {\n          return;\n        }\n\n        index = newIndex;\n      }\n    }\n  };\n}; ////////////////////////////////////////////////////////////////////////////////\n// global history - uses window.history as the source if available, otherwise a\n// memory history\n\n\nvar canUseDOM = !!(typeof window !== "undefined" && window.document && window.document.createElement);\n\nvar getSource = function getSource() {\n  return canUseDOM ? window : createMemorySource();\n};\n\nvar globalHistory = createHistory(getSource());\nvar navigate = globalHistory.navigate; ////////////////////////////////////////////////////////////////////////////////\n\nexports.V5 = globalHistory;\n__webpack_unused_export__ = navigate;\n__webpack_unused_export__ = createHistory;\n__webpack_unused_export__ = createMemorySource;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2393\n')},2098:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\n\nexports.__esModule = true;\nexports.shallowCompare = exports.validateRedirect = exports.insertParams = exports.resolve = exports.match = exports.pick = exports.startsWith = undefined;\n\nvar _invariant = __webpack_require__(1143);\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} ////////////////////////////////////////////////////////////////////////////////\n// startsWith(string, search) - Check if `string` starts with `search`\n\n\nvar startsWith = function startsWith(string, search) {\n  return string.substr(0, search.length) === search;\n}; ////////////////////////////////////////////////////////////////////////////////\n// pick(routes, uri)\n//\n// Ranks and picks the best route to match. Each segment gets the highest\n// amount of points, then the type of segment gets an additional amount of\n// points where\n//\n//     static > dynamic > splat > root\n//\n// This way we don\'t have to worry about the order of our routes, let the\n// computers do it.\n//\n// A route looks like this\n//\n//     { path, default, value }\n//\n// And a returned match looks like:\n//\n//     { route, params, uri }\n//\n// I know, I should use TypeScript not comments for these types.\n\n\nvar pick = function pick(routes, uri) {\n  var match = void 0;\n  var default_ = void 0;\n\n  var _uri$split = uri.split("?"),\n      uriPathname = _uri$split[0];\n\n  var uriSegments = segmentize(uriPathname);\n  var isRootUri = uriSegments[0] === "";\n  var ranked = rankRoutes(routes);\n\n  for (var i = 0, l = ranked.length; i < l; i++) {\n    var missed = false;\n    var route = ranked[i].route;\n\n    if (route.default) {\n      default_ = {\n        route: route,\n        params: {},\n        uri: uri\n      };\n      continue;\n    }\n\n    var routeSegments = segmentize(route.path);\n    var params = {};\n    var max = Math.max(uriSegments.length, routeSegments.length);\n    var index = 0;\n\n    for (; index < max; index++) {\n      var routeSegment = routeSegments[index];\n      var uriSegment = uriSegments[index];\n\n      if (isSplat(routeSegment)) {\n        // Hit a splat, just grab the rest, and return a match\n        // uri:   /files/documents/work\n        // route: /files/*\n        var param = routeSegment.slice(1) || "*";\n        params[param] = uriSegments.slice(index).map(decodeURIComponent).join("/");\n        break;\n      }\n\n      if (uriSegment === undefined) {\n        // URI is shorter than the route, no match\n        // uri:   /users\n        // route: /users/:userId\n        missed = true;\n        break;\n      }\n\n      var dynamicMatch = paramRe.exec(routeSegment);\n\n      if (dynamicMatch && !isRootUri) {\n        var matchIsNotReserved = reservedNames.indexOf(dynamicMatch[1]) === -1;\n        !matchIsNotReserved ?  false ? 0 : (0, _invariant2.default)(false) : void 0;\n        var value = decodeURIComponent(uriSegment);\n        params[dynamicMatch[1]] = value;\n      } else if (routeSegment !== uriSegment) {\n        // Current segments don\'t match, not dynamic, not splat, so no match\n        // uri:   /users/123/settings\n        // route: /users/:id/profile\n        missed = true;\n        break;\n      }\n    }\n\n    if (!missed) {\n      match = {\n        route: route,\n        params: params,\n        uri: "/" + uriSegments.slice(0, index).join("/")\n      };\n      break;\n    }\n  }\n\n  return match || default_ || null;\n}; ////////////////////////////////////////////////////////////////////////////////\n// match(path, uri) - Matches just one path to a uri, also lol\n\n\nvar match = function match(path, uri) {\n  return pick([{\n    path: path\n  }], uri);\n}; ////////////////////////////////////////////////////////////////////////////////\n// resolve(to, basepath)\n//\n// Resolves URIs as though every path is a directory, no files.  Relative URIs\n// in the browser can feel awkward because not only can you be "in a directory"\n// you can be "at a file", too. For example\n//\n//     browserSpecResolve(\'foo\', \'/bar/\') => /bar/foo\n//     browserSpecResolve(\'foo\', \'/bar\') => /foo\n//\n// But on the command line of a file system, it\'s not as complicated, you can\'t\n// `cd` from a file, only directories.  This way, links have to know less about\n// their current path. To go deeper you can do this:\n//\n//     <Link to="deeper"/>\n//     // instead of\n//     <Link to=`{${props.uri}/deeper}`/>\n//\n// Just like `cd`, if you want to go deeper from the command line, you do this:\n//\n//     cd deeper\n//     # not\n//     cd $(pwd)/deeper\n//\n// By treating every path as a directory, linking to relative paths should\n// require less contextual information and (fingers crossed) be more intuitive.\n\n\nvar resolve = function resolve(to, base) {\n  // /foo/bar, /baz/qux => /foo/bar\n  if (startsWith(to, "/")) {\n    return to;\n  }\n\n  var _to$split = to.split("?"),\n      toPathname = _to$split[0],\n      toQuery = _to$split[1];\n\n  var _base$split = base.split("?"),\n      basePathname = _base$split[0];\n\n  var toSegments = segmentize(toPathname);\n  var baseSegments = segmentize(basePathname); // ?a=b, /users?b=c => /users?a=b\n\n  if (toSegments[0] === "") {\n    return addQuery(basePathname, toQuery);\n  } // profile, /users/789 => /users/789/profile\n\n\n  if (!startsWith(toSegments[0], ".")) {\n    var pathname = baseSegments.concat(toSegments).join("/");\n    return addQuery((basePathname === "/" ? "" : "/") + pathname, toQuery);\n  } // ./         /users/123  =>  /users/123\n  // ../        /users/123  =>  /users\n  // ../..      /users/123  =>  /\n  // ../../one  /a/b/c/d    =>  /a/b/one\n  // .././one   /a/b/c/d    =>  /a/b/c/one\n\n\n  var allSegments = baseSegments.concat(toSegments);\n  var segments = [];\n\n  for (var i = 0, l = allSegments.length; i < l; i++) {\n    var segment = allSegments[i];\n    if (segment === "..") segments.pop();else if (segment !== ".") segments.push(segment);\n  }\n\n  return addQuery("/" + segments.join("/"), toQuery);\n}; ////////////////////////////////////////////////////////////////////////////////\n// insertParams(path, params)\n\n\nvar insertParams = function insertParams(path, params) {\n  var _path$split = path.split("?"),\n      pathBase = _path$split[0],\n      _path$split$ = _path$split[1],\n      query = _path$split$ === undefined ? "" : _path$split$;\n\n  var segments = segmentize(pathBase);\n  var constructedPath = "/" + segments.map(function (segment) {\n    var match = paramRe.exec(segment);\n    return match ? params[match[1]] : segment;\n  }).join("/");\n  var _params$location = params.location;\n  _params$location = _params$location === undefined ? {} : _params$location;\n  var _params$location$sear = _params$location.search,\n      search = _params$location$sear === undefined ? "" : _params$location$sear;\n  var searchSplit = search.split("?")[1] || "";\n  constructedPath = addQuery(constructedPath, query, searchSplit);\n  return constructedPath;\n};\n\nvar validateRedirect = function validateRedirect(from, to) {\n  var filter = function filter(segment) {\n    return isDynamic(segment);\n  };\n\n  var fromString = segmentize(from).filter(filter).sort().join("/");\n  var toString = segmentize(to).filter(filter).sort().join("/");\n  return fromString === toString;\n}; ////////////////////////////////////////////////////////////////////////////////\n// Junk\n\n\nvar paramRe = /^:(.+)/;\nvar SEGMENT_POINTS = 4;\nvar STATIC_POINTS = 3;\nvar DYNAMIC_POINTS = 2;\nvar SPLAT_PENALTY = 1;\nvar ROOT_POINTS = 1;\n\nvar isRootSegment = function isRootSegment(segment) {\n  return segment === "";\n};\n\nvar isDynamic = function isDynamic(segment) {\n  return paramRe.test(segment);\n};\n\nvar isSplat = function isSplat(segment) {\n  return segment && segment[0] === "*";\n};\n\nvar rankRoute = function rankRoute(route, index) {\n  var score = route.default ? 0 : segmentize(route.path).reduce(function (score, segment) {\n    score += SEGMENT_POINTS;\n    if (isRootSegment(segment)) score += ROOT_POINTS;else if (isDynamic(segment)) score += DYNAMIC_POINTS;else if (isSplat(segment)) score -= SEGMENT_POINTS + SPLAT_PENALTY;else score += STATIC_POINTS;\n    return score;\n  }, 0);\n  return {\n    route: route,\n    score: score,\n    index: index\n  };\n};\n\nvar rankRoutes = function rankRoutes(routes) {\n  return routes.map(rankRoute).sort(function (a, b) {\n    return a.score < b.score ? 1 : a.score > b.score ? -1 : a.index - b.index;\n  });\n};\n\nvar segmentize = function segmentize(uri) {\n  return uri // strip starting/ending slashes\n  .replace(/(^\\/+|\\/+$)/g, "").split("/");\n};\n\nvar addQuery = function addQuery(pathname) {\n  for (var _len = arguments.length, query = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    query[_key - 1] = arguments[_key];\n  }\n\n  query = query.filter(function (q) {\n    return q && q.length > 0;\n  });\n  return pathname + (query && query.length > 0 ? "?" + query.join("&") : "");\n};\n\nvar reservedNames = ["uri", "path"];\n/**\n * Shallow compares two objects.\n * @param {Object} obj1 The first object to compare.\n * @param {Object} obj2 The second object to compare.\n */\n\nvar shallowCompare = function shallowCompare(obj1, obj2) {\n  var obj1Keys = Object.keys(obj1);\n  return obj1Keys.length === Object.keys(obj2).length && obj1Keys.every(function (key) {\n    return obj2.hasOwnProperty(key) && obj1[key] === obj2[key];\n  });\n}; ////////////////////////////////////////////////////////////////////////////////\n\n\nexports.startsWith = startsWith;\nexports.pick = pick;\nexports.match = match;\nexports.resolve = resolve;\nexports.insertParams = insertParams;\nexports.validateRedirect = validateRedirect;\nexports.shallowCompare = shallowCompare;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjA5OC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixrQkFBa0I7QUFDbEIsc0JBQXNCLEdBQUcsd0JBQXdCLEdBQUcsb0JBQW9CLEdBQUcsZUFBZSxHQUFHLGFBQWEsR0FBRyxZQUFZLEdBQUcsa0JBQWtCOztBQUU5SSxpQkFBaUIsbUJBQU8sQ0FBQyxJQUFXOztBQUVwQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7O0FBR0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHFDQUFxQyxPQUFPO0FBQzVDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFdBQVcsYUFBYTtBQUN4QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLDhCQUE4QixNQUFxQyxHQUFHLENBQXVLO0FBQzdPO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixFQUFFLFVBQVUsUUFBUTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSwrQ0FBK0M7O0FBRS9DO0FBQ0E7QUFDQSxJQUFJOzs7QUFHSjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUEsMENBQTBDLE9BQU87QUFDakQ7QUFDQSx5Q0FBeUM7QUFDekM7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSx5REFBeUQ7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRCxxREFBcUQsbUVBQW1FO0FBQzdLO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxzRkFBc0YsYUFBYTtBQUNuRztBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25COztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEdBQUc7OztBQUdILGtCQUFrQjtBQUNsQixZQUFZO0FBQ1osYUFBYTtBQUNiLGVBQWU7QUFDZixvQkFBb0I7QUFDcEIsd0JBQXdCO0FBQ3hCLHNCQUFzQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Fzc2FwaXIuZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzL0BnYXRzYnlqcy9yZWFjaC1yb3V0ZXIvbGliL3V0aWxzLmpzP2E0MjIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLnNoYWxsb3dDb21wYXJlID0gZXhwb3J0cy52YWxpZGF0ZVJlZGlyZWN0ID0gZXhwb3J0cy5pbnNlcnRQYXJhbXMgPSBleHBvcnRzLnJlc29sdmUgPSBleHBvcnRzLm1hdGNoID0gZXhwb3J0cy5waWNrID0gZXhwb3J0cy5zdGFydHNXaXRoID0gdW5kZWZpbmVkO1xuXG52YXIgX2ludmFyaWFudCA9IHJlcXVpcmUoXCJpbnZhcmlhbnRcIik7XG5cbnZhciBfaW52YXJpYW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ludmFyaWFudCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgZGVmYXVsdDogb2JqXG4gIH07XG59IC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBzdGFydHNXaXRoKHN0cmluZywgc2VhcmNoKSAtIENoZWNrIGlmIGBzdHJpbmdgIHN0YXJ0cyB3aXRoIGBzZWFyY2hgXG5cblxudmFyIHN0YXJ0c1dpdGggPSBmdW5jdGlvbiBzdGFydHNXaXRoKHN0cmluZywgc2VhcmNoKSB7XG4gIHJldHVybiBzdHJpbmcuc3Vic3RyKDAsIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7XG59OyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gcGljayhyb3V0ZXMsIHVyaSlcbi8vXG4vLyBSYW5rcyBhbmQgcGlja3MgdGhlIGJlc3Qgcm91dGUgdG8gbWF0Y2guIEVhY2ggc2VnbWVudCBnZXRzIHRoZSBoaWdoZXN0XG4vLyBhbW91bnQgb2YgcG9pbnRzLCB0aGVuIHRoZSB0eXBlIG9mIHNlZ21lbnQgZ2V0cyBhbiBhZGRpdGlvbmFsIGFtb3VudCBvZlxuLy8gcG9pbnRzIHdoZXJlXG4vL1xuLy8gICAgIHN0YXRpYyA+IGR5bmFtaWMgPiBzcGxhdCA+IHJvb3Rcbi8vXG4vLyBUaGlzIHdheSB3ZSBkb24ndCBoYXZlIHRvIHdvcnJ5IGFib3V0IHRoZSBvcmRlciBvZiBvdXIgcm91dGVzLCBsZXQgdGhlXG4vLyBjb21wdXRlcnMgZG8gaXQuXG4vL1xuLy8gQSByb3V0ZSBsb29rcyBsaWtlIHRoaXNcbi8vXG4vLyAgICAgeyBwYXRoLCBkZWZhdWx0LCB2YWx1ZSB9XG4vL1xuLy8gQW5kIGEgcmV0dXJuZWQgbWF0Y2ggbG9va3MgbGlrZTpcbi8vXG4vLyAgICAgeyByb3V0ZSwgcGFyYW1zLCB1cmkgfVxuLy9cbi8vIEkga25vdywgSSBzaG91bGQgdXNlIFR5cGVTY3JpcHQgbm90IGNvbW1lbnRzIGZvciB0aGVzZSB0eXBlcy5cblxuXG52YXIgcGljayA9IGZ1bmN0aW9uIHBpY2socm91dGVzLCB1cmkpIHtcbiAgdmFyIG1hdGNoID0gdm9pZCAwO1xuICB2YXIgZGVmYXVsdF8gPSB2b2lkIDA7XG5cbiAgdmFyIF91cmkkc3BsaXQgPSB1cmkuc3BsaXQoXCI/XCIpLFxuICAgICAgdXJpUGF0aG5hbWUgPSBfdXJpJHNwbGl0WzBdO1xuXG4gIHZhciB1cmlTZWdtZW50cyA9IHNlZ21lbnRpemUodXJpUGF0aG5hbWUpO1xuICB2YXIgaXNSb290VXJpID0gdXJpU2VnbWVudHNbMF0gPT09IFwiXCI7XG4gIHZhciByYW5rZWQgPSByYW5rUm91dGVzKHJvdXRlcyk7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSByYW5rZWQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIG1pc3NlZCA9IGZhbHNlO1xuICAgIHZhciByb3V0ZSA9IHJhbmtlZFtpXS5yb3V0ZTtcblxuICAgIGlmIChyb3V0ZS5kZWZhdWx0KSB7XG4gICAgICBkZWZhdWx0XyA9IHtcbiAgICAgICAgcm91dGU6IHJvdXRlLFxuICAgICAgICBwYXJhbXM6IHt9LFxuICAgICAgICB1cmk6IHVyaVxuICAgICAgfTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciByb3V0ZVNlZ21lbnRzID0gc2VnbWVudGl6ZShyb3V0ZS5wYXRoKTtcbiAgICB2YXIgcGFyYW1zID0ge307XG4gICAgdmFyIG1heCA9IE1hdGgubWF4KHVyaVNlZ21lbnRzLmxlbmd0aCwgcm91dGVTZWdtZW50cy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG5cbiAgICBmb3IgKDsgaW5kZXggPCBtYXg7IGluZGV4KyspIHtcbiAgICAgIHZhciByb3V0ZVNlZ21lbnQgPSByb3V0ZVNlZ21lbnRzW2luZGV4XTtcbiAgICAgIHZhciB1cmlTZWdtZW50ID0gdXJpU2VnbWVudHNbaW5kZXhdO1xuXG4gICAgICBpZiAoaXNTcGxhdChyb3V0ZVNlZ21lbnQpKSB7XG4gICAgICAgIC8vIEhpdCBhIHNwbGF0LCBqdXN0IGdyYWIgdGhlIHJlc3QsIGFuZCByZXR1cm4gYSBtYXRjaFxuICAgICAgICAvLyB1cmk6ICAgL2ZpbGVzL2RvY3VtZW50cy93b3JrXG4gICAgICAgIC8vIHJvdXRlOiAvZmlsZXMvKlxuICAgICAgICB2YXIgcGFyYW0gPSByb3V0ZVNlZ21lbnQuc2xpY2UoMSkgfHwgXCIqXCI7XG4gICAgICAgIHBhcmFtc1twYXJhbV0gPSB1cmlTZWdtZW50cy5zbGljZShpbmRleCkubWFwKGRlY29kZVVSSUNvbXBvbmVudCkuam9pbihcIi9cIik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAodXJpU2VnbWVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIFVSSSBpcyBzaG9ydGVyIHRoYW4gdGhlIHJvdXRlLCBubyBtYXRjaFxuICAgICAgICAvLyB1cmk6ICAgL3VzZXJzXG4gICAgICAgIC8vIHJvdXRlOiAvdXNlcnMvOnVzZXJJZFxuICAgICAgICBtaXNzZWQgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgdmFyIGR5bmFtaWNNYXRjaCA9IHBhcmFtUmUuZXhlYyhyb3V0ZVNlZ21lbnQpO1xuXG4gICAgICBpZiAoZHluYW1pY01hdGNoICYmICFpc1Jvb3RVcmkpIHtcbiAgICAgICAgdmFyIG1hdGNoSXNOb3RSZXNlcnZlZCA9IHJlc2VydmVkTmFtZXMuaW5kZXhPZihkeW5hbWljTWF0Y2hbMV0pID09PSAtMTtcbiAgICAgICAgIW1hdGNoSXNOb3RSZXNlcnZlZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfaW52YXJpYW50Mi5kZWZhdWx0KShmYWxzZSwgXCI8Um91dGVyPiBkeW5hbWljIHNlZ21lbnQgXFxcIlwiICsgZHluYW1pY01hdGNoWzFdICsgXCJcXFwiIGlzIGEgcmVzZXJ2ZWQgbmFtZS4gUGxlYXNlIHVzZSBhIGRpZmZlcmVudCBuYW1lIGluIHBhdGggXFxcIlwiICsgcm91dGUucGF0aCArIFwiXFxcIi5cIikgOiAoMCwgX2ludmFyaWFudDIuZGVmYXVsdCkoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICB2YXIgdmFsdWUgPSBkZWNvZGVVUklDb21wb25lbnQodXJpU2VnbWVudCk7XG4gICAgICAgIHBhcmFtc1tkeW5hbWljTWF0Y2hbMV1dID0gdmFsdWU7XG4gICAgICB9IGVsc2UgaWYgKHJvdXRlU2VnbWVudCAhPT0gdXJpU2VnbWVudCkge1xuICAgICAgICAvLyBDdXJyZW50IHNlZ21lbnRzIGRvbid0IG1hdGNoLCBub3QgZHluYW1pYywgbm90IHNwbGF0LCBzbyBubyBtYXRjaFxuICAgICAgICAvLyB1cmk6ICAgL3VzZXJzLzEyMy9zZXR0aW5nc1xuICAgICAgICAvLyByb3V0ZTogL3VzZXJzLzppZC9wcm9maWxlXG4gICAgICAgIG1pc3NlZCA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghbWlzc2VkKSB7XG4gICAgICBtYXRjaCA9IHtcbiAgICAgICAgcm91dGU6IHJvdXRlLFxuICAgICAgICBwYXJhbXM6IHBhcmFtcyxcbiAgICAgICAgdXJpOiBcIi9cIiArIHVyaVNlZ21lbnRzLnNsaWNlKDAsIGluZGV4KS5qb2luKFwiL1wiKVxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtYXRjaCB8fCBkZWZhdWx0XyB8fCBudWxsO1xufTsgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIG1hdGNoKHBhdGgsIHVyaSkgLSBNYXRjaGVzIGp1c3Qgb25lIHBhdGggdG8gYSB1cmksIGFsc28gbG9sXG5cblxudmFyIG1hdGNoID0gZnVuY3Rpb24gbWF0Y2gocGF0aCwgdXJpKSB7XG4gIHJldHVybiBwaWNrKFt7XG4gICAgcGF0aDogcGF0aFxuICB9XSwgdXJpKTtcbn07IC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyByZXNvbHZlKHRvLCBiYXNlcGF0aClcbi8vXG4vLyBSZXNvbHZlcyBVUklzIGFzIHRob3VnaCBldmVyeSBwYXRoIGlzIGEgZGlyZWN0b3J5LCBubyBmaWxlcy4gIFJlbGF0aXZlIFVSSXNcbi8vIGluIHRoZSBicm93c2VyIGNhbiBmZWVsIGF3a3dhcmQgYmVjYXVzZSBub3Qgb25seSBjYW4geW91IGJlIFwiaW4gYSBkaXJlY3RvcnlcIlxuLy8geW91IGNhbiBiZSBcImF0IGEgZmlsZVwiLCB0b28uIEZvciBleGFtcGxlXG4vL1xuLy8gICAgIGJyb3dzZXJTcGVjUmVzb2x2ZSgnZm9vJywgJy9iYXIvJykgPT4gL2Jhci9mb29cbi8vICAgICBicm93c2VyU3BlY1Jlc29sdmUoJ2ZvbycsICcvYmFyJykgPT4gL2Zvb1xuLy9cbi8vIEJ1dCBvbiB0aGUgY29tbWFuZCBsaW5lIG9mIGEgZmlsZSBzeXN0ZW0sIGl0J3Mgbm90IGFzIGNvbXBsaWNhdGVkLCB5b3UgY2FuJ3Rcbi8vIGBjZGAgZnJvbSBhIGZpbGUsIG9ubHkgZGlyZWN0b3JpZXMuICBUaGlzIHdheSwgbGlua3MgaGF2ZSB0byBrbm93IGxlc3MgYWJvdXRcbi8vIHRoZWlyIGN1cnJlbnQgcGF0aC4gVG8gZ28gZGVlcGVyIHlvdSBjYW4gZG8gdGhpczpcbi8vXG4vLyAgICAgPExpbmsgdG89XCJkZWVwZXJcIi8+XG4vLyAgICAgLy8gaW5zdGVhZCBvZlxuLy8gICAgIDxMaW5rIHRvPWB7JHtwcm9wcy51cml9L2RlZXBlcn1gLz5cbi8vXG4vLyBKdXN0IGxpa2UgYGNkYCwgaWYgeW91IHdhbnQgdG8gZ28gZGVlcGVyIGZyb20gdGhlIGNvbW1hbmQgbGluZSwgeW91IGRvIHRoaXM6XG4vL1xuLy8gICAgIGNkIGRlZXBlclxuLy8gICAgICMgbm90XG4vLyAgICAgY2QgJChwd2QpL2RlZXBlclxuLy9cbi8vIEJ5IHRyZWF0aW5nIGV2ZXJ5IHBhdGggYXMgYSBkaXJlY3RvcnksIGxpbmtpbmcgdG8gcmVsYXRpdmUgcGF0aHMgc2hvdWxkXG4vLyByZXF1aXJlIGxlc3MgY29udGV4dHVhbCBpbmZvcm1hdGlvbiBhbmQgKGZpbmdlcnMgY3Jvc3NlZCkgYmUgbW9yZSBpbnR1aXRpdmUuXG5cblxudmFyIHJlc29sdmUgPSBmdW5jdGlvbiByZXNvbHZlKHRvLCBiYXNlKSB7XG4gIC8vIC9mb28vYmFyLCAvYmF6L3F1eCA9PiAvZm9vL2JhclxuICBpZiAoc3RhcnRzV2l0aCh0bywgXCIvXCIpKSB7XG4gICAgcmV0dXJuIHRvO1xuICB9XG5cbiAgdmFyIF90byRzcGxpdCA9IHRvLnNwbGl0KFwiP1wiKSxcbiAgICAgIHRvUGF0aG5hbWUgPSBfdG8kc3BsaXRbMF0sXG4gICAgICB0b1F1ZXJ5ID0gX3RvJHNwbGl0WzFdO1xuXG4gIHZhciBfYmFzZSRzcGxpdCA9IGJhc2Uuc3BsaXQoXCI/XCIpLFxuICAgICAgYmFzZVBhdGhuYW1lID0gX2Jhc2Ukc3BsaXRbMF07XG5cbiAgdmFyIHRvU2VnbWVudHMgPSBzZWdtZW50aXplKHRvUGF0aG5hbWUpO1xuICB2YXIgYmFzZVNlZ21lbnRzID0gc2VnbWVudGl6ZShiYXNlUGF0aG5hbWUpOyAvLyA/YT1iLCAvdXNlcnM/Yj1jID0+IC91c2Vycz9hPWJcblxuICBpZiAodG9TZWdtZW50c1swXSA9PT0gXCJcIikge1xuICAgIHJldHVybiBhZGRRdWVyeShiYXNlUGF0aG5hbWUsIHRvUXVlcnkpO1xuICB9IC8vIHByb2ZpbGUsIC91c2Vycy83ODkgPT4gL3VzZXJzLzc4OS9wcm9maWxlXG5cblxuICBpZiAoIXN0YXJ0c1dpdGgodG9TZWdtZW50c1swXSwgXCIuXCIpKSB7XG4gICAgdmFyIHBhdGhuYW1lID0gYmFzZVNlZ21lbnRzLmNvbmNhdCh0b1NlZ21lbnRzKS5qb2luKFwiL1wiKTtcbiAgICByZXR1cm4gYWRkUXVlcnkoKGJhc2VQYXRobmFtZSA9PT0gXCIvXCIgPyBcIlwiIDogXCIvXCIpICsgcGF0aG5hbWUsIHRvUXVlcnkpO1xuICB9IC8vIC4vICAgICAgICAgL3VzZXJzLzEyMyAgPT4gIC91c2Vycy8xMjNcbiAgLy8gLi4vICAgICAgICAvdXNlcnMvMTIzICA9PiAgL3VzZXJzXG4gIC8vIC4uLy4uICAgICAgL3VzZXJzLzEyMyAgPT4gIC9cbiAgLy8gLi4vLi4vb25lICAvYS9iL2MvZCAgICA9PiAgL2EvYi9vbmVcbiAgLy8gLi4vLi9vbmUgICAvYS9iL2MvZCAgICA9PiAgL2EvYi9jL29uZVxuXG5cbiAgdmFyIGFsbFNlZ21lbnRzID0gYmFzZVNlZ21lbnRzLmNvbmNhdCh0b1NlZ21lbnRzKTtcbiAgdmFyIHNlZ21lbnRzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhbGxTZWdtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgc2VnbWVudCA9IGFsbFNlZ21lbnRzW2ldO1xuICAgIGlmIChzZWdtZW50ID09PSBcIi4uXCIpIHNlZ21lbnRzLnBvcCgpO2Vsc2UgaWYgKHNlZ21lbnQgIT09IFwiLlwiKSBzZWdtZW50cy5wdXNoKHNlZ21lbnQpO1xuICB9XG5cbiAgcmV0dXJuIGFkZFF1ZXJ5KFwiL1wiICsgc2VnbWVudHMuam9pbihcIi9cIiksIHRvUXVlcnkpO1xufTsgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIGluc2VydFBhcmFtcyhwYXRoLCBwYXJhbXMpXG5cblxudmFyIGluc2VydFBhcmFtcyA9IGZ1bmN0aW9uIGluc2VydFBhcmFtcyhwYXRoLCBwYXJhbXMpIHtcbiAgdmFyIF9wYXRoJHNwbGl0ID0gcGF0aC5zcGxpdChcIj9cIiksXG4gICAgICBwYXRoQmFzZSA9IF9wYXRoJHNwbGl0WzBdLFxuICAgICAgX3BhdGgkc3BsaXQkID0gX3BhdGgkc3BsaXRbMV0sXG4gICAgICBxdWVyeSA9IF9wYXRoJHNwbGl0JCA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IF9wYXRoJHNwbGl0JDtcblxuICB2YXIgc2VnbWVudHMgPSBzZWdtZW50aXplKHBhdGhCYXNlKTtcbiAgdmFyIGNvbnN0cnVjdGVkUGF0aCA9IFwiL1wiICsgc2VnbWVudHMubWFwKGZ1bmN0aW9uIChzZWdtZW50KSB7XG4gICAgdmFyIG1hdGNoID0gcGFyYW1SZS5leGVjKHNlZ21lbnQpO1xuICAgIHJldHVybiBtYXRjaCA/IHBhcmFtc1ttYXRjaFsxXV0gOiBzZWdtZW50O1xuICB9KS5qb2luKFwiL1wiKTtcbiAgdmFyIF9wYXJhbXMkbG9jYXRpb24gPSBwYXJhbXMubG9jYXRpb247XG4gIF9wYXJhbXMkbG9jYXRpb24gPSBfcGFyYW1zJGxvY2F0aW9uID09PSB1bmRlZmluZWQgPyB7fSA6IF9wYXJhbXMkbG9jYXRpb247XG4gIHZhciBfcGFyYW1zJGxvY2F0aW9uJHNlYXIgPSBfcGFyYW1zJGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgIHNlYXJjaCA9IF9wYXJhbXMkbG9jYXRpb24kc2VhciA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IF9wYXJhbXMkbG9jYXRpb24kc2VhcjtcbiAgdmFyIHNlYXJjaFNwbGl0ID0gc2VhcmNoLnNwbGl0KFwiP1wiKVsxXSB8fCBcIlwiO1xuICBjb25zdHJ1Y3RlZFBhdGggPSBhZGRRdWVyeShjb25zdHJ1Y3RlZFBhdGgsIHF1ZXJ5LCBzZWFyY2hTcGxpdCk7XG4gIHJldHVybiBjb25zdHJ1Y3RlZFBhdGg7XG59O1xuXG52YXIgdmFsaWRhdGVSZWRpcmVjdCA9IGZ1bmN0aW9uIHZhbGlkYXRlUmVkaXJlY3QoZnJvbSwgdG8pIHtcbiAgdmFyIGZpbHRlciA9IGZ1bmN0aW9uIGZpbHRlcihzZWdtZW50KSB7XG4gICAgcmV0dXJuIGlzRHluYW1pYyhzZWdtZW50KTtcbiAgfTtcblxuICB2YXIgZnJvbVN0cmluZyA9IHNlZ21lbnRpemUoZnJvbSkuZmlsdGVyKGZpbHRlcikuc29ydCgpLmpvaW4oXCIvXCIpO1xuICB2YXIgdG9TdHJpbmcgPSBzZWdtZW50aXplKHRvKS5maWx0ZXIoZmlsdGVyKS5zb3J0KCkuam9pbihcIi9cIik7XG4gIHJldHVybiBmcm9tU3RyaW5nID09PSB0b1N0cmluZztcbn07IC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBKdW5rXG5cblxudmFyIHBhcmFtUmUgPSAvXjooLispLztcbnZhciBTRUdNRU5UX1BPSU5UUyA9IDQ7XG52YXIgU1RBVElDX1BPSU5UUyA9IDM7XG52YXIgRFlOQU1JQ19QT0lOVFMgPSAyO1xudmFyIFNQTEFUX1BFTkFMVFkgPSAxO1xudmFyIFJPT1RfUE9JTlRTID0gMTtcblxudmFyIGlzUm9vdFNlZ21lbnQgPSBmdW5jdGlvbiBpc1Jvb3RTZWdtZW50KHNlZ21lbnQpIHtcbiAgcmV0dXJuIHNlZ21lbnQgPT09IFwiXCI7XG59O1xuXG52YXIgaXNEeW5hbWljID0gZnVuY3Rpb24gaXNEeW5hbWljKHNlZ21lbnQpIHtcbiAgcmV0dXJuIHBhcmFtUmUudGVzdChzZWdtZW50KTtcbn07XG5cbnZhciBpc1NwbGF0ID0gZnVuY3Rpb24gaXNTcGxhdChzZWdtZW50KSB7XG4gIHJldHVybiBzZWdtZW50ICYmIHNlZ21lbnRbMF0gPT09IFwiKlwiO1xufTtcblxudmFyIHJhbmtSb3V0ZSA9IGZ1bmN0aW9uIHJhbmtSb3V0ZShyb3V0ZSwgaW5kZXgpIHtcbiAgdmFyIHNjb3JlID0gcm91dGUuZGVmYXVsdCA/IDAgOiBzZWdtZW50aXplKHJvdXRlLnBhdGgpLnJlZHVjZShmdW5jdGlvbiAoc2NvcmUsIHNlZ21lbnQpIHtcbiAgICBzY29yZSArPSBTRUdNRU5UX1BPSU5UUztcbiAgICBpZiAoaXNSb290U2VnbWVudChzZWdtZW50KSkgc2NvcmUgKz0gUk9PVF9QT0lOVFM7ZWxzZSBpZiAoaXNEeW5hbWljKHNlZ21lbnQpKSBzY29yZSArPSBEWU5BTUlDX1BPSU5UUztlbHNlIGlmIChpc1NwbGF0KHNlZ21lbnQpKSBzY29yZSAtPSBTRUdNRU5UX1BPSU5UUyArIFNQTEFUX1BFTkFMVFk7ZWxzZSBzY29yZSArPSBTVEFUSUNfUE9JTlRTO1xuICAgIHJldHVybiBzY29yZTtcbiAgfSwgMCk7XG4gIHJldHVybiB7XG4gICAgcm91dGU6IHJvdXRlLFxuICAgIHNjb3JlOiBzY29yZSxcbiAgICBpbmRleDogaW5kZXhcbiAgfTtcbn07XG5cbnZhciByYW5rUm91dGVzID0gZnVuY3Rpb24gcmFua1JvdXRlcyhyb3V0ZXMpIHtcbiAgcmV0dXJuIHJvdXRlcy5tYXAocmFua1JvdXRlKS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGEuc2NvcmUgPCBiLnNjb3JlID8gMSA6IGEuc2NvcmUgPiBiLnNjb3JlID8gLTEgOiBhLmluZGV4IC0gYi5pbmRleDtcbiAgfSk7XG59O1xuXG52YXIgc2VnbWVudGl6ZSA9IGZ1bmN0aW9uIHNlZ21lbnRpemUodXJpKSB7XG4gIHJldHVybiB1cmkgLy8gc3RyaXAgc3RhcnRpbmcvZW5kaW5nIHNsYXNoZXNcbiAgLnJlcGxhY2UoLyheXFwvK3xcXC8rJCkvZywgXCJcIikuc3BsaXQoXCIvXCIpO1xufTtcblxudmFyIGFkZFF1ZXJ5ID0gZnVuY3Rpb24gYWRkUXVlcnkocGF0aG5hbWUpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHF1ZXJ5ID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIHF1ZXJ5W19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHF1ZXJ5ID0gcXVlcnkuZmlsdGVyKGZ1bmN0aW9uIChxKSB7XG4gICAgcmV0dXJuIHEgJiYgcS5sZW5ndGggPiAwO1xuICB9KTtcbiAgcmV0dXJuIHBhdGhuYW1lICsgKHF1ZXJ5ICYmIHF1ZXJ5Lmxlbmd0aCA+IDAgPyBcIj9cIiArIHF1ZXJ5LmpvaW4oXCImXCIpIDogXCJcIik7XG59O1xuXG52YXIgcmVzZXJ2ZWROYW1lcyA9IFtcInVyaVwiLCBcInBhdGhcIl07XG4vKipcbiAqIFNoYWxsb3cgY29tcGFyZXMgdHdvIG9iamVjdHMuXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBUaGUgZmlyc3Qgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMiBUaGUgc2Vjb25kIG9iamVjdCB0byBjb21wYXJlLlxuICovXG5cbnZhciBzaGFsbG93Q29tcGFyZSA9IGZ1bmN0aW9uIHNoYWxsb3dDb21wYXJlKG9iajEsIG9iajIpIHtcbiAgdmFyIG9iajFLZXlzID0gT2JqZWN0LmtleXMob2JqMSk7XG4gIHJldHVybiBvYmoxS2V5cy5sZW5ndGggPT09IE9iamVjdC5rZXlzKG9iajIpLmxlbmd0aCAmJiBvYmoxS2V5cy5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIG9iajIuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBvYmoxW2tleV0gPT09IG9iajJba2V5XTtcbiAgfSk7XG59OyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cbmV4cG9ydHMuc3RhcnRzV2l0aCA9IHN0YXJ0c1dpdGg7XG5leHBvcnRzLnBpY2sgPSBwaWNrO1xuZXhwb3J0cy5tYXRjaCA9IG1hdGNoO1xuZXhwb3J0cy5yZXNvbHZlID0gcmVzb2x2ZTtcbmV4cG9ydHMuaW5zZXJ0UGFyYW1zID0gaW5zZXJ0UGFyYW1zO1xuZXhwb3J0cy52YWxpZGF0ZVJlZGlyZWN0ID0gdmFsaWRhdGVSZWRpcmVjdDtcbmV4cG9ydHMuc2hhbGxvd0NvbXBhcmUgPSBzaGFsbG93Q29tcGFyZTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2098\n')},4811:function(module){"use strict";eval("\n\nvar preserveCamelCase = function preserveCamelCase(string) {\n  var isLastCharLower = false;\n  var isLastCharUpper = false;\n  var isLastLastCharUpper = false;\n\n  for (var i = 0; i < string.length; i++) {\n    var character = string[i];\n\n    if (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n      string = string.slice(0, i) + '-' + string.slice(i);\n      isLastCharLower = false;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = true;\n      i++;\n    } else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n      string = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = false;\n      isLastCharLower = true;\n    } else {\n      isLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n    }\n  }\n\n  return string;\n};\n\nvar camelCase = function camelCase(input, options) {\n  if (!(typeof input === 'string' || Array.isArray(input))) {\n    throw new TypeError('Expected the input to be `string | string[]`');\n  }\n\n  options = Object.assign({\n    pascalCase: false\n  }, options);\n\n  var postProcess = function postProcess(x) {\n    return options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n  };\n\n  if (Array.isArray(input)) {\n    input = input.map(function (x) {\n      return x.trim();\n    }).filter(function (x) {\n      return x.length;\n    }).join('-');\n  } else {\n    input = input.trim();\n  }\n\n  if (input.length === 0) {\n    return '';\n  }\n\n  if (input.length === 1) {\n    return options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n  }\n\n  var hasUpperCase = input !== input.toLowerCase();\n\n  if (hasUpperCase) {\n    input = preserveCamelCase(input);\n  }\n\n  input = input.replace(/^[_.\\- ]+/, '').toLowerCase().replace(/[_.\\- ]+(\\w|$)/g, function (_, p1) {\n    return p1.toUpperCase();\n  }).replace(/\\d+(\\w|$)/g, function (m) {\n    return m.toUpperCase();\n  });\n  return postProcess(input);\n};\n\nmodule.exports = camelCase; // TODO: Remove this for the next major release\n\nmodule.exports.default = camelCase;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDgxMS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0IsbUJBQW1CO0FBQ3JDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUEsNEJBQTRCOztBQUU1QixzQkFBc0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hc3NhcGlyLmdpdGh1Yi5pby8uL25vZGVfbW9kdWxlcy9jYW1lbGNhc2UvaW5kZXguanM/YWEyOSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBwcmVzZXJ2ZUNhbWVsQ2FzZSA9IGZ1bmN0aW9uIHByZXNlcnZlQ2FtZWxDYXNlKHN0cmluZykge1xuICB2YXIgaXNMYXN0Q2hhckxvd2VyID0gZmFsc2U7XG4gIHZhciBpc0xhc3RDaGFyVXBwZXIgPSBmYWxzZTtcbiAgdmFyIGlzTGFzdExhc3RDaGFyVXBwZXIgPSBmYWxzZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cmluZy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBjaGFyYWN0ZXIgPSBzdHJpbmdbaV07XG5cbiAgICBpZiAoaXNMYXN0Q2hhckxvd2VyICYmIC9bYS16QS1aXS8udGVzdChjaGFyYWN0ZXIpICYmIGNoYXJhY3Rlci50b1VwcGVyQ2FzZSgpID09PSBjaGFyYWN0ZXIpIHtcbiAgICAgIHN0cmluZyA9IHN0cmluZy5zbGljZSgwLCBpKSArICctJyArIHN0cmluZy5zbGljZShpKTtcbiAgICAgIGlzTGFzdENoYXJMb3dlciA9IGZhbHNlO1xuICAgICAgaXNMYXN0TGFzdENoYXJVcHBlciA9IGlzTGFzdENoYXJVcHBlcjtcbiAgICAgIGlzTGFzdENoYXJVcHBlciA9IHRydWU7XG4gICAgICBpKys7XG4gICAgfSBlbHNlIGlmIChpc0xhc3RDaGFyVXBwZXIgJiYgaXNMYXN0TGFzdENoYXJVcHBlciAmJiAvW2EtekEtWl0vLnRlc3QoY2hhcmFjdGVyKSAmJiBjaGFyYWN0ZXIudG9Mb3dlckNhc2UoKSA9PT0gY2hhcmFjdGVyKSB7XG4gICAgICBzdHJpbmcgPSBzdHJpbmcuc2xpY2UoMCwgaSAtIDEpICsgJy0nICsgc3RyaW5nLnNsaWNlKGkgLSAxKTtcbiAgICAgIGlzTGFzdExhc3RDaGFyVXBwZXIgPSBpc0xhc3RDaGFyVXBwZXI7XG4gICAgICBpc0xhc3RDaGFyVXBwZXIgPSBmYWxzZTtcbiAgICAgIGlzTGFzdENoYXJMb3dlciA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlzTGFzdENoYXJMb3dlciA9IGNoYXJhY3Rlci50b0xvd2VyQ2FzZSgpID09PSBjaGFyYWN0ZXIgJiYgY2hhcmFjdGVyLnRvVXBwZXJDYXNlKCkgIT09IGNoYXJhY3RlcjtcbiAgICAgIGlzTGFzdExhc3RDaGFyVXBwZXIgPSBpc0xhc3RDaGFyVXBwZXI7XG4gICAgICBpc0xhc3RDaGFyVXBwZXIgPSBjaGFyYWN0ZXIudG9VcHBlckNhc2UoKSA9PT0gY2hhcmFjdGVyICYmIGNoYXJhY3Rlci50b0xvd2VyQ2FzZSgpICE9PSBjaGFyYWN0ZXI7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZztcbn07XG5cbnZhciBjYW1lbENhc2UgPSBmdW5jdGlvbiBjYW1lbENhc2UoaW5wdXQsIG9wdGlvbnMpIHtcbiAgaWYgKCEodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJyB8fCBBcnJheS5pc0FycmF5KGlucHV0KSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCB0aGUgaW5wdXQgdG8gYmUgYHN0cmluZyB8IHN0cmluZ1tdYCcpO1xuICB9XG5cbiAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe1xuICAgIHBhc2NhbENhc2U6IGZhbHNlXG4gIH0sIG9wdGlvbnMpO1xuXG4gIHZhciBwb3N0UHJvY2VzcyA9IGZ1bmN0aW9uIHBvc3RQcm9jZXNzKHgpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5wYXNjYWxDYXNlID8geC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHguc2xpY2UoMSkgOiB4O1xuICB9O1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGlucHV0KSkge1xuICAgIGlucHV0ID0gaW5wdXQubWFwKGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4geC50cmltKCk7XG4gICAgfSkuZmlsdGVyKGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4geC5sZW5ndGg7XG4gICAgfSkuam9pbignLScpO1xuICB9IGVsc2Uge1xuICAgIGlucHV0ID0gaW5wdXQudHJpbSgpO1xuICB9XG5cbiAgaWYgKGlucHV0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIGlmIChpbnB1dC5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5wYXNjYWxDYXNlID8gaW5wdXQudG9VcHBlckNhc2UoKSA6IGlucHV0LnRvTG93ZXJDYXNlKCk7XG4gIH1cblxuICB2YXIgaGFzVXBwZXJDYXNlID0gaW5wdXQgIT09IGlucHV0LnRvTG93ZXJDYXNlKCk7XG5cbiAgaWYgKGhhc1VwcGVyQ2FzZSkge1xuICAgIGlucHV0ID0gcHJlc2VydmVDYW1lbENhc2UoaW5wdXQpO1xuICB9XG5cbiAgaW5wdXQgPSBpbnB1dC5yZXBsYWNlKC9eW18uXFwtIF0rLywgJycpLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvW18uXFwtIF0rKFxcd3wkKS9nLCBmdW5jdGlvbiAoXywgcDEpIHtcbiAgICByZXR1cm4gcDEudG9VcHBlckNhc2UoKTtcbiAgfSkucmVwbGFjZSgvXFxkKyhcXHd8JCkvZywgZnVuY3Rpb24gKG0pIHtcbiAgICByZXR1cm4gbS50b1VwcGVyQ2FzZSgpO1xuICB9KTtcbiAgcmV0dXJuIHBvc3RQcm9jZXNzKGlucHV0KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gY2FtZWxDYXNlOyAvLyBUT0RPOiBSZW1vdmUgdGhpcyBmb3IgdGhlIG5leHQgbWFqb3IgcmVsZWFzZVxuXG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gY2FtZWxDYXNlOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4811\n")},4041:function(){"use strict";eval("\n// UNUSED EXPORTS: TemplateTag, codeBlock, commaLists, commaListsAnd, commaListsOr, html, inlineArrayTransformer, inlineLists, oneLine, oneLineCommaLists, oneLineCommaListsAnd, oneLineCommaListsOr, oneLineInlineLists, oneLineTrim, removeNonPrintingValuesTransformer, replaceResultTransformer, replaceStringTransformer, replaceSubstitutionTransformer, safeHtml, source, splitStringTransformer, stripIndent, stripIndentTransformer, stripIndents, trimResultTransformer\n\n;// CONCATENATED MODULE: ./node_modules/common-tags/es/TemplateTag/TemplateTag.js\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _templateObject = _taggedTemplateLiteral(['', ''], ['', '']);\n\nfunction _taggedTemplateLiteral(strings, raw) {\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * @class TemplateTag\n * @classdesc Consumes a pipeline of composable transformer plugins and produces a template tag.\n */\n\n\nvar TemplateTag = function () {\n  /**\n   * constructs a template tag\n   * @constructs TemplateTag\n   * @param  {...Object} [...transformers] - an array or arguments list of transformers\n   * @return {Function}                    - a template tag\n   */\n  function TemplateTag() {\n    var _this = this;\n\n    for (var _len = arguments.length, transformers = Array(_len), _key = 0; _key < _len; _key++) {\n      transformers[_key] = arguments[_key];\n    }\n\n    _classCallCheck(this, TemplateTag);\n\n    this.tag = function (strings) {\n      for (var _len2 = arguments.length, expressions = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        expressions[_key2 - 1] = arguments[_key2];\n      }\n\n      if (typeof strings === 'function') {\n        // if the first argument passed is a function, assume it is a template tag and return\n        // an intermediary tag that processes the template using the aforementioned tag, passing the\n        // result to our tag\n        return _this.interimTag.bind(_this, strings);\n      }\n\n      if (typeof strings === 'string') {\n        // if the first argument passed is a string, just transform it\n        return _this.transformEndResult(strings);\n      } // else, return a transformed end result of processing the template with our tag\n\n\n      strings = strings.map(_this.transformString.bind(_this));\n      return _this.transformEndResult(strings.reduce(_this.processSubstitutions.bind(_this, expressions)));\n    }; // if first argument is an array, extrude it as a list of transformers\n\n\n    if (transformers.length > 0 && Array.isArray(transformers[0])) {\n      transformers = transformers[0];\n    } // if any transformers are functions, this means they are not initiated - automatically initiate them\n\n\n    this.transformers = transformers.map(function (transformer) {\n      return typeof transformer === 'function' ? transformer() : transformer;\n    }); // return an ES2015 template tag\n\n    return this.tag;\n  }\n  /**\n   * Applies all transformers to a template literal tagged with this method.\n   * If a function is passed as the first argument, assumes the function is a template tag\n   * and applies it to the template, returning a template tag.\n   * @param  {(Function|String|Array<String>)} strings        - Either a template tag or an array containing template strings separated by identifier\n   * @param  {...*}                            ...expressions - Optional list of substitution values.\n   * @return {(String|Function)}                              - Either an intermediary tag function or the results of processing the template.\n   */\n\n\n  _createClass(TemplateTag, [{\n    key: 'interimTag',\n\n    /**\n     * An intermediary template tag that receives a template tag and passes the result of calling the template with the received\n     * template tag to our own template tag.\n     * @param  {Function}        nextTag          - the received template tag\n     * @param  {Array<String>}   template         - the template to process\n     * @param  {...*}            ...substitutions - `substitutions` is an array of all substitutions in the template\n     * @return {*}                                - the final processed value\n     */\n    value: function interimTag(previousTag, template) {\n      for (var _len3 = arguments.length, substitutions = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n        substitutions[_key3 - 2] = arguments[_key3];\n      }\n\n      return this.tag(_templateObject, previousTag.apply(undefined, [template].concat(substitutions)));\n    }\n    /**\n     * Performs bulk processing on the tagged template, transforming each substitution and then\n     * concatenating the resulting values into a string.\n     * @param  {Array<*>} substitutions - an array of all remaining substitutions present in this template\n     * @param  {String}   resultSoFar   - this iteration's result string so far\n     * @param  {String}   remainingPart - the template chunk after the current substitution\n     * @return {String}                 - the result of joining this iteration's processed substitution with the result\n     */\n\n  }, {\n    key: 'processSubstitutions',\n    value: function processSubstitutions(substitutions, resultSoFar, remainingPart) {\n      var substitution = this.transformSubstitution(substitutions.shift(), resultSoFar);\n      return ''.concat(resultSoFar, substitution, remainingPart);\n    }\n    /**\n     * Iterate through each transformer, applying the transformer's `onString` method to the template\n     * strings before all substitutions are processed.\n     * @param {String}  str - The input string\n     * @return {String}     - The final results of processing each transformer\n     */\n\n  }, {\n    key: 'transformString',\n    value: function transformString(str) {\n      var cb = function cb(res, transform) {\n        return transform.onString ? transform.onString(res) : res;\n      };\n\n      return this.transformers.reduce(cb, str);\n    }\n    /**\n     * When a substitution is encountered, iterates through each transformer and applies the transformer's\n     * `onSubstitution` method to the substitution.\n     * @param  {*}      substitution - The current substitution\n     * @param  {String} resultSoFar  - The result up to and excluding this substitution.\n     * @return {*}                   - The final result of applying all substitution transformations.\n     */\n\n  }, {\n    key: 'transformSubstitution',\n    value: function transformSubstitution(substitution, resultSoFar) {\n      var cb = function cb(res, transform) {\n        return transform.onSubstitution ? transform.onSubstitution(res, resultSoFar) : res;\n      };\n\n      return this.transformers.reduce(cb, substitution);\n    }\n    /**\n     * Iterates through each transformer, applying the transformer's `onEndResult` method to the\n     * template literal after all substitutions have finished processing.\n     * @param  {String} endResult - The processed template, just before it is returned from the tag\n     * @return {String}           - The final results of processing each transformer\n     */\n\n  }, {\n    key: 'transformEndResult',\n    value: function transformEndResult(endResult) {\n      var cb = function cb(res, transform) {\n        return transform.onEndResult ? transform.onEndResult(res) : res;\n      };\n\n      return this.transformers.reduce(cb, endResult);\n    }\n  }]);\n\n  return TemplateTag;\n}();\n\n/* harmony default export */ var TemplateTag_TemplateTag = (TemplateTag);\n;// CONCATENATED MODULE: ./node_modules/common-tags/es/TemplateTag/index.js\n\n\n;// CONCATENATED MODULE: ./node_modules/common-tags/es/inlineArrayTransformer/inlineArrayTransformer.js\nvar defaults = {\n  separator: '',\n  conjunction: '',\n  serial: false\n};\n/**\n * Converts an array substitution to a string containing a list\n * @param  {String} [opts.separator = ''] - the character that separates each item\n * @param  {String} [opts.conjunction = '']  - replace the last separator with this\n * @param  {Boolean} [opts.serial = false] - include the separator before the conjunction? (Oxford comma use-case)\n *\n * @return {Object}                     - a TemplateTag transformer\n */\n\nvar inlineArrayTransformer = function inlineArrayTransformer() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaults;\n  return {\n    onSubstitution: function onSubstitution(substitution, resultSoFar) {\n      // only operate on arrays\n      if (Array.isArray(substitution)) {\n        var arrayLength = substitution.length;\n        var separator = opts.separator;\n        var conjunction = opts.conjunction;\n        var serial = opts.serial; // join each item in the array into a string where each item is separated by separator\n        // be sure to maintain indentation\n\n        var indent = resultSoFar.match(/(\\n?[^\\S\\n]+)$/);\n\n        if (indent) {\n          substitution = substitution.join(separator + indent[1]);\n        } else {\n          substitution = substitution.join(separator + ' ');\n        } // if conjunction is set, replace the last separator with conjunction, but only if there is more than one substitution\n\n\n        if (conjunction && arrayLength > 1) {\n          var separatorIndex = substitution.lastIndexOf(separator);\n          substitution = substitution.slice(0, separatorIndex) + (serial ? separator : '') + ' ' + conjunction + substitution.slice(separatorIndex + 1);\n        }\n      }\n\n      return substitution;\n    }\n  };\n};\n\n/* harmony default export */ var inlineArrayTransformer_inlineArrayTransformer = (inlineArrayTransformer);\n;// CONCATENATED MODULE: ./node_modules/common-tags/es/inlineArrayTransformer/index.js\n\n\n;// CONCATENATED MODULE: ./node_modules/common-tags/es/stripIndentTransformer/stripIndentTransformer.js\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n/**\n * strips indentation from a template literal\n * @param  {String} type = 'initial' - whether to remove all indentation or just leading indentation. can be 'all' or 'initial'\n * @return {Object}                  - a TemplateTag transformer\n */\n\n\nvar stripIndentTransformer = function stripIndentTransformer() {\n  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'initial';\n  return {\n    onEndResult: function onEndResult(endResult) {\n      if (type === 'initial') {\n        // remove the shortest leading indentation from each line\n        var match = endResult.match(/^[^\\S\\n]*(?=\\S)/gm);\n        var indent = match && Math.min.apply(Math, _toConsumableArray(match.map(function (el) {\n          return el.length;\n        })));\n\n        if (indent) {\n          var regexp = new RegExp('^.{' + indent + '}', 'gm');\n          return endResult.replace(regexp, '');\n        }\n\n        return endResult;\n      }\n\n      if (type === 'all') {\n        // remove all indentation from each line\n        return endResult.replace(/^[^\\S\\n]+/gm, '');\n      }\n\n      throw new Error('Unknown type: ' + type);\n    }\n  };\n};\n\n/* harmony default export */ var stripIndentTransformer_stripIndentTransformer = (stripIndentTransformer);\n;// CONCATENATED MODULE: ./node_modules/common-tags/es/trimResultTransformer/trimResultTransformer.js\n/**\n * TemplateTag transformer that trims whitespace on the end result of a tagged template\n * @param  {String} side = '' - The side of the string to trim. Can be 'start' or 'end' (alternatively 'left' or 'right')\n * @return {Object}           - a TemplateTag transformer\n */\nvar trimResultTransformer = function trimResultTransformer() {\n  var side = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return {\n    onEndResult: function onEndResult(endResult) {\n      if (side === '') {\n        return endResult.trim();\n      }\n\n      side = side.toLowerCase();\n\n      if (side === 'start' || side === 'left') {\n        return endResult.replace(/^\\s*/, '');\n      }\n\n      if (side === 'end' || side === 'right') {\n        return endResult.replace(/\\s*$/, '');\n      }\n\n      throw new Error('Side not supported: ' + side);\n    }\n  };\n};\n\n/* harmony default export */ var trimResultTransformer_trimResultTransformer = (trimResultTransformer);\n;// CONCATENATED MODULE: ./node_modules/common-tags/es/commaLists/commaLists.js\n\n\n\n\nvar commaLists = new TemplateTag_TemplateTag(inlineArrayTransformer_inlineArrayTransformer({\n  separator: ','\n}), stripIndentTransformer_stripIndentTransformer, trimResultTransformer_trimResultTransformer);\n/* harmony default export */ var commaLists_commaLists = ((/* unused pure expression or super */ null && (commaLists)));\n;// CONCATENATED MODULE: ./node_modules/common-tags/es/commaLists/index.js\n\n\n;// CONCATENATED MODULE: ./node_modules/common-tags/es/commaListsAnd/commaListsAnd.js\n\n\n\n\nvar commaListsAnd = new TemplateTag_TemplateTag(inlineArrayTransformer_inlineArrayTransformer({\n  separator: ',',\n  conjunction: 'and'\n}), stripIndentTransformer_stripIndentTransformer, trimResultTransformer_trimResultTransformer);\n/* harmony default export */ var commaListsAnd_commaListsAnd = ((/* unused pure expression or super */ null && (commaListsAnd)));\n;// CONCATENATED MODULE: ./node_modules/common-tags/es/commaListsAnd/index.js\n\n\n;// CONCATENATED MODULE: ./node_modules/common-tags/es/commaListsOr/commaListsOr.js\n\n\n\n\nvar commaListsOr = new TemplateTag_TemplateTag(inlineArrayTransformer_inlineArrayTransformer({\n  separator: ',',\n  conjunction: 'or'\n}), stripIndentTransformer_stripIndentTransformer, trimResultTransformer_trimResultTransformer);\n/* harmony default export */ var commaListsOr_commaListsOr = ((/* unused pure expression or super */ null && (commaListsOr)));\n;// CONCATENATED MODULE: ./node_modules/common-tags/es/commaListsOr/index.js\n\n\n;// CONCATENATED MODULE: ./node_modules/common-tags/es/splitStringTransformer/splitStringTransformer.js\nvar splitStringTransformer = function splitStringTransformer(splitBy) {\n  return {\n    onSubstitution: function onSubstitution(substitution, resultSoFar) {\n      if (splitBy != null && typeof splitBy === 'string') {\n        if (typeof substitution === 'string' && substitution.includes(splitBy)) {\n          substitution = substitution.split(splitBy);\n        }\n      } else {\n        throw new Error('You need to specify a string character to split by.');\n      }\n\n      return substitution;\n    }\n  };\n};\n\n/* harmony default export */ var splitStringTransformer_splitStringTransformer = (splitStringTransformer);\n;// CONCATENATED MODULE: ./node_modules/common-tags/es/removeNonPrintingValuesTransformer/removeNonPrintingValuesTransformer.js\nvar isValidValue = function isValidValue(x) {\n  return x != null && !Number.isNaN(x) && typeof x !== 'boolean';\n};\n\nvar removeNonPrintingValuesTransformer = function removeNonPrintingValuesTransformer() {\n  return {\n    onSubstitution: function onSubstitution(substitution) {\n      if (Array.isArray(substitution)) {\n        return substitution.filter(isValidValue);\n      }\n\n      if (isValidValue(substitution)) {\n        return substitution;\n      }\n\n      return '';\n    }\n  };\n};\n\n/* harmony default export */ var removeNonPrintingValuesTransformer_removeNonPrintingValuesTransformer = (removeNonPrintingValuesTransformer);\n;// CONCATENATED MODULE: ./node_modules/common-tags/es/html/html.js\n\n\n\n\n\n\nvar html = new TemplateTag_TemplateTag(splitStringTransformer_splitStringTransformer('\\n'), removeNonPrintingValuesTransformer_removeNonPrintingValuesTransformer, inlineArrayTransformer_inlineArrayTransformer, stripIndentTransformer_stripIndentTransformer, trimResultTransformer_trimResultTransformer);\n/* harmony default export */ var html_html = ((/* unused pure expression or super */ null && (html)));\n;// CONCATENATED MODULE: ./node_modules/common-tags/es/html/index.js\n\n\n;// CONCATENATED MODULE: ./node_modules/common-tags/es/codeBlock/index.js\n\n\n;// CONCATENATED MODULE: ./node_modules/common-tags/es/source/index.js\n\n\n;// CONCATENATED MODULE: ./node_modules/common-tags/es/replaceSubstitutionTransformer/replaceSubstitutionTransformer.js\nvar replaceSubstitutionTransformer = function replaceSubstitutionTransformer(replaceWhat, replaceWith) {\n  return {\n    onSubstitution: function onSubstitution(substitution, resultSoFar) {\n      if (replaceWhat == null || replaceWith == null) {\n        throw new Error('replaceSubstitutionTransformer requires at least 2 arguments.');\n      } // Do not touch if null or undefined\n\n\n      if (substitution == null) {\n        return substitution;\n      } else {\n        return substitution.toString().replace(replaceWhat, replaceWith);\n      }\n    }\n  };\n};\n\n/* harmony default export */ var replaceSubstitutionTransformer_replaceSubstitutionTransformer = (replaceSubstitutionTransformer);\n;// CONCATENATED MODULE: ./node_modules/common-tags/es/safeHtml/safeHtml.js\n\n\n\n\n\n\nvar safeHtml = new TemplateTag_TemplateTag(splitStringTransformer_splitStringTransformer('\\n'), inlineArrayTransformer_inlineArrayTransformer, stripIndentTransformer_stripIndentTransformer, trimResultTransformer_trimResultTransformer, replaceSubstitutionTransformer_replaceSubstitutionTransformer(/&/g, '&amp;'), replaceSubstitutionTransformer_replaceSubstitutionTransformer(/</g, '&lt;'), replaceSubstitutionTransformer_replaceSubstitutionTransformer(/>/g, '&gt;'), replaceSubstitutionTransformer_replaceSubstitutionTransformer(/\"/g, '&quot;'), replaceSubstitutionTransformer_replaceSubstitutionTransformer(/'/g, '&#x27;'), replaceSubstitutionTransformer_replaceSubstitutionTransformer(/`/g, '&#x60;'));\n/* harmony default export */ var safeHtml_safeHtml = ((/* unused pure expression or super */ null && (safeHtml)));\n;// CONCATENATED MODULE: ./node_modules/common-tags/es/safeHtml/index.js\n\n\n;// CONCATENATED MODULE: ./node_modules/common-tags/es/replaceResultTransformer/replaceResultTransformer.js\n/**\n * Replaces tabs, newlines and spaces with the chosen value when they occur in sequences\n * @param  {(String|RegExp)} replaceWhat - the value or pattern that should be replaced\n * @param  {*}               replaceWith - the replacement value\n * @return {Object}                      - a TemplateTag transformer\n */\nvar replaceResultTransformer = function replaceResultTransformer(replaceWhat, replaceWith) {\n  return {\n    onEndResult: function onEndResult(endResult) {\n      if (replaceWhat == null || replaceWith == null) {\n        throw new Error('replaceResultTransformer requires at least 2 arguments.');\n      }\n\n      return endResult.replace(replaceWhat, replaceWith);\n    }\n  };\n};\n\n/* harmony default export */ var replaceResultTransformer_replaceResultTransformer = (replaceResultTransformer);\n;// CONCATENATED MODULE: ./node_modules/common-tags/es/oneLine/oneLine.js\n\n\n\nvar oneLine = new TemplateTag_TemplateTag(replaceResultTransformer_replaceResultTransformer(/(?:\\n(?:\\s*))+/g, ' '), trimResultTransformer_trimResultTransformer);\n/* harmony default export */ var oneLine_oneLine = ((/* unused pure expression or super */ null && (oneLine)));\n;// CONCATENATED MODULE: ./node_modules/common-tags/es/oneLine/index.js\n\n\n;// CONCATENATED MODULE: ./node_modules/common-tags/es/oneLineTrim/oneLineTrim.js\n\n\n\nvar oneLineTrim = new TemplateTag_TemplateTag(replaceResultTransformer_replaceResultTransformer(/(?:\\n\\s*)/g, ''), trimResultTransformer_trimResultTransformer);\n/* harmony default export */ var oneLineTrim_oneLineTrim = ((/* unused pure expression or super */ null && (oneLineTrim)));\n;// CONCATENATED MODULE: ./node_modules/common-tags/es/oneLineTrim/index.js\n\n\n;// CONCATENATED MODULE: ./node_modules/common-tags/es/oneLineCommaLists/oneLineCommaLists.js\n\n\n\n\nvar oneLineCommaLists = new TemplateTag_TemplateTag(inlineArrayTransformer_inlineArrayTransformer({\n  separator: ','\n}), replaceResultTransformer_replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer_trimResultTransformer);\n/* harmony default export */ var oneLineCommaLists_oneLineCommaLists = ((/* unused pure expression or super */ null && (oneLineCommaLists)));\n;// CONCATENATED MODULE: ./node_modules/common-tags/es/oneLineCommaLists/index.js\n\n\n;// CONCATENATED MODULE: ./node_modules/common-tags/es/oneLineCommaListsOr/oneLineCommaListsOr.js\n\n\n\n\nvar oneLineCommaListsOr = new TemplateTag_TemplateTag(inlineArrayTransformer_inlineArrayTransformer({\n  separator: ',',\n  conjunction: 'or'\n}), replaceResultTransformer_replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer_trimResultTransformer);\n/* harmony default export */ var oneLineCommaListsOr_oneLineCommaListsOr = ((/* unused pure expression or super */ null && (oneLineCommaListsOr)));\n;// CONCATENATED MODULE: ./node_modules/common-tags/es/oneLineCommaListsOr/index.js\n\n\n;// CONCATENATED MODULE: ./node_modules/common-tags/es/oneLineCommaListsAnd/oneLineCommaListsAnd.js\n\n\n\n\nvar oneLineCommaListsAnd = new TemplateTag_TemplateTag(inlineArrayTransformer_inlineArrayTransformer({\n  separator: ',',\n  conjunction: 'and'\n}), replaceResultTransformer_replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer_trimResultTransformer);\n/* harmony default export */ var oneLineCommaListsAnd_oneLineCommaListsAnd = ((/* unused pure expression or super */ null && (oneLineCommaListsAnd)));\n;// CONCATENATED MODULE: ./node_modules/common-tags/es/oneLineCommaListsAnd/index.js\n\n\n;// CONCATENATED MODULE: ./node_modules/common-tags/es/inlineLists/inlineLists.js\n\n\n\n\nvar inlineLists = new TemplateTag_TemplateTag(inlineArrayTransformer_inlineArrayTransformer, stripIndentTransformer_stripIndentTransformer, trimResultTransformer_trimResultTransformer);\n/* harmony default export */ var inlineLists_inlineLists = ((/* unused pure expression or super */ null && (inlineLists)));\n;// CONCATENATED MODULE: ./node_modules/common-tags/es/inlineLists/index.js\n\n\n;// CONCATENATED MODULE: ./node_modules/common-tags/es/oneLineInlineLists/oneLineInlineLists.js\n\n\n\n\nvar oneLineInlineLists = new TemplateTag_TemplateTag(inlineArrayTransformer_inlineArrayTransformer, replaceResultTransformer_replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer_trimResultTransformer);\n/* harmony default export */ var oneLineInlineLists_oneLineInlineLists = ((/* unused pure expression or super */ null && (oneLineInlineLists)));\n;// CONCATENATED MODULE: ./node_modules/common-tags/es/oneLineInlineLists/index.js\n\n\n;// CONCATENATED MODULE: ./node_modules/common-tags/es/stripIndent/stripIndent.js\n\n\n\nvar stripIndent = new TemplateTag_TemplateTag(stripIndentTransformer_stripIndentTransformer, trimResultTransformer_trimResultTransformer);\n/* harmony default export */ var stripIndent_stripIndent = ((/* unused pure expression or super */ null && (stripIndent)));\n;// CONCATENATED MODULE: ./node_modules/common-tags/es/stripIndent/index.js\n\n\n;// CONCATENATED MODULE: ./node_modules/common-tags/es/stripIndents/stripIndents.js\n\n\n\nvar stripIndents = new TemplateTag_TemplateTag(stripIndentTransformer_stripIndentTransformer('all'), trimResultTransformer_trimResultTransformer);\n/* harmony default export */ var stripIndents_stripIndents = ((/* unused pure expression or super */ null && (stripIndents)));\n;// CONCATENATED MODULE: ./node_modules/common-tags/es/stripIndents/index.js\n\n\n;// CONCATENATED MODULE: ./node_modules/common-tags/es/index.js\n// core\n\n // transformers\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n // tags\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDA0MS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBLG9CQUFvQixrQkFBa0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxXQUFXO0FBQ3pCLGNBQWMsNkJBQTZCO0FBQzNDO0FBQ0E7QUFDQTs7QUFFQSw0RUFBNEUsYUFBYTtBQUN6RjtBQUNBOztBQUVBOztBQUVBO0FBQ0Esb0dBQW9HLGVBQWU7QUFDbkg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsUUFBUTs7O0FBR1I7QUFDQTtBQUNBLE9BQU87OztBQUdQO0FBQ0E7QUFDQSxNQUFNOzs7QUFHTjtBQUNBO0FBQ0EsS0FBSyxHQUFHOztBQUVSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsaUNBQWlDO0FBQy9DLGNBQWMsaUNBQWlDO0FBQy9DLGNBQWMsZ0RBQWdEO0FBQzlEOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixpQkFBaUI7QUFDakMsZ0JBQWdCLGlCQUFpQjtBQUNqQyxnQkFBZ0IsaUJBQWlCO0FBQ2pDLGdCQUFnQixrQ0FBa0M7QUFDbEQ7QUFDQTtBQUNBLHNHQUFzRyxlQUFlO0FBQ3JIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixVQUFVO0FBQzFCLGdCQUFnQixVQUFVO0FBQzFCLGdCQUFnQixVQUFVO0FBQzFCLGdCQUFnQix3QkFBd0I7QUFDeEM7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFNBQVM7QUFDeEIsZ0JBQWdCLFlBQVk7QUFDNUI7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixRQUFRO0FBQ3hCLGdCQUFnQixRQUFRO0FBQ3hCLGdCQUFnQixxQkFBcUI7QUFDckM7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixRQUFRO0FBQ3hCLGdCQUFnQixrQkFBa0I7QUFDbEM7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUVELDREQUFlLFdBQVcsRTs7QUMxTFc7OztBQ0FyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksUUFBUTtBQUNwQixZQUFZLFFBQVE7QUFDcEIsWUFBWSxTQUFTO0FBQ3JCO0FBQ0EsWUFBWSw0QkFBNEI7QUFDeEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVOzs7QUFHVjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtGQUFlLHNCQUFzQixFOztBQzlDVzs7O0FDQWhEO0FBQ0E7QUFDQSw4Q0FBOEMsZ0JBQWdCO0FBQzlEO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksUUFBUTtBQUNwQixZQUFZLHlCQUF5QjtBQUNyQzs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBLHNDQUFzQyxlQUFlO0FBQ3JEO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrRkFBZSxzQkFBc0IsRTs7QUMvQ3JDO0FBQ0E7QUFDQSxZQUFZLFFBQVE7QUFDcEIsWUFBWSxrQkFBa0I7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGdGQUFlLHFCQUFxQixFOztBQzVCSztBQUNzQjtBQUNBO0FBQ0Y7QUFDN0QscUJBQXFCLHVCQUFXLENBQUMsNkNBQXNCO0FBQ3ZEO0FBQ0EsQ0FBQyxHQUFHLDZDQUFzQixFQUFFLDJDQUFxQjtBQUNqRCwwREFBZSwwREFBVSxJOztBQ1BXOzs7QUNBSztBQUNzQjtBQUNBO0FBQ0Y7QUFDN0Qsd0JBQXdCLHVCQUFXLENBQUMsNkNBQXNCO0FBQzFEO0FBQ0E7QUFDQSxDQUFDLEdBQUcsNkNBQXNCLEVBQUUsMkNBQXFCO0FBQ2pELGdFQUFlLDZEQUFhLEk7O0FDUlc7OztBQ0FFO0FBQ3NCO0FBQ0E7QUFDRjtBQUM3RCx1QkFBdUIsdUJBQVcsQ0FBQyw2Q0FBc0I7QUFDekQ7QUFDQTtBQUNBLENBQUMsR0FBRyw2Q0FBc0IsRUFBRSwyQ0FBcUI7QUFDakQsOERBQWUsNERBQVksSTs7QUNSVzs7O0FDQXRDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0ZBQWUsc0JBQXNCLEU7O0FDaEJyQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwwR0FBZSxrQ0FBa0MsRTs7QUNwQlI7QUFDc0I7QUFDQTtBQUNGO0FBQ0U7QUFDd0I7QUFDdkYsZUFBZSx1QkFBVyxDQUFDLDZDQUFzQixRQUFRLHFFQUFrQyxFQUFFLDZDQUFzQixFQUFFLDZDQUFzQixFQUFFLDJDQUFxQjtBQUNsSyw4Q0FBZSxvREFBSSxJOztBQ1BXOzs7QUNBQzs7O0FDQUE7OztBQ0EvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTs7O0FBR1I7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtHQUFlLDhCQUE4QixFOztBQ2pCSjtBQUNzQjtBQUNBO0FBQ0Y7QUFDRTtBQUNnQjtBQUMvRSxtQkFBbUIsdUJBQVcsQ0FBQyw2Q0FBc0IsUUFBUSw2Q0FBc0IsRUFBRSw2Q0FBc0IsRUFBRSwyQ0FBcUIsRUFBRSw2REFBOEIsYUFBYSxJQUFJLDZEQUE4QixZQUFZLElBQUksNkRBQThCLFlBQVksSUFBSSw2REFBOEIsY0FBYyxJQUFJLDZEQUE4QixjQUFjLElBQUksNkRBQThCLGNBQWM7QUFDM1osc0RBQWUsd0RBQVEsSTs7QUNQVzs7O0FDQWxDO0FBQ0E7QUFDQSxZQUFZLGlCQUFpQjtBQUM3QixZQUFZLGlCQUFpQjtBQUM3QixZQUFZLDZCQUE2QjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxzRkFBZSx3QkFBd0IsRTs7QUNsQkU7QUFDb0I7QUFDTTtBQUNuRSxrQkFBa0IsdUJBQVcsQ0FBQyxpREFBd0IsMEJBQTBCLDJDQUFxQjtBQUNyRyxvREFBZSx1REFBTyxJOztBQ0pXOzs7QUNBUTtBQUNvQjtBQUNNO0FBQ25FLHNCQUFzQix1QkFBVyxDQUFDLGlEQUF3QixvQkFBb0IsMkNBQXFCO0FBQ25HLDREQUFlLDJEQUFXLEk7O0FDSlc7OztBQ0FJO0FBQ3NCO0FBQ0Y7QUFDTTtBQUNuRSw0QkFBNEIsdUJBQVcsQ0FBQyw2Q0FBc0I7QUFDOUQ7QUFDQSxDQUFDLEdBQUcsaURBQXdCLG1CQUFtQiwyQ0FBcUI7QUFDcEUsd0VBQWUsaUVBQWlCLEk7O0FDUFc7OztBQ0FGO0FBQ3NCO0FBQ0Y7QUFDTTtBQUNuRSw4QkFBOEIsdUJBQVcsQ0FBQyw2Q0FBc0I7QUFDaEU7QUFDQTtBQUNBLENBQUMsR0FBRyxpREFBd0IsbUJBQW1CLDJDQUFxQjtBQUNwRSw0RUFBZSxtRUFBbUIsSTs7QUNSVzs7O0FDQUo7QUFDc0I7QUFDRjtBQUNNO0FBQ25FLCtCQUErQix1QkFBVyxDQUFDLDZDQUFzQjtBQUNqRTtBQUNBO0FBQ0EsQ0FBQyxHQUFHLGlEQUF3QixtQkFBbUIsMkNBQXFCO0FBQ3BFLDhFQUFlLG9FQUFvQixJOztBQ1JXOzs7QUNBTDtBQUNzQjtBQUNBO0FBQ0Y7QUFDN0Qsc0JBQXNCLHVCQUFXLENBQUMsNkNBQXNCLEVBQUUsNkNBQXNCLEVBQUUsMkNBQXFCO0FBQ3ZHLDREQUFlLDJEQUFXLEk7O0FDTFc7OztBQ0FJO0FBQ3NCO0FBQ0Y7QUFDTTtBQUNuRSw2QkFBNkIsdUJBQVcsQ0FBQyw2Q0FBc0IsRUFBRSxpREFBd0IsbUJBQW1CLDJDQUFxQjtBQUNqSSwwRUFBZSxrRUFBa0IsSTs7QUNMVzs7O0FDQUg7QUFDc0I7QUFDRjtBQUM3RCxzQkFBc0IsdUJBQVcsQ0FBQyw2Q0FBc0IsRUFBRSwyQ0FBcUI7QUFDL0UsNERBQWUsMkRBQVcsSTs7QUNKVzs7O0FDQUk7QUFDc0I7QUFDRjtBQUM3RCx1QkFBdUIsdUJBQVcsQ0FBQyw2Q0FBc0IsU0FBUywyQ0FBcUI7QUFDdkYsOERBQWUsNERBQVksSTs7QUNKVzs7O0FDQXRDO0FBQ3lDO0FBQ0YsQ0FBQzs7QUFFcUI7QUFDRjtBQUNJO0FBQ0Y7QUFDTTtBQUNGO0FBQ2M7QUFDRjtBQUNWO0FBQ0Y7QUFDRjtBQUNGO0FBQ0U7QUFDRjtBQUMwQjtBQUNGLENBQUM7O0FBRS9DO0FBQ0Y7QUFDUTtBQUNGO0FBQ0E7QUFDRjtBQUNkO0FBQ0Y7QUFDWTtBQUNGO0FBQ0o7QUFDRjtBQUNNO0FBQ0Y7QUFDQTtBQUNGO0FBQ1U7QUFDRjtBQUNjO0FBQ0Y7QUFDTTtBQUNGO0FBQ0k7QUFDRjtBQUNoQjtBQUNGO0FBQ2dCO0FBQ0Y7QUFDWjtBQUNGO0FBQ0kiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hc3NhcGlyLmdpdGh1Yi5pby8uL25vZGVfbW9kdWxlcy9jb21tb24tdGFncy9lcy9UZW1wbGF0ZVRhZy9UZW1wbGF0ZVRhZy5qcz9lNTc5Iiwid2VicGFjazovL2Fzc2FwaXIuZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzL2NvbW1vbi10YWdzL2VzL1RlbXBsYXRlVGFnL2luZGV4LmpzPzFlODEiLCJ3ZWJwYWNrOi8vYXNzYXBpci5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvY29tbW9uLXRhZ3MvZXMvaW5saW5lQXJyYXlUcmFuc2Zvcm1lci9pbmxpbmVBcnJheVRyYW5zZm9ybWVyLmpzPzIxYTgiLCJ3ZWJwYWNrOi8vYXNzYXBpci5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvY29tbW9uLXRhZ3MvZXMvaW5saW5lQXJyYXlUcmFuc2Zvcm1lci9pbmRleC5qcz8yNTFiIiwid2VicGFjazovL2Fzc2FwaXIuZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzL2NvbW1vbi10YWdzL2VzL3N0cmlwSW5kZW50VHJhbnNmb3JtZXIvc3RyaXBJbmRlbnRUcmFuc2Zvcm1lci5qcz8wYmM3Iiwid2VicGFjazovL2Fzc2FwaXIuZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzL2NvbW1vbi10YWdzL2VzL3RyaW1SZXN1bHRUcmFuc2Zvcm1lci90cmltUmVzdWx0VHJhbnNmb3JtZXIuanM/NmEzYiIsIndlYnBhY2s6Ly9hc3NhcGlyLmdpdGh1Yi5pby8uL25vZGVfbW9kdWxlcy9jb21tb24tdGFncy9lcy9jb21tYUxpc3RzL2NvbW1hTGlzdHMuanM/ZmI4MCIsIndlYnBhY2s6Ly9hc3NhcGlyLmdpdGh1Yi5pby8uL25vZGVfbW9kdWxlcy9jb21tb24tdGFncy9lcy9jb21tYUxpc3RzL2luZGV4LmpzPzM3MTIiLCJ3ZWJwYWNrOi8vYXNzYXBpci5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvY29tbW9uLXRhZ3MvZXMvY29tbWFMaXN0c0FuZC9jb21tYUxpc3RzQW5kLmpzPzJhM2EiLCJ3ZWJwYWNrOi8vYXNzYXBpci5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvY29tbW9uLXRhZ3MvZXMvY29tbWFMaXN0c0FuZC9pbmRleC5qcz80ZGI5Iiwid2VicGFjazovL2Fzc2FwaXIuZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzL2NvbW1vbi10YWdzL2VzL2NvbW1hTGlzdHNPci9jb21tYUxpc3RzT3IuanM/Njg3MyIsIndlYnBhY2s6Ly9hc3NhcGlyLmdpdGh1Yi5pby8uL25vZGVfbW9kdWxlcy9jb21tb24tdGFncy9lcy9jb21tYUxpc3RzT3IvaW5kZXguanM/ZjBmNyIsIndlYnBhY2s6Ly9hc3NhcGlyLmdpdGh1Yi5pby8uL25vZGVfbW9kdWxlcy9jb21tb24tdGFncy9lcy9zcGxpdFN0cmluZ1RyYW5zZm9ybWVyL3NwbGl0U3RyaW5nVHJhbnNmb3JtZXIuanM/MThmYiIsIndlYnBhY2s6Ly9hc3NhcGlyLmdpdGh1Yi5pby8uL25vZGVfbW9kdWxlcy9jb21tb24tdGFncy9lcy9yZW1vdmVOb25QcmludGluZ1ZhbHVlc1RyYW5zZm9ybWVyL3JlbW92ZU5vblByaW50aW5nVmFsdWVzVHJhbnNmb3JtZXIuanM/ZTQ0NiIsIndlYnBhY2s6Ly9hc3NhcGlyLmdpdGh1Yi5pby8uL25vZGVfbW9kdWxlcy9jb21tb24tdGFncy9lcy9odG1sL2h0bWwuanM/YzdjYyIsIndlYnBhY2s6Ly9hc3NhcGlyLmdpdGh1Yi5pby8uL25vZGVfbW9kdWxlcy9jb21tb24tdGFncy9lcy9odG1sL2luZGV4LmpzPzYxNDMiLCJ3ZWJwYWNrOi8vYXNzYXBpci5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvY29tbW9uLXRhZ3MvZXMvY29kZUJsb2NrL2luZGV4LmpzPzM0ZDEiLCJ3ZWJwYWNrOi8vYXNzYXBpci5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvY29tbW9uLXRhZ3MvZXMvc291cmNlL2luZGV4LmpzPzdjMDMiLCJ3ZWJwYWNrOi8vYXNzYXBpci5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvY29tbW9uLXRhZ3MvZXMvcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyL3JlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lci5qcz8zOTJmIiwid2VicGFjazovL2Fzc2FwaXIuZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzL2NvbW1vbi10YWdzL2VzL3NhZmVIdG1sL3NhZmVIdG1sLmpzPzNkNDUiLCJ3ZWJwYWNrOi8vYXNzYXBpci5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvY29tbW9uLXRhZ3MvZXMvc2FmZUh0bWwvaW5kZXguanM/OWEwNSIsIndlYnBhY2s6Ly9hc3NhcGlyLmdpdGh1Yi5pby8uL25vZGVfbW9kdWxlcy9jb21tb24tdGFncy9lcy9yZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIvcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyLmpzPzYyYzQiLCJ3ZWJwYWNrOi8vYXNzYXBpci5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvY29tbW9uLXRhZ3MvZXMvb25lTGluZS9vbmVMaW5lLmpzPzdmZWMiLCJ3ZWJwYWNrOi8vYXNzYXBpci5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvY29tbW9uLXRhZ3MvZXMvb25lTGluZS9pbmRleC5qcz82MGM3Iiwid2VicGFjazovL2Fzc2FwaXIuZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzL2NvbW1vbi10YWdzL2VzL29uZUxpbmVUcmltL29uZUxpbmVUcmltLmpzPzA2MmIiLCJ3ZWJwYWNrOi8vYXNzYXBpci5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvY29tbW9uLXRhZ3MvZXMvb25lTGluZVRyaW0vaW5kZXguanM/NjVlMiIsIndlYnBhY2s6Ly9hc3NhcGlyLmdpdGh1Yi5pby8uL25vZGVfbW9kdWxlcy9jb21tb24tdGFncy9lcy9vbmVMaW5lQ29tbWFMaXN0cy9vbmVMaW5lQ29tbWFMaXN0cy5qcz9hNjQwIiwid2VicGFjazovL2Fzc2FwaXIuZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzL2NvbW1vbi10YWdzL2VzL29uZUxpbmVDb21tYUxpc3RzL2luZGV4LmpzP2ViYTciLCJ3ZWJwYWNrOi8vYXNzYXBpci5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvY29tbW9uLXRhZ3MvZXMvb25lTGluZUNvbW1hTGlzdHNPci9vbmVMaW5lQ29tbWFMaXN0c09yLmpzPzNiMDUiLCJ3ZWJwYWNrOi8vYXNzYXBpci5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvY29tbW9uLXRhZ3MvZXMvb25lTGluZUNvbW1hTGlzdHNPci9pbmRleC5qcz9lM2NkIiwid2VicGFjazovL2Fzc2FwaXIuZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzL2NvbW1vbi10YWdzL2VzL29uZUxpbmVDb21tYUxpc3RzQW5kL29uZUxpbmVDb21tYUxpc3RzQW5kLmpzPzE2MWYiLCJ3ZWJwYWNrOi8vYXNzYXBpci5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvY29tbW9uLXRhZ3MvZXMvb25lTGluZUNvbW1hTGlzdHNBbmQvaW5kZXguanM/M2QxZiIsIndlYnBhY2s6Ly9hc3NhcGlyLmdpdGh1Yi5pby8uL25vZGVfbW9kdWxlcy9jb21tb24tdGFncy9lcy9pbmxpbmVMaXN0cy9pbmxpbmVMaXN0cy5qcz9kODM3Iiwid2VicGFjazovL2Fzc2FwaXIuZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzL2NvbW1vbi10YWdzL2VzL2lubGluZUxpc3RzL2luZGV4LmpzP2E2N2QiLCJ3ZWJwYWNrOi8vYXNzYXBpci5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvY29tbW9uLXRhZ3MvZXMvb25lTGluZUlubGluZUxpc3RzL29uZUxpbmVJbmxpbmVMaXN0cy5qcz9lNTY0Iiwid2VicGFjazovL2Fzc2FwaXIuZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzL2NvbW1vbi10YWdzL2VzL29uZUxpbmVJbmxpbmVMaXN0cy9pbmRleC5qcz9jOTNlIiwid2VicGFjazovL2Fzc2FwaXIuZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzL2NvbW1vbi10YWdzL2VzL3N0cmlwSW5kZW50L3N0cmlwSW5kZW50LmpzPzVkZDUiLCJ3ZWJwYWNrOi8vYXNzYXBpci5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvY29tbW9uLXRhZ3MvZXMvc3RyaXBJbmRlbnQvaW5kZXguanM/MzYwNSIsIndlYnBhY2s6Ly9hc3NhcGlyLmdpdGh1Yi5pby8uL25vZGVfbW9kdWxlcy9jb21tb24tdGFncy9lcy9zdHJpcEluZGVudHMvc3RyaXBJbmRlbnRzLmpzP2Q2ZDQiLCJ3ZWJwYWNrOi8vYXNzYXBpci5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvY29tbW9uLXRhZ3MvZXMvc3RyaXBJbmRlbnRzL2luZGV4LmpzP2QzNzgiLCJ3ZWJwYWNrOi8vYXNzYXBpci5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvY29tbW9uLXRhZ3MvZXMvaW5kZXguanM/OTFkNiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9O1xufSgpO1xuXG52YXIgX3RlbXBsYXRlT2JqZWN0ID0gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbChbJycsICcnXSwgWycnLCAnJ10pO1xuXG5mdW5jdGlvbiBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKHN0cmluZ3MsIHJhdykge1xuICByZXR1cm4gT2JqZWN0LmZyZWV6ZShPYmplY3QuZGVmaW5lUHJvcGVydGllcyhzdHJpbmdzLCB7XG4gICAgcmF3OiB7XG4gICAgICB2YWx1ZTogT2JqZWN0LmZyZWV6ZShyYXcpXG4gICAgfVxuICB9KSk7XG59XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG4vKipcbiAqIEBjbGFzcyBUZW1wbGF0ZVRhZ1xuICogQGNsYXNzZGVzYyBDb25zdW1lcyBhIHBpcGVsaW5lIG9mIGNvbXBvc2FibGUgdHJhbnNmb3JtZXIgcGx1Z2lucyBhbmQgcHJvZHVjZXMgYSB0ZW1wbGF0ZSB0YWcuXG4gKi9cblxuXG52YXIgVGVtcGxhdGVUYWcgPSBmdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBjb25zdHJ1Y3RzIGEgdGVtcGxhdGUgdGFnXG4gICAqIEBjb25zdHJ1Y3RzIFRlbXBsYXRlVGFnXG4gICAqIEBwYXJhbSAgey4uLk9iamVjdH0gWy4uLnRyYW5zZm9ybWVyc10gLSBhbiBhcnJheSBvciBhcmd1bWVudHMgbGlzdCBvZiB0cmFuc2Zvcm1lcnNcbiAgICogQHJldHVybiB7RnVuY3Rpb259ICAgICAgICAgICAgICAgICAgICAtIGEgdGVtcGxhdGUgdGFnXG4gICAqL1xuICBmdW5jdGlvbiBUZW1wbGF0ZVRhZygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHRyYW5zZm9ybWVycyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgdHJhbnNmb3JtZXJzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUZW1wbGF0ZVRhZyk7XG5cbiAgICB0aGlzLnRhZyA9IGZ1bmN0aW9uIChzdHJpbmdzKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGV4cHJlc3Npb25zID0gQXJyYXkoX2xlbjIgPiAxID8gX2xlbjIgLSAxIDogMCksIF9rZXkyID0gMTsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBleHByZXNzaW9uc1tfa2V5MiAtIDFdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBzdHJpbmdzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIGlmIHRoZSBmaXJzdCBhcmd1bWVudCBwYXNzZWQgaXMgYSBmdW5jdGlvbiwgYXNzdW1lIGl0IGlzIGEgdGVtcGxhdGUgdGFnIGFuZCByZXR1cm5cbiAgICAgICAgLy8gYW4gaW50ZXJtZWRpYXJ5IHRhZyB0aGF0IHByb2Nlc3NlcyB0aGUgdGVtcGxhdGUgdXNpbmcgdGhlIGFmb3JlbWVudGlvbmVkIHRhZywgcGFzc2luZyB0aGVcbiAgICAgICAgLy8gcmVzdWx0IHRvIG91ciB0YWdcbiAgICAgICAgcmV0dXJuIF90aGlzLmludGVyaW1UYWcuYmluZChfdGhpcywgc3RyaW5ncyk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2Ygc3RyaW5ncyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gaWYgdGhlIGZpcnN0IGFyZ3VtZW50IHBhc3NlZCBpcyBhIHN0cmluZywganVzdCB0cmFuc2Zvcm0gaXRcbiAgICAgICAgcmV0dXJuIF90aGlzLnRyYW5zZm9ybUVuZFJlc3VsdChzdHJpbmdzKTtcbiAgICAgIH0gLy8gZWxzZSwgcmV0dXJuIGEgdHJhbnNmb3JtZWQgZW5kIHJlc3VsdCBvZiBwcm9jZXNzaW5nIHRoZSB0ZW1wbGF0ZSB3aXRoIG91ciB0YWdcblxuXG4gICAgICBzdHJpbmdzID0gc3RyaW5ncy5tYXAoX3RoaXMudHJhbnNmb3JtU3RyaW5nLmJpbmQoX3RoaXMpKTtcbiAgICAgIHJldHVybiBfdGhpcy50cmFuc2Zvcm1FbmRSZXN1bHQoc3RyaW5ncy5yZWR1Y2UoX3RoaXMucHJvY2Vzc1N1YnN0aXR1dGlvbnMuYmluZChfdGhpcywgZXhwcmVzc2lvbnMpKSk7XG4gICAgfTsgLy8gaWYgZmlyc3QgYXJndW1lbnQgaXMgYW4gYXJyYXksIGV4dHJ1ZGUgaXQgYXMgYSBsaXN0IG9mIHRyYW5zZm9ybWVyc1xuXG5cbiAgICBpZiAodHJhbnNmb3JtZXJzLmxlbmd0aCA+IDAgJiYgQXJyYXkuaXNBcnJheSh0cmFuc2Zvcm1lcnNbMF0pKSB7XG4gICAgICB0cmFuc2Zvcm1lcnMgPSB0cmFuc2Zvcm1lcnNbMF07XG4gICAgfSAvLyBpZiBhbnkgdHJhbnNmb3JtZXJzIGFyZSBmdW5jdGlvbnMsIHRoaXMgbWVhbnMgdGhleSBhcmUgbm90IGluaXRpYXRlZCAtIGF1dG9tYXRpY2FsbHkgaW5pdGlhdGUgdGhlbVxuXG5cbiAgICB0aGlzLnRyYW5zZm9ybWVycyA9IHRyYW5zZm9ybWVycy5tYXAoZnVuY3Rpb24gKHRyYW5zZm9ybWVyKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHRyYW5zZm9ybWVyID09PSAnZnVuY3Rpb24nID8gdHJhbnNmb3JtZXIoKSA6IHRyYW5zZm9ybWVyO1xuICAgIH0pOyAvLyByZXR1cm4gYW4gRVMyMDE1IHRlbXBsYXRlIHRhZ1xuXG4gICAgcmV0dXJuIHRoaXMudGFnO1xuICB9XG4gIC8qKlxuICAgKiBBcHBsaWVzIGFsbCB0cmFuc2Zvcm1lcnMgdG8gYSB0ZW1wbGF0ZSBsaXRlcmFsIHRhZ2dlZCB3aXRoIHRoaXMgbWV0aG9kLlxuICAgKiBJZiBhIGZ1bmN0aW9uIGlzIHBhc3NlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnQsIGFzc3VtZXMgdGhlIGZ1bmN0aW9uIGlzIGEgdGVtcGxhdGUgdGFnXG4gICAqIGFuZCBhcHBsaWVzIGl0IHRvIHRoZSB0ZW1wbGF0ZSwgcmV0dXJuaW5nIGEgdGVtcGxhdGUgdGFnLlxuICAgKiBAcGFyYW0gIHsoRnVuY3Rpb258U3RyaW5nfEFycmF5PFN0cmluZz4pfSBzdHJpbmdzICAgICAgICAtIEVpdGhlciBhIHRlbXBsYXRlIHRhZyBvciBhbiBhcnJheSBjb250YWluaW5nIHRlbXBsYXRlIHN0cmluZ3Mgc2VwYXJhdGVkIGJ5IGlkZW50aWZpZXJcbiAgICogQHBhcmFtICB7Li4uKn0gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uZXhwcmVzc2lvbnMgLSBPcHRpb25hbCBsaXN0IG9mIHN1YnN0aXR1dGlvbiB2YWx1ZXMuXG4gICAqIEByZXR1cm4geyhTdHJpbmd8RnVuY3Rpb24pfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gRWl0aGVyIGFuIGludGVybWVkaWFyeSB0YWcgZnVuY3Rpb24gb3IgdGhlIHJlc3VsdHMgb2YgcHJvY2Vzc2luZyB0aGUgdGVtcGxhdGUuXG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKFRlbXBsYXRlVGFnLCBbe1xuICAgIGtleTogJ2ludGVyaW1UYWcnLFxuXG4gICAgLyoqXG4gICAgICogQW4gaW50ZXJtZWRpYXJ5IHRlbXBsYXRlIHRhZyB0aGF0IHJlY2VpdmVzIGEgdGVtcGxhdGUgdGFnIGFuZCBwYXNzZXMgdGhlIHJlc3VsdCBvZiBjYWxsaW5nIHRoZSB0ZW1wbGF0ZSB3aXRoIHRoZSByZWNlaXZlZFxuICAgICAqIHRlbXBsYXRlIHRhZyB0byBvdXIgb3duIHRlbXBsYXRlIHRhZy5cbiAgICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gICAgICAgIG5leHRUYWcgICAgICAgICAgLSB0aGUgcmVjZWl2ZWQgdGVtcGxhdGUgdGFnXG4gICAgICogQHBhcmFtICB7QXJyYXk8U3RyaW5nPn0gICB0ZW1wbGF0ZSAgICAgICAgIC0gdGhlIHRlbXBsYXRlIHRvIHByb2Nlc3NcbiAgICAgKiBAcGFyYW0gIHsuLi4qfSAgICAgICAgICAgIC4uLnN1YnN0aXR1dGlvbnMgLSBgc3Vic3RpdHV0aW9uc2AgaXMgYW4gYXJyYXkgb2YgYWxsIHN1YnN0aXR1dGlvbnMgaW4gdGhlIHRlbXBsYXRlXG4gICAgICogQHJldHVybiB7Kn0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gdGhlIGZpbmFsIHByb2Nlc3NlZCB2YWx1ZVxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBpbnRlcmltVGFnKHByZXZpb3VzVGFnLCB0ZW1wbGF0ZSkge1xuICAgICAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCBzdWJzdGl0dXRpb25zID0gQXJyYXkoX2xlbjMgPiAyID8gX2xlbjMgLSAyIDogMCksIF9rZXkzID0gMjsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgICAgICBzdWJzdGl0dXRpb25zW19rZXkzIC0gMl0gPSBhcmd1bWVudHNbX2tleTNdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy50YWcoX3RlbXBsYXRlT2JqZWN0LCBwcmV2aW91c1RhZy5hcHBseSh1bmRlZmluZWQsIFt0ZW1wbGF0ZV0uY29uY2F0KHN1YnN0aXR1dGlvbnMpKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGJ1bGsgcHJvY2Vzc2luZyBvbiB0aGUgdGFnZ2VkIHRlbXBsYXRlLCB0cmFuc2Zvcm1pbmcgZWFjaCBzdWJzdGl0dXRpb24gYW5kIHRoZW5cbiAgICAgKiBjb25jYXRlbmF0aW5nIHRoZSByZXN1bHRpbmcgdmFsdWVzIGludG8gYSBzdHJpbmcuXG4gICAgICogQHBhcmFtICB7QXJyYXk8Kj59IHN1YnN0aXR1dGlvbnMgLSBhbiBhcnJheSBvZiBhbGwgcmVtYWluaW5nIHN1YnN0aXR1dGlvbnMgcHJlc2VudCBpbiB0aGlzIHRlbXBsYXRlXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSAgIHJlc3VsdFNvRmFyICAgLSB0aGlzIGl0ZXJhdGlvbidzIHJlc3VsdCBzdHJpbmcgc28gZmFyXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSAgIHJlbWFpbmluZ1BhcnQgLSB0aGUgdGVtcGxhdGUgY2h1bmsgYWZ0ZXIgdGhlIGN1cnJlbnQgc3Vic3RpdHV0aW9uXG4gICAgICogQHJldHVybiB7U3RyaW5nfSAgICAgICAgICAgICAgICAgLSB0aGUgcmVzdWx0IG9mIGpvaW5pbmcgdGhpcyBpdGVyYXRpb24ncyBwcm9jZXNzZWQgc3Vic3RpdHV0aW9uIHdpdGggdGhlIHJlc3VsdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdwcm9jZXNzU3Vic3RpdHV0aW9ucycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHByb2Nlc3NTdWJzdGl0dXRpb25zKHN1YnN0aXR1dGlvbnMsIHJlc3VsdFNvRmFyLCByZW1haW5pbmdQYXJ0KSB7XG4gICAgICB2YXIgc3Vic3RpdHV0aW9uID0gdGhpcy50cmFuc2Zvcm1TdWJzdGl0dXRpb24oc3Vic3RpdHV0aW9ucy5zaGlmdCgpLCByZXN1bHRTb0Zhcik7XG4gICAgICByZXR1cm4gJycuY29uY2F0KHJlc3VsdFNvRmFyLCBzdWJzdGl0dXRpb24sIHJlbWFpbmluZ1BhcnQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlIHRocm91Z2ggZWFjaCB0cmFuc2Zvcm1lciwgYXBwbHlpbmcgdGhlIHRyYW5zZm9ybWVyJ3MgYG9uU3RyaW5nYCBtZXRob2QgdG8gdGhlIHRlbXBsYXRlXG4gICAgICogc3RyaW5ncyBiZWZvcmUgYWxsIHN1YnN0aXR1dGlvbnMgYXJlIHByb2Nlc3NlZC5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gIHN0ciAtIFRoZSBpbnB1dCBzdHJpbmdcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9ICAgICAtIFRoZSBmaW5hbCByZXN1bHRzIG9mIHByb2Nlc3NpbmcgZWFjaCB0cmFuc2Zvcm1lclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd0cmFuc2Zvcm1TdHJpbmcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0cmFuc2Zvcm1TdHJpbmcoc3RyKSB7XG4gICAgICB2YXIgY2IgPSBmdW5jdGlvbiBjYihyZXMsIHRyYW5zZm9ybSkge1xuICAgICAgICByZXR1cm4gdHJhbnNmb3JtLm9uU3RyaW5nID8gdHJhbnNmb3JtLm9uU3RyaW5nKHJlcykgOiByZXM7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm1lcnMucmVkdWNlKGNiLCBzdHIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaGVuIGEgc3Vic3RpdHV0aW9uIGlzIGVuY291bnRlcmVkLCBpdGVyYXRlcyB0aHJvdWdoIGVhY2ggdHJhbnNmb3JtZXIgYW5kIGFwcGxpZXMgdGhlIHRyYW5zZm9ybWVyJ3NcbiAgICAgKiBgb25TdWJzdGl0dXRpb25gIG1ldGhvZCB0byB0aGUgc3Vic3RpdHV0aW9uLlxuICAgICAqIEBwYXJhbSAgeyp9ICAgICAgc3Vic3RpdHV0aW9uIC0gVGhlIGN1cnJlbnQgc3Vic3RpdHV0aW9uXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSByZXN1bHRTb0ZhciAgLSBUaGUgcmVzdWx0IHVwIHRvIGFuZCBleGNsdWRpbmcgdGhpcyBzdWJzdGl0dXRpb24uXG4gICAgICogQHJldHVybiB7Kn0gICAgICAgICAgICAgICAgICAgLSBUaGUgZmluYWwgcmVzdWx0IG9mIGFwcGx5aW5nIGFsbCBzdWJzdGl0dXRpb24gdHJhbnNmb3JtYXRpb25zLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd0cmFuc2Zvcm1TdWJzdGl0dXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0cmFuc2Zvcm1TdWJzdGl0dXRpb24oc3Vic3RpdHV0aW9uLCByZXN1bHRTb0Zhcikge1xuICAgICAgdmFyIGNiID0gZnVuY3Rpb24gY2IocmVzLCB0cmFuc2Zvcm0pIHtcbiAgICAgICAgcmV0dXJuIHRyYW5zZm9ybS5vblN1YnN0aXR1dGlvbiA/IHRyYW5zZm9ybS5vblN1YnN0aXR1dGlvbihyZXMsIHJlc3VsdFNvRmFyKSA6IHJlcztcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybWVycy5yZWR1Y2UoY2IsIHN1YnN0aXR1dGlvbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIHRocm91Z2ggZWFjaCB0cmFuc2Zvcm1lciwgYXBwbHlpbmcgdGhlIHRyYW5zZm9ybWVyJ3MgYG9uRW5kUmVzdWx0YCBtZXRob2QgdG8gdGhlXG4gICAgICogdGVtcGxhdGUgbGl0ZXJhbCBhZnRlciBhbGwgc3Vic3RpdHV0aW9ucyBoYXZlIGZpbmlzaGVkIHByb2Nlc3NpbmcuXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSBlbmRSZXN1bHQgLSBUaGUgcHJvY2Vzc2VkIHRlbXBsYXRlLCBqdXN0IGJlZm9yZSBpdCBpcyByZXR1cm5lZCBmcm9tIHRoZSB0YWdcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9ICAgICAgICAgICAtIFRoZSBmaW5hbCByZXN1bHRzIG9mIHByb2Nlc3NpbmcgZWFjaCB0cmFuc2Zvcm1lclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd0cmFuc2Zvcm1FbmRSZXN1bHQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0cmFuc2Zvcm1FbmRSZXN1bHQoZW5kUmVzdWx0KSB7XG4gICAgICB2YXIgY2IgPSBmdW5jdGlvbiBjYihyZXMsIHRyYW5zZm9ybSkge1xuICAgICAgICByZXR1cm4gdHJhbnNmb3JtLm9uRW5kUmVzdWx0ID8gdHJhbnNmb3JtLm9uRW5kUmVzdWx0KHJlcykgOiByZXM7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm1lcnMucmVkdWNlKGNiLCBlbmRSZXN1bHQpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBUZW1wbGF0ZVRhZztcbn0oKTtcblxuZXhwb3J0IGRlZmF1bHQgVGVtcGxhdGVUYWc7IiwiaW1wb3J0IF9kZWZhdWx0IGZyb20gJy4vVGVtcGxhdGVUYWcnO1xuZXhwb3J0IHsgX2RlZmF1bHQgYXMgZGVmYXVsdCB9OyIsInZhciBkZWZhdWx0cyA9IHtcbiAgc2VwYXJhdG9yOiAnJyxcbiAgY29uanVuY3Rpb246ICcnLFxuICBzZXJpYWw6IGZhbHNlXG59O1xuLyoqXG4gKiBDb252ZXJ0cyBhbiBhcnJheSBzdWJzdGl0dXRpb24gdG8gYSBzdHJpbmcgY29udGFpbmluZyBhIGxpc3RcbiAqIEBwYXJhbSAge1N0cmluZ30gW29wdHMuc2VwYXJhdG9yID0gJyddIC0gdGhlIGNoYXJhY3RlciB0aGF0IHNlcGFyYXRlcyBlYWNoIGl0ZW1cbiAqIEBwYXJhbSAge1N0cmluZ30gW29wdHMuY29uanVuY3Rpb24gPSAnJ10gIC0gcmVwbGFjZSB0aGUgbGFzdCBzZXBhcmF0b3Igd2l0aCB0aGlzXG4gKiBAcGFyYW0gIHtCb29sZWFufSBbb3B0cy5zZXJpYWwgPSBmYWxzZV0gLSBpbmNsdWRlIHRoZSBzZXBhcmF0b3IgYmVmb3JlIHRoZSBjb25qdW5jdGlvbj8gKE94Zm9yZCBjb21tYSB1c2UtY2FzZSlcbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgICAgICAgICAgICAgICAgLSBhIFRlbXBsYXRlVGFnIHRyYW5zZm9ybWVyXG4gKi9cblxudmFyIGlubGluZUFycmF5VHJhbnNmb3JtZXIgPSBmdW5jdGlvbiBpbmxpbmVBcnJheVRyYW5zZm9ybWVyKCkge1xuICB2YXIgb3B0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZGVmYXVsdHM7XG4gIHJldHVybiB7XG4gICAgb25TdWJzdGl0dXRpb246IGZ1bmN0aW9uIG9uU3Vic3RpdHV0aW9uKHN1YnN0aXR1dGlvbiwgcmVzdWx0U29GYXIpIHtcbiAgICAgIC8vIG9ubHkgb3BlcmF0ZSBvbiBhcnJheXNcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHN1YnN0aXR1dGlvbikpIHtcbiAgICAgICAgdmFyIGFycmF5TGVuZ3RoID0gc3Vic3RpdHV0aW9uLmxlbmd0aDtcbiAgICAgICAgdmFyIHNlcGFyYXRvciA9IG9wdHMuc2VwYXJhdG9yO1xuICAgICAgICB2YXIgY29uanVuY3Rpb24gPSBvcHRzLmNvbmp1bmN0aW9uO1xuICAgICAgICB2YXIgc2VyaWFsID0gb3B0cy5zZXJpYWw7IC8vIGpvaW4gZWFjaCBpdGVtIGluIHRoZSBhcnJheSBpbnRvIGEgc3RyaW5nIHdoZXJlIGVhY2ggaXRlbSBpcyBzZXBhcmF0ZWQgYnkgc2VwYXJhdG9yXG4gICAgICAgIC8vIGJlIHN1cmUgdG8gbWFpbnRhaW4gaW5kZW50YXRpb25cblxuICAgICAgICB2YXIgaW5kZW50ID0gcmVzdWx0U29GYXIubWF0Y2goLyhcXG4/W15cXFNcXG5dKykkLyk7XG5cbiAgICAgICAgaWYgKGluZGVudCkge1xuICAgICAgICAgIHN1YnN0aXR1dGlvbiA9IHN1YnN0aXR1dGlvbi5qb2luKHNlcGFyYXRvciArIGluZGVudFsxXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3Vic3RpdHV0aW9uID0gc3Vic3RpdHV0aW9uLmpvaW4oc2VwYXJhdG9yICsgJyAnKTtcbiAgICAgICAgfSAvLyBpZiBjb25qdW5jdGlvbiBpcyBzZXQsIHJlcGxhY2UgdGhlIGxhc3Qgc2VwYXJhdG9yIHdpdGggY29uanVuY3Rpb24sIGJ1dCBvbmx5IGlmIHRoZXJlIGlzIG1vcmUgdGhhbiBvbmUgc3Vic3RpdHV0aW9uXG5cblxuICAgICAgICBpZiAoY29uanVuY3Rpb24gJiYgYXJyYXlMZW5ndGggPiAxKSB7XG4gICAgICAgICAgdmFyIHNlcGFyYXRvckluZGV4ID0gc3Vic3RpdHV0aW9uLmxhc3RJbmRleE9mKHNlcGFyYXRvcik7XG4gICAgICAgICAgc3Vic3RpdHV0aW9uID0gc3Vic3RpdHV0aW9uLnNsaWNlKDAsIHNlcGFyYXRvckluZGV4KSArIChzZXJpYWwgPyBzZXBhcmF0b3IgOiAnJykgKyAnICcgKyBjb25qdW5jdGlvbiArIHN1YnN0aXR1dGlvbi5zbGljZShzZXBhcmF0b3JJbmRleCArIDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdWJzdGl0dXRpb247XG4gICAgfVxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgaW5saW5lQXJyYXlUcmFuc2Zvcm1lcjsiLCJpbXBvcnQgX2RlZmF1bHQgZnJvbSAnLi9pbmxpbmVBcnJheVRyYW5zZm9ybWVyJztcbmV4cG9ydCB7IF9kZWZhdWx0IGFzIGRlZmF1bHQgfTsiLCJmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcnIyW2ldID0gYXJyW2ldO1xuICAgIH1cblxuICAgIHJldHVybiBhcnIyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBBcnJheS5mcm9tKGFycik7XG4gIH1cbn1cbi8qKlxuICogc3RyaXBzIGluZGVudGF0aW9uIGZyb20gYSB0ZW1wbGF0ZSBsaXRlcmFsXG4gKiBAcGFyYW0gIHtTdHJpbmd9IHR5cGUgPSAnaW5pdGlhbCcgLSB3aGV0aGVyIHRvIHJlbW92ZSBhbGwgaW5kZW50YXRpb24gb3IganVzdCBsZWFkaW5nIGluZGVudGF0aW9uLiBjYW4gYmUgJ2FsbCcgb3IgJ2luaXRpYWwnXG4gKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgICAgICAgICAgICAgLSBhIFRlbXBsYXRlVGFnIHRyYW5zZm9ybWVyXG4gKi9cblxuXG52YXIgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciA9IGZ1bmN0aW9uIHN0cmlwSW5kZW50VHJhbnNmb3JtZXIoKSB7XG4gIHZhciB0eXBlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnaW5pdGlhbCc7XG4gIHJldHVybiB7XG4gICAgb25FbmRSZXN1bHQ6IGZ1bmN0aW9uIG9uRW5kUmVzdWx0KGVuZFJlc3VsdCkge1xuICAgICAgaWYgKHR5cGUgPT09ICdpbml0aWFsJykge1xuICAgICAgICAvLyByZW1vdmUgdGhlIHNob3J0ZXN0IGxlYWRpbmcgaW5kZW50YXRpb24gZnJvbSBlYWNoIGxpbmVcbiAgICAgICAgdmFyIG1hdGNoID0gZW5kUmVzdWx0Lm1hdGNoKC9eW15cXFNcXG5dKig/PVxcUykvZ20pO1xuICAgICAgICB2YXIgaW5kZW50ID0gbWF0Y2ggJiYgTWF0aC5taW4uYXBwbHkoTWF0aCwgX3RvQ29uc3VtYWJsZUFycmF5KG1hdGNoLm1hcChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICByZXR1cm4gZWwubGVuZ3RoO1xuICAgICAgICB9KSkpO1xuXG4gICAgICAgIGlmIChpbmRlbnQpIHtcbiAgICAgICAgICB2YXIgcmVnZXhwID0gbmV3IFJlZ0V4cCgnXi57JyArIGluZGVudCArICd9JywgJ2dtJyk7XG4gICAgICAgICAgcmV0dXJuIGVuZFJlc3VsdC5yZXBsYWNlKHJlZ2V4cCwgJycpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVuZFJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGUgPT09ICdhbGwnKSB7XG4gICAgICAgIC8vIHJlbW92ZSBhbGwgaW5kZW50YXRpb24gZnJvbSBlYWNoIGxpbmVcbiAgICAgICAgcmV0dXJuIGVuZFJlc3VsdC5yZXBsYWNlKC9eW15cXFNcXG5dKy9nbSwgJycpO1xuICAgICAgfVxuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gdHlwZTogJyArIHR5cGUpO1xuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHN0cmlwSW5kZW50VHJhbnNmb3JtZXI7IiwiLyoqXG4gKiBUZW1wbGF0ZVRhZyB0cmFuc2Zvcm1lciB0aGF0IHRyaW1zIHdoaXRlc3BhY2Ugb24gdGhlIGVuZCByZXN1bHQgb2YgYSB0YWdnZWQgdGVtcGxhdGVcbiAqIEBwYXJhbSAge1N0cmluZ30gc2lkZSA9ICcnIC0gVGhlIHNpZGUgb2YgdGhlIHN0cmluZyB0byB0cmltLiBDYW4gYmUgJ3N0YXJ0JyBvciAnZW5kJyAoYWx0ZXJuYXRpdmVseSAnbGVmdCcgb3IgJ3JpZ2h0JylcbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgIC0gYSBUZW1wbGF0ZVRhZyB0cmFuc2Zvcm1lclxuICovXG52YXIgdHJpbVJlc3VsdFRyYW5zZm9ybWVyID0gZnVuY3Rpb24gdHJpbVJlc3VsdFRyYW5zZm9ybWVyKCkge1xuICB2YXIgc2lkZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJyc7XG4gIHJldHVybiB7XG4gICAgb25FbmRSZXN1bHQ6IGZ1bmN0aW9uIG9uRW5kUmVzdWx0KGVuZFJlc3VsdCkge1xuICAgICAgaWYgKHNpZGUgPT09ICcnKSB7XG4gICAgICAgIHJldHVybiBlbmRSZXN1bHQudHJpbSgpO1xuICAgICAgfVxuXG4gICAgICBzaWRlID0gc2lkZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICBpZiAoc2lkZSA9PT0gJ3N0YXJ0JyB8fCBzaWRlID09PSAnbGVmdCcpIHtcbiAgICAgICAgcmV0dXJuIGVuZFJlc3VsdC5yZXBsYWNlKC9eXFxzKi8sICcnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNpZGUgPT09ICdlbmQnIHx8IHNpZGUgPT09ICdyaWdodCcpIHtcbiAgICAgICAgcmV0dXJuIGVuZFJlc3VsdC5yZXBsYWNlKC9cXHMqJC8sICcnKTtcbiAgICAgIH1cblxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTaWRlIG5vdCBzdXBwb3J0ZWQ6ICcgKyBzaWRlKTtcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCB0cmltUmVzdWx0VHJhbnNmb3JtZXI7IiwiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBzdHJpcEluZGVudFRyYW5zZm9ybWVyIGZyb20gJy4uL3N0cmlwSW5kZW50VHJhbnNmb3JtZXInO1xuaW1wb3J0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgZnJvbSAnLi4vaW5saW5lQXJyYXlUcmFuc2Zvcm1lcic7XG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcic7XG52YXIgY29tbWFMaXN0cyA9IG5ldyBUZW1wbGF0ZVRhZyhpbmxpbmVBcnJheVRyYW5zZm9ybWVyKHtcbiAgc2VwYXJhdG9yOiAnLCdcbn0pLCBzdHJpcEluZGVudFRyYW5zZm9ybWVyLCB0cmltUmVzdWx0VHJhbnNmb3JtZXIpO1xuZXhwb3J0IGRlZmF1bHQgY29tbWFMaXN0czsiLCJpbXBvcnQgX2RlZmF1bHQgZnJvbSAnLi9jb21tYUxpc3RzJztcbmV4cG9ydCB7IF9kZWZhdWx0IGFzIGRlZmF1bHQgfTsiLCJpbXBvcnQgVGVtcGxhdGVUYWcgZnJvbSAnLi4vVGVtcGxhdGVUYWcnO1xuaW1wb3J0IHN0cmlwSW5kZW50VHJhbnNmb3JtZXIgZnJvbSAnLi4vc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcic7XG5pbXBvcnQgaW5saW5lQXJyYXlUcmFuc2Zvcm1lciBmcm9tICcuLi9pbmxpbmVBcnJheVRyYW5zZm9ybWVyJztcbmltcG9ydCB0cmltUmVzdWx0VHJhbnNmb3JtZXIgZnJvbSAnLi4vdHJpbVJlc3VsdFRyYW5zZm9ybWVyJztcbnZhciBjb21tYUxpc3RzQW5kID0gbmV3IFRlbXBsYXRlVGFnKGlubGluZUFycmF5VHJhbnNmb3JtZXIoe1xuICBzZXBhcmF0b3I6ICcsJyxcbiAgY29uanVuY3Rpb246ICdhbmQnXG59KSwgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciwgdHJpbVJlc3VsdFRyYW5zZm9ybWVyKTtcbmV4cG9ydCBkZWZhdWx0IGNvbW1hTGlzdHNBbmQ7IiwiaW1wb3J0IF9kZWZhdWx0IGZyb20gJy4vY29tbWFMaXN0c0FuZCc7XG5leHBvcnQgeyBfZGVmYXVsdCBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBzdHJpcEluZGVudFRyYW5zZm9ybWVyIGZyb20gJy4uL3N0cmlwSW5kZW50VHJhbnNmb3JtZXInO1xuaW1wb3J0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgZnJvbSAnLi4vaW5saW5lQXJyYXlUcmFuc2Zvcm1lcic7XG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcic7XG52YXIgY29tbWFMaXN0c09yID0gbmV3IFRlbXBsYXRlVGFnKGlubGluZUFycmF5VHJhbnNmb3JtZXIoe1xuICBzZXBhcmF0b3I6ICcsJyxcbiAgY29uanVuY3Rpb246ICdvcidcbn0pLCBzdHJpcEluZGVudFRyYW5zZm9ybWVyLCB0cmltUmVzdWx0VHJhbnNmb3JtZXIpO1xuZXhwb3J0IGRlZmF1bHQgY29tbWFMaXN0c09yOyIsImltcG9ydCBfZGVmYXVsdCBmcm9tICcuL2NvbW1hTGlzdHNPcic7XG5leHBvcnQgeyBfZGVmYXVsdCBhcyBkZWZhdWx0IH07IiwidmFyIHNwbGl0U3RyaW5nVHJhbnNmb3JtZXIgPSBmdW5jdGlvbiBzcGxpdFN0cmluZ1RyYW5zZm9ybWVyKHNwbGl0QnkpIHtcbiAgcmV0dXJuIHtcbiAgICBvblN1YnN0aXR1dGlvbjogZnVuY3Rpb24gb25TdWJzdGl0dXRpb24oc3Vic3RpdHV0aW9uLCByZXN1bHRTb0Zhcikge1xuICAgICAgaWYgKHNwbGl0QnkgIT0gbnVsbCAmJiB0eXBlb2Ygc3BsaXRCeSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzdWJzdGl0dXRpb24gPT09ICdzdHJpbmcnICYmIHN1YnN0aXR1dGlvbi5pbmNsdWRlcyhzcGxpdEJ5KSkge1xuICAgICAgICAgIHN1YnN0aXR1dGlvbiA9IHN1YnN0aXR1dGlvbi5zcGxpdChzcGxpdEJ5KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbmVlZCB0byBzcGVjaWZ5IGEgc3RyaW5nIGNoYXJhY3RlciB0byBzcGxpdCBieS4nKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN1YnN0aXR1dGlvbjtcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBzcGxpdFN0cmluZ1RyYW5zZm9ybWVyOyIsInZhciBpc1ZhbGlkVmFsdWUgPSBmdW5jdGlvbiBpc1ZhbGlkVmFsdWUoeCkge1xuICByZXR1cm4geCAhPSBudWxsICYmICFOdW1iZXIuaXNOYU4oeCkgJiYgdHlwZW9mIHggIT09ICdib29sZWFuJztcbn07XG5cbnZhciByZW1vdmVOb25QcmludGluZ1ZhbHVlc1RyYW5zZm9ybWVyID0gZnVuY3Rpb24gcmVtb3ZlTm9uUHJpbnRpbmdWYWx1ZXNUcmFuc2Zvcm1lcigpIHtcbiAgcmV0dXJuIHtcbiAgICBvblN1YnN0aXR1dGlvbjogZnVuY3Rpb24gb25TdWJzdGl0dXRpb24oc3Vic3RpdHV0aW9uKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShzdWJzdGl0dXRpb24pKSB7XG4gICAgICAgIHJldHVybiBzdWJzdGl0dXRpb24uZmlsdGVyKGlzVmFsaWRWYWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc1ZhbGlkVmFsdWUoc3Vic3RpdHV0aW9uKSkge1xuICAgICAgICByZXR1cm4gc3Vic3RpdHV0aW9uO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgcmVtb3ZlTm9uUHJpbnRpbmdWYWx1ZXNUcmFuc2Zvcm1lcjsiLCJpbXBvcnQgVGVtcGxhdGVUYWcgZnJvbSAnLi4vVGVtcGxhdGVUYWcnO1xuaW1wb3J0IHN0cmlwSW5kZW50VHJhbnNmb3JtZXIgZnJvbSAnLi4vc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcic7XG5pbXBvcnQgaW5saW5lQXJyYXlUcmFuc2Zvcm1lciBmcm9tICcuLi9pbmxpbmVBcnJheVRyYW5zZm9ybWVyJztcbmltcG9ydCB0cmltUmVzdWx0VHJhbnNmb3JtZXIgZnJvbSAnLi4vdHJpbVJlc3VsdFRyYW5zZm9ybWVyJztcbmltcG9ydCBzcGxpdFN0cmluZ1RyYW5zZm9ybWVyIGZyb20gJy4uL3NwbGl0U3RyaW5nVHJhbnNmb3JtZXInO1xuaW1wb3J0IHJlbW92ZU5vblByaW50aW5nVmFsdWVzVHJhbnNmb3JtZXIgZnJvbSAnLi4vcmVtb3ZlTm9uUHJpbnRpbmdWYWx1ZXNUcmFuc2Zvcm1lcic7XG52YXIgaHRtbCA9IG5ldyBUZW1wbGF0ZVRhZyhzcGxpdFN0cmluZ1RyYW5zZm9ybWVyKCdcXG4nKSwgcmVtb3ZlTm9uUHJpbnRpbmdWYWx1ZXNUcmFuc2Zvcm1lciwgaW5saW5lQXJyYXlUcmFuc2Zvcm1lciwgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciwgdHJpbVJlc3VsdFRyYW5zZm9ybWVyKTtcbmV4cG9ydCBkZWZhdWx0IGh0bWw7IiwiaW1wb3J0IF9kZWZhdWx0IGZyb20gJy4vaHRtbCc7XG5leHBvcnQgeyBfZGVmYXVsdCBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IF9kZWZhdWx0IGZyb20gJy4uL2h0bWwnO1xuZXhwb3J0IHsgX2RlZmF1bHQgYXMgZGVmYXVsdCB9OyIsImltcG9ydCBfZGVmYXVsdCBmcm9tICcuLi9odG1sJztcbmV4cG9ydCB7IF9kZWZhdWx0IGFzIGRlZmF1bHQgfTsiLCJ2YXIgcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyID0gZnVuY3Rpb24gcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyKHJlcGxhY2VXaGF0LCByZXBsYWNlV2l0aCkge1xuICByZXR1cm4ge1xuICAgIG9uU3Vic3RpdHV0aW9uOiBmdW5jdGlvbiBvblN1YnN0aXR1dGlvbihzdWJzdGl0dXRpb24sIHJlc3VsdFNvRmFyKSB7XG4gICAgICBpZiAocmVwbGFjZVdoYXQgPT0gbnVsbCB8fCByZXBsYWNlV2l0aCA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigncmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyIHJlcXVpcmVzIGF0IGxlYXN0IDIgYXJndW1lbnRzLicpO1xuICAgICAgfSAvLyBEbyBub3QgdG91Y2ggaWYgbnVsbCBvciB1bmRlZmluZWRcblxuXG4gICAgICBpZiAoc3Vic3RpdHV0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHN1YnN0aXR1dGlvbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBzdWJzdGl0dXRpb24udG9TdHJpbmcoKS5yZXBsYWNlKHJlcGxhY2VXaGF0LCByZXBsYWNlV2l0aCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyOyIsImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciBmcm9tICcuLi9zdHJpcEluZGVudFRyYW5zZm9ybWVyJztcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuaW1wb3J0IHNwbGl0U3RyaW5nVHJhbnNmb3JtZXIgZnJvbSAnLi4vc3BsaXRTdHJpbmdUcmFuc2Zvcm1lcic7XG5pbXBvcnQgcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyIGZyb20gJy4uL3JlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lcic7XG52YXIgc2FmZUh0bWwgPSBuZXcgVGVtcGxhdGVUYWcoc3BsaXRTdHJpbmdUcmFuc2Zvcm1lcignXFxuJyksIGlubGluZUFycmF5VHJhbnNmb3JtZXIsIHN0cmlwSW5kZW50VHJhbnNmb3JtZXIsIHRyaW1SZXN1bHRUcmFuc2Zvcm1lciwgcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyKC8mL2csICcmYW1wOycpLCByZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIoLzwvZywgJyZsdDsnKSwgcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyKC8+L2csICcmZ3Q7JyksIHJlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lcigvXCIvZywgJyZxdW90OycpLCByZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIoLycvZywgJyYjeDI3OycpLCByZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIoL2AvZywgJyYjeDYwOycpKTtcbmV4cG9ydCBkZWZhdWx0IHNhZmVIdG1sOyIsImltcG9ydCBfZGVmYXVsdCBmcm9tICcuL3NhZmVIdG1sJztcbmV4cG9ydCB7IF9kZWZhdWx0IGFzIGRlZmF1bHQgfTsiLCIvKipcbiAqIFJlcGxhY2VzIHRhYnMsIG5ld2xpbmVzIGFuZCBzcGFjZXMgd2l0aCB0aGUgY2hvc2VuIHZhbHVlIHdoZW4gdGhleSBvY2N1ciBpbiBzZXF1ZW5jZXNcbiAqIEBwYXJhbSAgeyhTdHJpbmd8UmVnRXhwKX0gcmVwbGFjZVdoYXQgLSB0aGUgdmFsdWUgb3IgcGF0dGVybiB0aGF0IHNob3VsZCBiZSByZXBsYWNlZFxuICogQHBhcmFtICB7Kn0gICAgICAgICAgICAgICByZXBsYWNlV2l0aCAtIHRoZSByZXBsYWNlbWVudCB2YWx1ZVxuICogQHJldHVybiB7T2JqZWN0fSAgICAgICAgICAgICAgICAgICAgICAtIGEgVGVtcGxhdGVUYWcgdHJhbnNmb3JtZXJcbiAqL1xudmFyIHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciA9IGZ1bmN0aW9uIHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lcihyZXBsYWNlV2hhdCwgcmVwbGFjZVdpdGgpIHtcbiAgcmV0dXJuIHtcbiAgICBvbkVuZFJlc3VsdDogZnVuY3Rpb24gb25FbmRSZXN1bHQoZW5kUmVzdWx0KSB7XG4gICAgICBpZiAocmVwbGFjZVdoYXQgPT0gbnVsbCB8fCByZXBsYWNlV2l0aCA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigncmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyIHJlcXVpcmVzIGF0IGxlYXN0IDIgYXJndW1lbnRzLicpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZW5kUmVzdWx0LnJlcGxhY2UocmVwbGFjZVdoYXQsIHJlcGxhY2VXaXRoKTtcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCByZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXI7IiwiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCB0cmltUmVzdWx0VHJhbnNmb3JtZXIgZnJvbSAnLi4vdHJpbVJlc3VsdFRyYW5zZm9ybWVyJztcbmltcG9ydCByZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIgZnJvbSAnLi4vcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyJztcbnZhciBvbmVMaW5lID0gbmV3IFRlbXBsYXRlVGFnKHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lcigvKD86XFxuKD86XFxzKikpKy9nLCAnICcpLCB0cmltUmVzdWx0VHJhbnNmb3JtZXIpO1xuZXhwb3J0IGRlZmF1bHQgb25lTGluZTsiLCJpbXBvcnQgX2RlZmF1bHQgZnJvbSAnLi9vbmVMaW5lJztcbmV4cG9ydCB7IF9kZWZhdWx0IGFzIGRlZmF1bHQgfTsiLCJpbXBvcnQgVGVtcGxhdGVUYWcgZnJvbSAnLi4vVGVtcGxhdGVUYWcnO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuaW1wb3J0IHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi9yZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXInO1xudmFyIG9uZUxpbmVUcmltID0gbmV3IFRlbXBsYXRlVGFnKHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lcigvKD86XFxuXFxzKikvZywgJycpLCB0cmltUmVzdWx0VHJhbnNmb3JtZXIpO1xuZXhwb3J0IGRlZmF1bHQgb25lTGluZVRyaW07IiwiaW1wb3J0IF9kZWZhdWx0IGZyb20gJy4vb25lTGluZVRyaW0nO1xuZXhwb3J0IHsgX2RlZmF1bHQgYXMgZGVmYXVsdCB9OyIsImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgaW5saW5lQXJyYXlUcmFuc2Zvcm1lciBmcm9tICcuLi9pbmxpbmVBcnJheVRyYW5zZm9ybWVyJztcbmltcG9ydCB0cmltUmVzdWx0VHJhbnNmb3JtZXIgZnJvbSAnLi4vdHJpbVJlc3VsdFRyYW5zZm9ybWVyJztcbmltcG9ydCByZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIgZnJvbSAnLi4vcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyJztcbnZhciBvbmVMaW5lQ29tbWFMaXN0cyA9IG5ldyBUZW1wbGF0ZVRhZyhpbmxpbmVBcnJheVRyYW5zZm9ybWVyKHtcbiAgc2VwYXJhdG9yOiAnLCdcbn0pLCByZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIoLyg/OlxccyspL2csICcgJyksIHRyaW1SZXN1bHRUcmFuc2Zvcm1lcik7XG5leHBvcnQgZGVmYXVsdCBvbmVMaW5lQ29tbWFMaXN0czsiLCJpbXBvcnQgX2RlZmF1bHQgZnJvbSAnLi9vbmVMaW5lQ29tbWFMaXN0cyc7XG5leHBvcnQgeyBfZGVmYXVsdCBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuaW1wb3J0IHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi9yZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXInO1xudmFyIG9uZUxpbmVDb21tYUxpc3RzT3IgPSBuZXcgVGVtcGxhdGVUYWcoaW5saW5lQXJyYXlUcmFuc2Zvcm1lcih7XG4gIHNlcGFyYXRvcjogJywnLFxuICBjb25qdW5jdGlvbjogJ29yJ1xufSksIHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lcigvKD86XFxzKykvZywgJyAnKSwgdHJpbVJlc3VsdFRyYW5zZm9ybWVyKTtcbmV4cG9ydCBkZWZhdWx0IG9uZUxpbmVDb21tYUxpc3RzT3I7IiwiaW1wb3J0IF9kZWZhdWx0IGZyb20gJy4vb25lTGluZUNvbW1hTGlzdHNPcic7XG5leHBvcnQgeyBfZGVmYXVsdCBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuaW1wb3J0IHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi9yZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXInO1xudmFyIG9uZUxpbmVDb21tYUxpc3RzQW5kID0gbmV3IFRlbXBsYXRlVGFnKGlubGluZUFycmF5VHJhbnNmb3JtZXIoe1xuICBzZXBhcmF0b3I6ICcsJyxcbiAgY29uanVuY3Rpb246ICdhbmQnXG59KSwgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyKC8oPzpcXHMrKS9nLCAnICcpLCB0cmltUmVzdWx0VHJhbnNmb3JtZXIpO1xuZXhwb3J0IGRlZmF1bHQgb25lTGluZUNvbW1hTGlzdHNBbmQ7IiwiaW1wb3J0IF9kZWZhdWx0IGZyb20gJy4vb25lTGluZUNvbW1hTGlzdHNBbmQnO1xuZXhwb3J0IHsgX2RlZmF1bHQgYXMgZGVmYXVsdCB9OyIsImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciBmcm9tICcuLi9zdHJpcEluZGVudFRyYW5zZm9ybWVyJztcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xudmFyIGlubGluZUxpc3RzID0gbmV3IFRlbXBsYXRlVGFnKGlubGluZUFycmF5VHJhbnNmb3JtZXIsIHN0cmlwSW5kZW50VHJhbnNmb3JtZXIsIHRyaW1SZXN1bHRUcmFuc2Zvcm1lcik7XG5leHBvcnQgZGVmYXVsdCBpbmxpbmVMaXN0czsiLCJpbXBvcnQgX2RlZmF1bHQgZnJvbSAnLi9pbmxpbmVMaXN0cyc7XG5leHBvcnQgeyBfZGVmYXVsdCBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuaW1wb3J0IHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi9yZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXInO1xudmFyIG9uZUxpbmVJbmxpbmVMaXN0cyA9IG5ldyBUZW1wbGF0ZVRhZyhpbmxpbmVBcnJheVRyYW5zZm9ybWVyLCByZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIoLyg/OlxccyspL2csICcgJyksIHRyaW1SZXN1bHRUcmFuc2Zvcm1lcik7XG5leHBvcnQgZGVmYXVsdCBvbmVMaW5lSW5saW5lTGlzdHM7IiwiaW1wb3J0IF9kZWZhdWx0IGZyb20gJy4vb25lTGluZUlubGluZUxpc3RzJztcbmV4cG9ydCB7IF9kZWZhdWx0IGFzIGRlZmF1bHQgfTsiLCJpbXBvcnQgVGVtcGxhdGVUYWcgZnJvbSAnLi4vVGVtcGxhdGVUYWcnO1xuaW1wb3J0IHN0cmlwSW5kZW50VHJhbnNmb3JtZXIgZnJvbSAnLi4vc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcic7XG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcic7XG52YXIgc3RyaXBJbmRlbnQgPSBuZXcgVGVtcGxhdGVUYWcoc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciwgdHJpbVJlc3VsdFRyYW5zZm9ybWVyKTtcbmV4cG9ydCBkZWZhdWx0IHN0cmlwSW5kZW50OyIsImltcG9ydCBfZGVmYXVsdCBmcm9tICcuL3N0cmlwSW5kZW50JztcbmV4cG9ydCB7IF9kZWZhdWx0IGFzIGRlZmF1bHQgfTsiLCJpbXBvcnQgVGVtcGxhdGVUYWcgZnJvbSAnLi4vVGVtcGxhdGVUYWcnO1xuaW1wb3J0IHN0cmlwSW5kZW50VHJhbnNmb3JtZXIgZnJvbSAnLi4vc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcic7XG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcic7XG52YXIgc3RyaXBJbmRlbnRzID0gbmV3IFRlbXBsYXRlVGFnKHN0cmlwSW5kZW50VHJhbnNmb3JtZXIoJ2FsbCcpLCB0cmltUmVzdWx0VHJhbnNmb3JtZXIpO1xuZXhwb3J0IGRlZmF1bHQgc3RyaXBJbmRlbnRzOyIsImltcG9ydCBfZGVmYXVsdCBmcm9tICcuL3N0cmlwSW5kZW50cyc7XG5leHBvcnQgeyBfZGVmYXVsdCBhcyBkZWZhdWx0IH07IiwiLy8gY29yZVxuaW1wb3J0IF9UZW1wbGF0ZVRhZyBmcm9tICcuL1RlbXBsYXRlVGFnJztcbmV4cG9ydCB7IF9UZW1wbGF0ZVRhZyBhcyBUZW1wbGF0ZVRhZyB9OyAvLyB0cmFuc2Zvcm1lcnNcblxuaW1wb3J0IF90cmltUmVzdWx0VHJhbnNmb3JtZXIgZnJvbSAnLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuZXhwb3J0IHsgX3RyaW1SZXN1bHRUcmFuc2Zvcm1lciBhcyB0cmltUmVzdWx0VHJhbnNmb3JtZXIgfTtcbmltcG9ydCBfc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciBmcm9tICcuL3N0cmlwSW5kZW50VHJhbnNmb3JtZXInO1xuZXhwb3J0IHsgX3N0cmlwSW5kZW50VHJhbnNmb3JtZXIgYXMgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciB9O1xuaW1wb3J0IF9yZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIgZnJvbSAnLi9yZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXInO1xuZXhwb3J0IHsgX3JlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciBhcyByZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIgfTtcbmltcG9ydCBfcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyIGZyb20gJy4vcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyJztcbmV4cG9ydCB7IF9yZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIgYXMgcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyIH07XG5pbXBvcnQgX3JlcGxhY2VTdHJpbmdUcmFuc2Zvcm1lciBmcm9tICcuL3JlcGxhY2VTdHJpbmdUcmFuc2Zvcm1lcic7XG5leHBvcnQgeyBfcmVwbGFjZVN0cmluZ1RyYW5zZm9ybWVyIGFzIHJlcGxhY2VTdHJpbmdUcmFuc2Zvcm1lciB9O1xuaW1wb3J0IF9pbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4vaW5saW5lQXJyYXlUcmFuc2Zvcm1lcic7XG5leHBvcnQgeyBfaW5saW5lQXJyYXlUcmFuc2Zvcm1lciBhcyBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIH07XG5pbXBvcnQgX3NwbGl0U3RyaW5nVHJhbnNmb3JtZXIgZnJvbSAnLi9zcGxpdFN0cmluZ1RyYW5zZm9ybWVyJztcbmV4cG9ydCB7IF9zcGxpdFN0cmluZ1RyYW5zZm9ybWVyIGFzIHNwbGl0U3RyaW5nVHJhbnNmb3JtZXIgfTtcbmltcG9ydCBfcmVtb3ZlTm9uUHJpbnRpbmdWYWx1ZXNUcmFuc2Zvcm1lciBmcm9tICcuL3JlbW92ZU5vblByaW50aW5nVmFsdWVzVHJhbnNmb3JtZXInO1xuZXhwb3J0IHsgX3JlbW92ZU5vblByaW50aW5nVmFsdWVzVHJhbnNmb3JtZXIgYXMgcmVtb3ZlTm9uUHJpbnRpbmdWYWx1ZXNUcmFuc2Zvcm1lciB9OyAvLyB0YWdzXG5cbmltcG9ydCBfY29tbWFMaXN0cyBmcm9tICcuL2NvbW1hTGlzdHMnO1xuZXhwb3J0IHsgX2NvbW1hTGlzdHMgYXMgY29tbWFMaXN0cyB9O1xuaW1wb3J0IF9jb21tYUxpc3RzQW5kIGZyb20gJy4vY29tbWFMaXN0c0FuZCc7XG5leHBvcnQgeyBfY29tbWFMaXN0c0FuZCBhcyBjb21tYUxpc3RzQW5kIH07XG5pbXBvcnQgX2NvbW1hTGlzdHNPciBmcm9tICcuL2NvbW1hTGlzdHNPcic7XG5leHBvcnQgeyBfY29tbWFMaXN0c09yIGFzIGNvbW1hTGlzdHNPciB9O1xuaW1wb3J0IF9odG1sIGZyb20gJy4vaHRtbCc7XG5leHBvcnQgeyBfaHRtbCBhcyBodG1sIH07XG5pbXBvcnQgX2NvZGVCbG9jayBmcm9tICcuL2NvZGVCbG9jayc7XG5leHBvcnQgeyBfY29kZUJsb2NrIGFzIGNvZGVCbG9jayB9O1xuaW1wb3J0IF9zb3VyY2UgZnJvbSAnLi9zb3VyY2UnO1xuZXhwb3J0IHsgX3NvdXJjZSBhcyBzb3VyY2UgfTtcbmltcG9ydCBfc2FmZUh0bWwgZnJvbSAnLi9zYWZlSHRtbCc7XG5leHBvcnQgeyBfc2FmZUh0bWwgYXMgc2FmZUh0bWwgfTtcbmltcG9ydCBfb25lTGluZSBmcm9tICcuL29uZUxpbmUnO1xuZXhwb3J0IHsgX29uZUxpbmUgYXMgb25lTGluZSB9O1xuaW1wb3J0IF9vbmVMaW5lVHJpbSBmcm9tICcuL29uZUxpbmVUcmltJztcbmV4cG9ydCB7IF9vbmVMaW5lVHJpbSBhcyBvbmVMaW5lVHJpbSB9O1xuaW1wb3J0IF9vbmVMaW5lQ29tbWFMaXN0cyBmcm9tICcuL29uZUxpbmVDb21tYUxpc3RzJztcbmV4cG9ydCB7IF9vbmVMaW5lQ29tbWFMaXN0cyBhcyBvbmVMaW5lQ29tbWFMaXN0cyB9O1xuaW1wb3J0IF9vbmVMaW5lQ29tbWFMaXN0c09yIGZyb20gJy4vb25lTGluZUNvbW1hTGlzdHNPcic7XG5leHBvcnQgeyBfb25lTGluZUNvbW1hTGlzdHNPciBhcyBvbmVMaW5lQ29tbWFMaXN0c09yIH07XG5pbXBvcnQgX29uZUxpbmVDb21tYUxpc3RzQW5kIGZyb20gJy4vb25lTGluZUNvbW1hTGlzdHNBbmQnO1xuZXhwb3J0IHsgX29uZUxpbmVDb21tYUxpc3RzQW5kIGFzIG9uZUxpbmVDb21tYUxpc3RzQW5kIH07XG5pbXBvcnQgX2lubGluZUxpc3RzIGZyb20gJy4vaW5saW5lTGlzdHMnO1xuZXhwb3J0IHsgX2lubGluZUxpc3RzIGFzIGlubGluZUxpc3RzIH07XG5pbXBvcnQgX29uZUxpbmVJbmxpbmVMaXN0cyBmcm9tICcuL29uZUxpbmVJbmxpbmVMaXN0cyc7XG5leHBvcnQgeyBfb25lTGluZUlubGluZUxpc3RzIGFzIG9uZUxpbmVJbmxpbmVMaXN0cyB9O1xuaW1wb3J0IF9zdHJpcEluZGVudCBmcm9tICcuL3N0cmlwSW5kZW50JztcbmV4cG9ydCB7IF9zdHJpcEluZGVudCBhcyBzdHJpcEluZGVudCB9O1xuaW1wb3J0IF9zdHJpcEluZGVudHMgZnJvbSAnLi9zdHJpcEluZGVudHMnO1xuZXhwb3J0IHsgX3N0cmlwSW5kZW50cyBhcyBzdHJpcEluZGVudHMgfTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4041\n")},6494:function(module){"use strict";eval("\n\nmodule.exports = Object.assign;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjQ5NC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiIsInNvdXJjZXMiOlsid2VicGFjazovL2Fzc2FwaXIuZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzL2dhdHNieS9kaXN0L2ludGVybmFsLXBsdWdpbnMvYnVuZGxlLW9wdGltaXNhdGlvbnMvcG9seWZpbGxzL29iamVjdC1hc3NpZ24uanM/ZWJmYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6494\n")},8037:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('var __webpack_unused_export__;\n\n\nvar _interopRequireDefault = __webpack_require__(5318);\n\n__webpack_unused_export__ = true;\nexports.dq = withPrefix;\nexports.mc = withAssetPrefix;\nexports.c4 = exports.ZP = void 0;\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(__webpack_require__(7316));\n\nvar _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(1506));\n\nvar _inheritsLoose2 = _interopRequireDefault(__webpack_require__(5354));\n\nvar _extends2 = _interopRequireDefault(__webpack_require__(7154));\n\nvar _propTypes = _interopRequireDefault(__webpack_require__(5697));\n\nvar _react = _interopRequireDefault(__webpack_require__(7294));\n\nvar _reachRouter = __webpack_require__(9499);\n\nvar _utils = __webpack_require__(2098);\n\nvar _parsePath = __webpack_require__(1752);\n\nexports.cP = _parsePath.parsePath;\nvar _excluded = ["to", "getProps", "onClick", "onMouseEnter", "activeClassName", "activeStyle", "innerRef", "partiallyActive", "state", "replace", "_location"];\n\nvar isAbsolutePath = function isAbsolutePath(path) {\n  return path === null || path === void 0 ? void 0 : path.startsWith("/");\n};\n\nfunction withPrefix(path, prefix) {\n  var _ref, _prefix;\n\n  if (prefix === void 0) {\n    prefix = getGlobalBasePrefix();\n  }\n\n  if (!isLocalLink(path)) {\n    return path;\n  }\n\n  if (path.startsWith("./") || path.startsWith("../")) {\n    return path;\n  }\n\n  var base = (_ref = (_prefix = prefix) !== null && _prefix !== void 0 ? _prefix : getGlobalPathPrefix()) !== null && _ref !== void 0 ? _ref : "/";\n  return "" + (base !== null && base !== void 0 && base.endsWith("/") ? base.slice(0, -1) : base) + (path.startsWith("/") ? path : "/" + path);\n} // These global values are wrapped in typeof clauses to ensure the values exist.\n// This is especially problematic in unit testing of this component.\n\n\nvar getGlobalPathPrefix = function getGlobalPathPrefix() {\n  return  false ? 0 : "";\n};\n\nvar getGlobalBasePrefix = function getGlobalBasePrefix() {\n  return  false ? 0 : "";\n};\n\nvar isLocalLink = function isLocalLink(path) {\n  return path && !path.startsWith("http://") && !path.startsWith("https://") && !path.startsWith("//");\n};\n\nfunction withAssetPrefix(path) {\n  return withPrefix(path, getGlobalPathPrefix());\n}\n\nfunction absolutify(path, current) {\n  // If it\'s already absolute, return as-is\n  if (isAbsolutePath(path)) {\n    return path;\n  }\n\n  return (0, _utils.resolve)(path, current);\n}\n\nvar rewriteLinkPath = function rewriteLinkPath(path, relativeTo) {\n  if (typeof path === "number") {\n    return path;\n  }\n\n  if (!isLocalLink(path)) {\n    return path;\n  }\n\n  return isAbsolutePath(path) ? withPrefix(path) : absolutify(path, relativeTo);\n};\n\nvar NavLinkPropTypes = {\n  activeClassName: _propTypes.default.string,\n  activeStyle: _propTypes.default.object,\n  partiallyActive: _propTypes.default.bool\n}; // Set up IntersectionObserver\n\nvar createIntersectionObserver = function createIntersectionObserver(el, cb) {\n  var io = new window.IntersectionObserver(function (entries) {\n    entries.forEach(function (entry) {\n      if (el === entry.target) {\n        // Check if element is within viewport, remove listener, destroy observer, and run link callback.\n        // MSEdge doesn\'t currently support isIntersecting, so also test for  an intersectionRatio > 0\n        if (entry.isIntersecting || entry.intersectionRatio > 0) {\n          io.unobserve(el);\n          io.disconnect();\n          cb();\n        }\n      }\n    });\n  }); // Add element to the observer\n\n  io.observe(el);\n  return {\n    instance: io,\n    el: el\n  };\n};\n\nfunction GatsbyLinkLocationWrapper(props) {\n  return /*#__PURE__*/_react.default.createElement(_reachRouter.Location, null, function (_ref2) {\n    var location = _ref2.location;\n    return /*#__PURE__*/_react.default.createElement(GatsbyLink, (0, _extends2.default)({}, props, {\n      _location: location\n    }));\n  });\n}\n\nvar GatsbyLink = /*#__PURE__*/function (_React$Component) {\n  (0, _inheritsLoose2.default)(GatsbyLink, _React$Component);\n\n  function GatsbyLink(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this; // Default to no support for IntersectionObserver\n\n    _this.defaultGetProps = function (_ref3) {\n      var isPartiallyCurrent = _ref3.isPartiallyCurrent,\n          isCurrent = _ref3.isCurrent;\n\n      if (_this.props.partiallyActive ? isPartiallyCurrent : isCurrent) {\n        return {\n          className: [_this.props.className, _this.props.activeClassName].filter(Boolean).join(" "),\n          style: (0, _extends2.default)({}, _this.props.style, _this.props.activeStyle)\n        };\n      }\n\n      return null;\n    };\n\n    var IOSupported = false;\n\n    if (typeof window !== "undefined" && window.IntersectionObserver) {\n      IOSupported = true;\n    }\n\n    _this.state = {\n      IOSupported: IOSupported\n    };\n    _this.handleRef = _this.handleRef.bind((0, _assertThisInitialized2.default)(_this));\n    return _this;\n  }\n\n  var _proto = GatsbyLink.prototype;\n\n  _proto._prefetch = function _prefetch() {\n    var currentPath = window.location.pathname; // reach router should have the correct state\n\n    if (this.props._location && this.props._location.pathname) {\n      currentPath = this.props._location.pathname;\n    }\n\n    var rewrittenPath = rewriteLinkPath(this.props.to, currentPath);\n    var newPathName = (0, _parsePath.parsePath)(rewrittenPath).pathname; // Prefech is used to speed up next navigations. When you use it on the current navigation,\n    // there could be a race-condition where Chrome uses the stale data instead of waiting for the network to complete\n\n    if (currentPath !== newPathName) {\n      ___loader.enqueue(newPathName);\n    }\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n    // Preserve non IO functionality if no support\n    if (this.props.to !== prevProps.to && !this.state.IOSupported) {\n      this._prefetch();\n    }\n  };\n\n  _proto.componentDidMount = function componentDidMount() {\n    // Preserve non IO functionality if no support\n    if (!this.state.IOSupported) {\n      this._prefetch();\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (!this.io) {\n      return;\n    }\n\n    var _this$io = this.io,\n        instance = _this$io.instance,\n        el = _this$io.el;\n    instance.unobserve(el);\n    instance.disconnect();\n  };\n\n  _proto.handleRef = function handleRef(ref) {\n    var _this2 = this;\n\n    if (this.props.innerRef && this.props.innerRef.hasOwnProperty("current")) {\n      this.props.innerRef.current = ref;\n    } else if (this.props.innerRef) {\n      this.props.innerRef(ref);\n    }\n\n    if (this.state.IOSupported && ref) {\n      // If IO supported and element reference found, setup Observer functionality\n      this.io = createIntersectionObserver(ref, function () {\n        _this2._prefetch();\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    var _this3 = this;\n\n    var _this$props = this.props,\n        to = _this$props.to,\n        _this$props$getProps = _this$props.getProps,\n        getProps = _this$props$getProps === void 0 ? this.defaultGetProps : _this$props$getProps,\n        _onClick = _this$props.onClick,\n        _onMouseEnter = _this$props.onMouseEnter,\n        $activeClassName = _this$props.activeClassName,\n        $activeStyle = _this$props.activeStyle,\n        $innerRef = _this$props.innerRef,\n        partiallyActive = _this$props.partiallyActive,\n        state = _this$props.state,\n        replace = _this$props.replace,\n        _location = _this$props._location,\n        rest = (0, _objectWithoutPropertiesLoose2.default)(_this$props, _excluded);\n\n    if (false) {}\n\n    var prefixedTo = rewriteLinkPath(to, _location.pathname);\n\n    if (!isLocalLink(prefixedTo)) {\n      return /*#__PURE__*/_react.default.createElement("a", (0, _extends2.default)({\n        href: prefixedTo\n      }, rest));\n    }\n\n    return /*#__PURE__*/_react.default.createElement(_reachRouter.Link, (0, _extends2.default)({\n      to: prefixedTo,\n      state: state,\n      getProps: getProps,\n      innerRef: this.handleRef,\n      onMouseEnter: function onMouseEnter(e) {\n        if (_onMouseEnter) {\n          _onMouseEnter(e);\n        }\n\n        ___loader.hovering((0, _parsePath.parsePath)(prefixedTo).pathname);\n      },\n      onClick: function onClick(e) {\n        if (_onClick) {\n          _onClick(e);\n        }\n\n        if (e.button === 0 && // ignore right clicks\n        !_this3.props.target && // let browser handle "target=_blank"\n        !e.defaultPrevented && // onClick prevented default\n        !e.metaKey && // ignore clicks with modifier keys...\n        !e.altKey && !e.ctrlKey && !e.shiftKey) {\n          e.preventDefault();\n          var shouldReplace = replace;\n\n          var isCurrent = encodeURI(prefixedTo) === _location.pathname;\n\n          if (typeof replace !== "boolean" && isCurrent) {\n            shouldReplace = true;\n          } // Make sure the necessary scripts and data are\n          // loaded before continuing.\n\n\n          window.___navigate(prefixedTo, {\n            state: state,\n            replace: shouldReplace\n          });\n        }\n\n        return true;\n      }\n    }, rest));\n  };\n\n  return GatsbyLink;\n}(_react.default.Component);\n\nGatsbyLink.propTypes = (0, _extends2.default)({}, NavLinkPropTypes, {\n  onClick: _propTypes.default.func,\n  to: _propTypes.default.string.isRequired,\n  replace: _propTypes.default.bool,\n  state: _propTypes.default.object\n});\n\nvar _default = /*#__PURE__*/_react.default.forwardRef(function (props, ref) {\n  return /*#__PURE__*/_react.default.createElement(GatsbyLinkLocationWrapper, (0, _extends2.default)({\n    innerRef: ref\n  }, props));\n});\n\nexports.ZP = _default;\n\nvar navigate = function navigate(to, options) {\n  window.___navigate(rewriteLinkPath(to, window.location.pathname), options);\n};\n\nexports.c4 = navigate;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8037\n')},1752:function(__unused_webpack_module,exports){"use strict";eval('\n\nexports.__esModule = true;\nexports.parsePath = parsePath;\n\nfunction parsePath(path) {\n  var pathname = path || "/";\n  var search = "";\n  var hash = "";\n  var hashIndex = pathname.indexOf("#");\n\n  if (hashIndex !== -1) {\n    hash = pathname.substr(hashIndex);\n    pathname = pathname.substr(0, hashIndex);\n  }\n\n  var searchIndex = pathname.indexOf("?");\n\n  if (searchIndex !== -1) {\n    search = pathname.substr(searchIndex);\n    pathname = pathname.substr(0, searchIndex);\n  }\n\n  return {\n    pathname: pathname,\n    search: search === "?" ? "" : search,\n    hash: hash === "#" ? "" : hash\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc1Mi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixrQkFBa0I7QUFDbEIsaUJBQWlCOztBQUVqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Fzc2FwaXIuZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzL2dhdHNieS1saW5rL3BhcnNlLXBhdGguanM/NzJlZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMucGFyc2VQYXRoID0gcGFyc2VQYXRoO1xuXG5mdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICB2YXIgcGF0aG5hbWUgPSBwYXRoIHx8IFwiL1wiO1xuICB2YXIgc2VhcmNoID0gXCJcIjtcbiAgdmFyIGhhc2ggPSBcIlwiO1xuICB2YXIgaGFzaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZihcIiNcIik7XG5cbiAgaWYgKGhhc2hJbmRleCAhPT0gLTEpIHtcbiAgICBoYXNoID0gcGF0aG5hbWUuc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBzZWFyY2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoXCI/XCIpO1xuXG4gIGlmIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcbiAgICBzZWFyY2ggPSBwYXRobmFtZS5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoID09PSBcIj9cIiA/IFwiXCIgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gXCIjXCIgPyBcIlwiIDogaGFzaFxuICB9O1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1752\n')},9679:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("var __webpack_unused_export__;\n\n\n__webpack_unused_export__ = true;\nexports.p2 = exports.$C = void 0;\n\nvar _scrollHandler = __webpack_require__(1432);\n\nexports.$C = _scrollHandler.ScrollHandler;\n\nvar _useScrollRestoration = __webpack_require__(4855);\n\nexports.p2 = _useScrollRestoration.useScrollRestoration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTY3OS5qcyIsIm1hcHBpbmdzIjoiO0FBQWE7O0FBRWIseUJBQWtCO0FBQ2xCLFVBQTRCLEdBQUcsVUFBcUI7O0FBRXBELHFCQUFxQixtQkFBTyxDQUFDLElBQWtCOztBQUUvQyxVQUFxQjs7QUFFckIsNEJBQTRCLG1CQUFPLENBQUMsSUFBMEI7O0FBRTlELFVBQTRCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXNzYXBpci5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvZ2F0c2J5LXJlYWN0LXJvdXRlci1zY3JvbGwvaW5kZXguanM/ZWUxMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMudXNlU2Nyb2xsUmVzdG9yYXRpb24gPSBleHBvcnRzLlNjcm9sbENvbnRleHQgPSB2b2lkIDA7XG5cbnZhciBfc2Nyb2xsSGFuZGxlciA9IHJlcXVpcmUoXCIuL3Njcm9sbC1oYW5kbGVyXCIpO1xuXG5leHBvcnRzLlNjcm9sbENvbnRleHQgPSBfc2Nyb2xsSGFuZGxlci5TY3JvbGxIYW5kbGVyO1xuXG52YXIgX3VzZVNjcm9sbFJlc3RvcmF0aW9uID0gcmVxdWlyZShcIi4vdXNlLXNjcm9sbC1yZXN0b3JhdGlvblwiKTtcblxuZXhwb3J0cy51c2VTY3JvbGxSZXN0b3JhdGlvbiA9IF91c2VTY3JvbGxSZXN0b3JhdGlvbi51c2VTY3JvbGxSZXN0b3JhdGlvbjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9679\n")},1432:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\n\nvar _interopRequireDefault = __webpack_require__(5318);\n\nexports.__esModule = true;\nexports.ScrollHandler = exports.ScrollContext = void 0;\n\nvar _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(1506));\n\nvar _inheritsLoose2 = _interopRequireDefault(__webpack_require__(5354));\n\nvar React = _interopRequireWildcard(__webpack_require__(7294));\n\nvar _propTypes = _interopRequireDefault(__webpack_require__(5697));\n\nvar _sessionStorage = __webpack_require__(1142);\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar ScrollContext = /*#__PURE__*/React.createContext(new _sessionStorage.SessionStorage());\nexports.ScrollContext = ScrollContext;\nScrollContext.displayName = "GatsbyScrollContext";\n\nvar ScrollHandler = /*#__PURE__*/function (_React$Component) {\n  (0, _inheritsLoose2.default)(ScrollHandler, _React$Component);\n\n  function ScrollHandler() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this._stateStorage = new _sessionStorage.SessionStorage();\n    _this._isTicking = false;\n    _this._latestKnownScrollY = 0;\n\n    _this.scrollListener = function () {\n      _this._latestKnownScrollY = window.scrollY;\n\n      if (!_this._isTicking) {\n        _this._isTicking = true;\n        requestAnimationFrame(_this._saveScroll.bind((0, _assertThisInitialized2.default)(_this)));\n      }\n    };\n\n    _this.windowScroll = function (position, prevProps) {\n      if (_this.shouldUpdateScroll(prevProps, _this.props)) {\n        window.scrollTo(0, position);\n      }\n    };\n\n    _this.scrollToHash = function (hash, prevProps) {\n      var node = document.getElementById(hash.substring(1));\n\n      if (node && _this.shouldUpdateScroll(prevProps, _this.props)) {\n        node.scrollIntoView();\n      }\n    };\n\n    _this.shouldUpdateScroll = function (prevRouterProps, routerProps) {\n      var shouldUpdateScroll = _this.props.shouldUpdateScroll;\n\n      if (!shouldUpdateScroll) {\n        return true;\n      } // Hack to allow accessing this._stateStorage.\n\n\n      return shouldUpdateScroll.call((0, _assertThisInitialized2.default)(_this), prevRouterProps, routerProps);\n    };\n\n    return _this;\n  }\n\n  var _proto = ScrollHandler.prototype;\n\n  _proto._saveScroll = function _saveScroll() {\n    var key = this.props.location.key || null;\n\n    if (key) {\n      this._stateStorage.save(this.props.location, key, this._latestKnownScrollY);\n    }\n\n    this._isTicking = false;\n  };\n\n  _proto.componentDidMount = function componentDidMount() {\n    window.addEventListener("scroll", this.scrollListener);\n    var scrollPosition;\n    var _this$props$location = this.props.location,\n        key = _this$props$location.key,\n        hash = _this$props$location.hash;\n\n    if (key) {\n      scrollPosition = this._stateStorage.read(this.props.location, key);\n    }\n\n    if (scrollPosition) {\n      this.windowScroll(scrollPosition, undefined);\n    } else if (hash) {\n      this.scrollToHash(decodeURI(hash), undefined);\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    window.removeEventListener("scroll", this.scrollListener);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var _this$props$location2 = this.props.location,\n        hash = _this$props$location2.hash,\n        key = _this$props$location2.key;\n    var scrollPosition;\n\n    if (key) {\n      scrollPosition = this._stateStorage.read(this.props.location, key);\n    }\n    /**  There are two pieces of state: the browser url and\n     * history state which keeps track of scroll position\n     * Native behaviour prescribes that we ought to restore scroll position\n     * when a user navigates back in their browser (this is the `POP` action)\n     * Currently, reach router has a bug that prevents this at https://github.com/reach/router/issues/228\n     * So we _always_ stick to the url as a source of truth — if the url\n     * contains a hash, we scroll to it\n     */\n\n\n    if (hash) {\n      this.scrollToHash(decodeURI(hash), prevProps);\n    } else {\n      this.windowScroll(scrollPosition, prevProps);\n    }\n  };\n\n  _proto.render = function render() {\n    return /*#__PURE__*/React.createElement(ScrollContext.Provider, {\n      value: this._stateStorage\n    }, this.props.children);\n  };\n\n  return ScrollHandler;\n}(React.Component);\n\nexports.ScrollHandler = ScrollHandler;\nScrollHandler.propTypes = {\n  shouldUpdateScroll: _propTypes.default.func,\n  children: _propTypes.default.element.isRequired,\n  location: _propTypes.default.object.isRequired\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1432\n')},1142:function(__unused_webpack_module,exports){"use strict";eval('\n\nexports.__esModule = true;\nexports.SessionStorage = void 0;\nvar STATE_KEY_PREFIX = "@@scroll|";\nvar GATSBY_ROUTER_SCROLL_STATE = "___GATSBY_REACT_ROUTER_SCROLL";\n\nvar SessionStorage = /*#__PURE__*/function () {\n  function SessionStorage() {}\n\n  var _proto = SessionStorage.prototype;\n\n  _proto.read = function read(location, key) {\n    var stateKey = this.getStateKey(location, key);\n\n    try {\n      var value = window.sessionStorage.getItem(stateKey);\n      return value ? JSON.parse(value) : 0;\n    } catch (e) {\n      if (false) {}\n\n      if (window && window[GATSBY_ROUTER_SCROLL_STATE] && window[GATSBY_ROUTER_SCROLL_STATE][stateKey]) {\n        return window[GATSBY_ROUTER_SCROLL_STATE][stateKey];\n      }\n\n      return 0;\n    }\n  };\n\n  _proto.save = function save(location, key, value) {\n    var stateKey = this.getStateKey(location, key);\n    var storedValue = JSON.stringify(value);\n\n    try {\n      window.sessionStorage.setItem(stateKey, storedValue);\n    } catch (e) {\n      if (window && window[GATSBY_ROUTER_SCROLL_STATE]) {\n        window[GATSBY_ROUTER_SCROLL_STATE][stateKey] = JSON.parse(storedValue);\n      } else {\n        window[GATSBY_ROUTER_SCROLL_STATE] = {};\n        window[GATSBY_ROUTER_SCROLL_STATE][stateKey] = JSON.parse(storedValue);\n      }\n\n      if (false) {}\n    }\n  };\n\n  _proto.getStateKey = function getStateKey(location, key) {\n    var stateKeyBase = "" + STATE_KEY_PREFIX + location.pathname;\n    return key === null || typeof key === "undefined" ? stateKeyBase : stateKeyBase + "|" + key;\n  };\n\n  return SessionStorage;\n}();\n\nexports.SessionStorage = SessionStorage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE0Mi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixrQkFBa0I7QUFDbEIsc0JBQXNCO0FBQ3RCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixVQUFVLEtBQXFDLEVBQUUsRUFFMUM7O0FBRVA7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQSxVQUFVLEtBQXFDLEVBQUUsRUFFMUM7QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRCxzQkFBc0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hc3NhcGlyLmdpdGh1Yi5pby8uL25vZGVfbW9kdWxlcy9nYXRzYnktcmVhY3Qtcm91dGVyLXNjcm9sbC9zZXNzaW9uLXN0b3JhZ2UuanM/ZmUxNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuU2Vzc2lvblN0b3JhZ2UgPSB2b2lkIDA7XG52YXIgU1RBVEVfS0VZX1BSRUZJWCA9IFwiQEBzY3JvbGx8XCI7XG52YXIgR0FUU0JZX1JPVVRFUl9TQ1JPTExfU1RBVEUgPSBcIl9fX0dBVFNCWV9SRUFDVF9ST1VURVJfU0NST0xMXCI7XG5cbnZhciBTZXNzaW9uU3RvcmFnZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNlc3Npb25TdG9yYWdlKCkge31cblxuICB2YXIgX3Byb3RvID0gU2Vzc2lvblN0b3JhZ2UucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZWFkID0gZnVuY3Rpb24gcmVhZChsb2NhdGlvbiwga2V5KSB7XG4gICAgdmFyIHN0YXRlS2V5ID0gdGhpcy5nZXRTdGF0ZUtleShsb2NhdGlvbiwga2V5KTtcblxuICAgIHRyeSB7XG4gICAgICB2YXIgdmFsdWUgPSB3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShzdGF0ZUtleSk7XG4gICAgICByZXR1cm4gdmFsdWUgPyBKU09OLnBhcnNlKHZhbHVlKSA6IDA7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJbZ2F0c2J5LXJlYWN0LXJvdXRlci1zY3JvbGxdIFVuYWJsZSB0byBhY2Nlc3Mgc2Vzc2lvblN0b3JhZ2U7IHNlc3Npb25TdG9yYWdlIGlzIG5vdCBhdmFpbGFibGUuXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAod2luZG93ICYmIHdpbmRvd1tHQVRTQllfUk9VVEVSX1NDUk9MTF9TVEFURV0gJiYgd2luZG93W0dBVFNCWV9ST1VURVJfU0NST0xMX1NUQVRFXVtzdGF0ZUtleV0pIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvd1tHQVRTQllfUk9VVEVSX1NDUk9MTF9TVEFURV1bc3RhdGVLZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnNhdmUgPSBmdW5jdGlvbiBzYXZlKGxvY2F0aW9uLCBrZXksIHZhbHVlKSB7XG4gICAgdmFyIHN0YXRlS2V5ID0gdGhpcy5nZXRTdGF0ZUtleShsb2NhdGlvbiwga2V5KTtcbiAgICB2YXIgc3RvcmVkVmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG5cbiAgICB0cnkge1xuICAgICAgd2luZG93LnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oc3RhdGVLZXksIHN0b3JlZFZhbHVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAod2luZG93ICYmIHdpbmRvd1tHQVRTQllfUk9VVEVSX1NDUk9MTF9TVEFURV0pIHtcbiAgICAgICAgd2luZG93W0dBVFNCWV9ST1VURVJfU0NST0xMX1NUQVRFXVtzdGF0ZUtleV0gPSBKU09OLnBhcnNlKHN0b3JlZFZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvd1tHQVRTQllfUk9VVEVSX1NDUk9MTF9TVEFURV0gPSB7fTtcbiAgICAgICAgd2luZG93W0dBVFNCWV9ST1VURVJfU0NST0xMX1NUQVRFXVtzdGF0ZUtleV0gPSBKU09OLnBhcnNlKHN0b3JlZFZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJbZ2F0c2J5LXJlYWN0LXJvdXRlci1zY3JvbGxdIFVuYWJsZSB0byBzYXZlIHN0YXRlIGluIHNlc3Npb25TdG9yYWdlOyBzZXNzaW9uU3RvcmFnZSBpcyBub3QgYXZhaWxhYmxlLlwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmdldFN0YXRlS2V5ID0gZnVuY3Rpb24gZ2V0U3RhdGVLZXkobG9jYXRpb24sIGtleSkge1xuICAgIHZhciBzdGF0ZUtleUJhc2UgPSBcIlwiICsgU1RBVEVfS0VZX1BSRUZJWCArIGxvY2F0aW9uLnBhdGhuYW1lO1xuICAgIHJldHVybiBrZXkgPT09IG51bGwgfHwgdHlwZW9mIGtleSA9PT0gXCJ1bmRlZmluZWRcIiA/IHN0YXRlS2V5QmFzZSA6IHN0YXRlS2V5QmFzZSArIFwifFwiICsga2V5O1xuICB9O1xuXG4gIHJldHVybiBTZXNzaW9uU3RvcmFnZTtcbn0oKTtcblxuZXhwb3J0cy5TZXNzaW9uU3RvcmFnZSA9IFNlc3Npb25TdG9yYWdlOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1142\n')},4855:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\n\nexports.__esModule = true;\nexports.useScrollRestoration = useScrollRestoration;\n\nvar _scrollHandler = __webpack_require__(1432);\n\nvar _react = __webpack_require__(7294);\n\nvar _reachRouter = __webpack_require__(9499);\n\nfunction useScrollRestoration(identifier) {\n  var location = (0, _reachRouter.useLocation)();\n  var state = (0, _react.useContext)(_scrollHandler.ScrollContext);\n  var ref = (0, _react.useRef)(null);\n  (0, _react.useLayoutEffect)(function () {\n    if (ref.current) {\n      var position = state.read(location, identifier);\n      ref.current.scrollTo(0, position || 0);\n    }\n  }, [location.key]);\n  return {\n    ref: ref,\n    onScroll: function onScroll() {\n      if (ref.current) {\n        state.save(location, identifier, ref.current.scrollTop);\n      }\n    }\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDg1NS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixrQkFBa0I7QUFDbEIsNEJBQTRCOztBQUU1QixxQkFBcUIsbUJBQU8sQ0FBQyxJQUFrQjs7QUFFL0MsYUFBYSxtQkFBTyxDQUFDLElBQU87O0FBRTVCLG1CQUFtQixtQkFBTyxDQUFDLElBQXdCOztBQUVuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXNzYXBpci5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvZ2F0c2J5LXJlYWN0LXJvdXRlci1zY3JvbGwvdXNlLXNjcm9sbC1yZXN0b3JhdGlvbi5qcz9kZWVjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy51c2VTY3JvbGxSZXN0b3JhdGlvbiA9IHVzZVNjcm9sbFJlc3RvcmF0aW9uO1xuXG52YXIgX3Njcm9sbEhhbmRsZXIgPSByZXF1aXJlKFwiLi9zY3JvbGwtaGFuZGxlclwiKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcblxudmFyIF9yZWFjaFJvdXRlciA9IHJlcXVpcmUoXCJAZ2F0c2J5anMvcmVhY2gtcm91dGVyXCIpO1xuXG5mdW5jdGlvbiB1c2VTY3JvbGxSZXN0b3JhdGlvbihpZGVudGlmaWVyKSB7XG4gIHZhciBsb2NhdGlvbiA9ICgwLCBfcmVhY2hSb3V0ZXIudXNlTG9jYXRpb24pKCk7XG4gIHZhciBzdGF0ZSA9ICgwLCBfcmVhY3QudXNlQ29udGV4dCkoX3Njcm9sbEhhbmRsZXIuU2Nyb2xsQ29udGV4dCk7XG4gIHZhciByZWYgPSAoMCwgX3JlYWN0LnVzZVJlZikobnVsbCk7XG4gICgwLCBfcmVhY3QudXNlTGF5b3V0RWZmZWN0KShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHJlZi5jdXJyZW50KSB7XG4gICAgICB2YXIgcG9zaXRpb24gPSBzdGF0ZS5yZWFkKGxvY2F0aW9uLCBpZGVudGlmaWVyKTtcbiAgICAgIHJlZi5jdXJyZW50LnNjcm9sbFRvKDAsIHBvc2l0aW9uIHx8IDApO1xuICAgIH1cbiAgfSwgW2xvY2F0aW9uLmtleV0pO1xuICByZXR1cm4ge1xuICAgIHJlZjogcmVmLFxuICAgIG9uU2Nyb2xsOiBmdW5jdGlvbiBvblNjcm9sbCgpIHtcbiAgICAgIGlmIChyZWYuY3VycmVudCkge1xuICAgICAgICBzdGF0ZS5zYXZlKGxvY2F0aW9uLCBpZGVudGlmaWVyLCByZWYuY3VycmVudC5zY3JvbGxUb3ApO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4855\n")},4999:function(__unused_webpack_module,exports,__webpack_require__){eval('// prefer default export if available\nvar preferDefault=function preferDefault(m){return m&&m.default||m;};exports.components={"component---src-pages-404-js":function componentSrcPages404Js(){return Promise.all(/* import() | component---src-pages-404-js */[__webpack_require__.e(669), __webpack_require__.e(883)]).then(__webpack_require__.bind(__webpack_require__, 9616));},"component---src-pages-index-js":function componentSrcPagesIndexJs(){return Promise.all(/* import() | component---src-pages-index-js */[__webpack_require__.e(669), __webpack_require__.e(678)]).then(__webpack_require__.bind(__webpack_require__, 7704));},"component---src-pages-tags-js":function componentSrcPagesTagsJs(){return __webpack_require__.e(/* import() | component---src-pages-tags-js */ 159).then(__webpack_require__.bind(__webpack_require__, 1973));},"component---src-templates-blog-post-js":function componentSrcTemplatesBlogPostJs(){return Promise.all(/* import() | component---src-templates-blog-post-js */[__webpack_require__.e(669), __webpack_require__.e(989)]).then(__webpack_require__.bind(__webpack_require__, 9577));},"component---src-templates-tag-js":function componentSrcTemplatesTagJs(){return __webpack_require__.e(/* import() | component---src-templates-tag-js */ 969).then(__webpack_require__.bind(__webpack_require__, 5847));}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDk5OS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLEdBQU1BLENBQUFBLGFBQWEsQ0FBRyxRQUFoQkEsQ0FBQUEsYUFBZ0IsQ0FBQUMsQ0FBQyxRQUFLQSxDQUFBQSxDQUFDLEVBQUlBLENBQUMsQ0FBQ0MsT0FBUixFQUFvQkQsQ0FBeEIsRUFBdkIsQ0FFQUUsa0JBQUEsQ0FBcUIsQ0FDbkIsK0JBQWdDLHdDQUFNLDZLQUFOLEVBRGIsQ0FFbkIsaUNBQWtDLDBDQUFNLCtLQUFOLEVBRmYsQ0FHbkIsZ0NBQWlDLHlDQUFNLG9JQUFOLEVBSGQsQ0FJbkIseUNBQTBDLGlEQUFNLHVMQUFOLEVBSnZCLENBS25CLG1DQUFvQyw0Q0FBTSx1SUFBTixFQUxqQixDQUFyQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Fzc2FwaXIuZ2l0aHViLmlvLy4vLmNhY2hlL190aGlzX2lzX3ZpcnR1YWxfZnNfcGF0aF8vJHZpcnR1YWwvYXN5bmMtcmVxdWlyZXMuanM/MzZjMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBwcmVmZXIgZGVmYXVsdCBleHBvcnQgaWYgYXZhaWxhYmxlXG5jb25zdCBwcmVmZXJEZWZhdWx0ID0gbSA9PiAobSAmJiBtLmRlZmF1bHQpIHx8IG1cblxuZXhwb3J0cy5jb21wb25lbnRzID0ge1xuICBcImNvbXBvbmVudC0tLXNyYy1wYWdlcy00MDQtanNcIjogKCkgPT4gaW1wb3J0KFwiLi8uLi8uLi8uLi9zcmMvcGFnZXMvNDA0LmpzXCIgLyogd2VicGFja0NodW5rTmFtZTogXCJjb21wb25lbnQtLS1zcmMtcGFnZXMtNDA0LWpzXCIgKi8pLFxuICBcImNvbXBvbmVudC0tLXNyYy1wYWdlcy1pbmRleC1qc1wiOiAoKSA9PiBpbXBvcnQoXCIuLy4uLy4uLy4uL3NyYy9wYWdlcy9pbmRleC5qc1wiIC8qIHdlYnBhY2tDaHVua05hbWU6IFwiY29tcG9uZW50LS0tc3JjLXBhZ2VzLWluZGV4LWpzXCIgKi8pLFxuICBcImNvbXBvbmVudC0tLXNyYy1wYWdlcy10YWdzLWpzXCI6ICgpID0+IGltcG9ydChcIi4vLi4vLi4vLi4vc3JjL3BhZ2VzL3RhZ3MuanNcIiAvKiB3ZWJwYWNrQ2h1bmtOYW1lOiBcImNvbXBvbmVudC0tLXNyYy1wYWdlcy10YWdzLWpzXCIgKi8pLFxuICBcImNvbXBvbmVudC0tLXNyYy10ZW1wbGF0ZXMtYmxvZy1wb3N0LWpzXCI6ICgpID0+IGltcG9ydChcIi4vLi4vLi4vLi4vc3JjL3RlbXBsYXRlcy9ibG9nLXBvc3QuanNcIiAvKiB3ZWJwYWNrQ2h1bmtOYW1lOiBcImNvbXBvbmVudC0tLXNyYy10ZW1wbGF0ZXMtYmxvZy1wb3N0LWpzXCIgKi8pLFxuICBcImNvbXBvbmVudC0tLXNyYy10ZW1wbGF0ZXMtdGFnLWpzXCI6ICgpID0+IGltcG9ydChcIi4vLi4vLi4vLi4vc3JjL3RlbXBsYXRlcy90YWcuanNcIiAvKiB3ZWJwYWNrQ2h1bmtOYW1lOiBcImNvbXBvbmVudC0tLXNyYy10ZW1wbGF0ZXMtdGFnLWpzXCIgKi8pXG59XG5cbiJdLCJuYW1lcyI6WyJwcmVmZXJEZWZhdWx0IiwibSIsImRlZmF1bHQiLCJleHBvcnRzIiwiY29tcG9uZW50cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4999\n')},5182:function(module,__unused_webpack_exports,__webpack_require__){eval('module.exports=[{plugin:__webpack_require__(6988),options:{"plugins":[]}},{plugin:__webpack_require__(3207),options:{"plugins":[],"maxWidth":630,"linkImagesToOriginal":true,"showCaptions":false,"markdownCaptions":false,"sizeByPixelDensity":false,"backgroundColor":"white","quality":50,"withWebp":false,"tracedSVG":false,"loading":"lazy","decoding":"async","disableBgImageOnAlpha":false,"disableBgImage":false}},{plugin:__webpack_require__(4660),options:{"plugins":[],"trackingIds":["G-Y4SJQCS5F9"],"pluginConfig":{"respectDNT":true}}},{plugin:__webpack_require__(992),options:{"plugins":[],"name":"מחשבות על תכנות","short_name":"הבלוג של אסף ספיר","start_url":"/","background_color":"#ffffff","theme_color":"#663399","display":"minimal-ui","icon":"src/images/gatsby-icon.png","legacy":true,"theme_color_in_head":true,"cache_busting_mode":"query","crossOrigin":"anonymous","include_favicon":true,"cacheDigest":"4a9773549091c227cd2eb82ccd9c5e3a"}},{plugin:__webpack_require__(9037),options:{"plugins":[]}}];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTE4Mi5qcyIsIm1hcHBpbmdzIjoiQUFBQUEsTUFBTSxDQUFDQyxPQUFQLENBQWlCLENBQUMsQ0FDWkMsTUFBTSxDQUFFQyxtQkFBTyxDQUFDLElBQUQsQ0FESCxDQUVaQyxPQUFPLENBQUUsQ0FBQyxVQUFVLEVBQVgsQ0FGRyxDQUFELENBR1gsQ0FDQUYsTUFBTSxDQUFFQyxtQkFBTyxDQUFDLElBQUQsQ0FEZixDQUVBQyxPQUFPLENBQUUsQ0FBQyxVQUFVLEVBQVgsQ0FBYyxXQUFXLEdBQXpCLENBQTZCLHVCQUF1QixJQUFwRCxDQUF5RCxlQUFlLEtBQXhFLENBQThFLG1CQUFtQixLQUFqRyxDQUF1RyxxQkFBcUIsS0FBNUgsQ0FBa0ksa0JBQWtCLE9BQXBKLENBQTRKLFVBQVUsRUFBdEssQ0FBeUssV0FBVyxLQUFwTCxDQUEwTCxZQUFZLEtBQXRNLENBQTRNLFVBQVUsTUFBdE4sQ0FBNk4sV0FBVyxPQUF4TyxDQUFnUCx3QkFBd0IsS0FBeFEsQ0FBOFEsaUJBQWlCLEtBQS9SLENBRlQsQ0FIVyxDQU1YLENBQ0FGLE1BQU0sQ0FBRUMsbUJBQU8sQ0FBQyxJQUFELENBRGYsQ0FFQUMsT0FBTyxDQUFFLENBQUMsVUFBVSxFQUFYLENBQWMsY0FBYyxDQUFDLGNBQUQsQ0FBNUIsQ0FBNkMsZUFBZSxDQUFDLGFBQWEsSUFBZCxDQUE1RCxDQUZULENBTlcsQ0FTWCxDQUNBRixNQUFNLENBQUVDLG1CQUFPLENBQUMsR0FBRCxDQURmLENBRUFDLE9BQU8sQ0FBRSxDQUFDLFVBQVUsRUFBWCxDQUFjLE9BQU8saUJBQXJCLENBQXVDLGFBQWEsbUJBQXBELENBQXdFLFlBQVksR0FBcEYsQ0FBd0YsbUJBQW1CLFNBQTNHLENBQXFILGNBQWMsU0FBbkksQ0FBNkksVUFBVSxZQUF2SixDQUFvSyxPQUFPLDRCQUEzSyxDQUF3TSxTQUFTLElBQWpOLENBQXNOLHNCQUFzQixJQUE1TyxDQUFpUCxxQkFBcUIsT0FBdFEsQ0FBOFEsY0FBYyxXQUE1UixDQUF3UyxrQkFBa0IsSUFBMVQsQ0FBK1QsY0FBYyxrQ0FBN1UsQ0FGVCxDQVRXLENBWVgsQ0FDQUYsTUFBTSxDQUFFQyxtQkFBTyxDQUFDLElBQUQsQ0FEZixDQUVBQyxPQUFPLENBQUUsQ0FBQyxVQUFVLEVBQVgsQ0FGVCxDQVpXLENBQWpCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXNzYXBpci5naXRodWIuaW8vLi8uY2FjaGUvYXBpLXJ1bm5lci1icm93c2VyLXBsdWdpbnMuanM/MmRlMiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFt7XG4gICAgICBwbHVnaW46IHJlcXVpcmUoJy4uL25vZGVfbW9kdWxlcy9nYXRzYnktcGx1Z2luLWltYWdlL2dhdHNieS1icm93c2VyLmpzJyksXG4gICAgICBvcHRpb25zOiB7XCJwbHVnaW5zXCI6W119LFxuICAgIH0se1xuICAgICAgcGx1Z2luOiByZXF1aXJlKCcuLi9ub2RlX21vZHVsZXMvZ2F0c2J5LXJlbWFyay1pbWFnZXMvZ2F0c2J5LWJyb3dzZXIuanMnKSxcbiAgICAgIG9wdGlvbnM6IHtcInBsdWdpbnNcIjpbXSxcIm1heFdpZHRoXCI6NjMwLFwibGlua0ltYWdlc1RvT3JpZ2luYWxcIjp0cnVlLFwic2hvd0NhcHRpb25zXCI6ZmFsc2UsXCJtYXJrZG93bkNhcHRpb25zXCI6ZmFsc2UsXCJzaXplQnlQaXhlbERlbnNpdHlcIjpmYWxzZSxcImJhY2tncm91bmRDb2xvclwiOlwid2hpdGVcIixcInF1YWxpdHlcIjo1MCxcIndpdGhXZWJwXCI6ZmFsc2UsXCJ0cmFjZWRTVkdcIjpmYWxzZSxcImxvYWRpbmdcIjpcImxhenlcIixcImRlY29kaW5nXCI6XCJhc3luY1wiLFwiZGlzYWJsZUJnSW1hZ2VPbkFscGhhXCI6ZmFsc2UsXCJkaXNhYmxlQmdJbWFnZVwiOmZhbHNlfSxcbiAgICB9LHtcbiAgICAgIHBsdWdpbjogcmVxdWlyZSgnLi4vbm9kZV9tb2R1bGVzL2dhdHNieS1wbHVnaW4tZ29vZ2xlLWd0YWcvZ2F0c2J5LWJyb3dzZXIuanMnKSxcbiAgICAgIG9wdGlvbnM6IHtcInBsdWdpbnNcIjpbXSxcInRyYWNraW5nSWRzXCI6W1wiRy1ZNFNKUUNTNUY5XCJdLFwicGx1Z2luQ29uZmlnXCI6e1wicmVzcGVjdEROVFwiOnRydWV9fSxcbiAgICB9LHtcbiAgICAgIHBsdWdpbjogcmVxdWlyZSgnLi4vbm9kZV9tb2R1bGVzL2dhdHNieS1wbHVnaW4tbWFuaWZlc3QvZ2F0c2J5LWJyb3dzZXIuanMnKSxcbiAgICAgIG9wdGlvbnM6IHtcInBsdWdpbnNcIjpbXSxcIm5hbWVcIjpcItee15fXqdeR15XXqiDXotecINeq15vXoNeV16pcIixcInNob3J0X25hbWVcIjpcIteU15HXnNeV15Ig16nXnCDXkNeh16Mg16HXpNeZ16hcIixcInN0YXJ0X3VybFwiOlwiL1wiLFwiYmFja2dyb3VuZF9jb2xvclwiOlwiI2ZmZmZmZlwiLFwidGhlbWVfY29sb3JcIjpcIiM2NjMzOTlcIixcImRpc3BsYXlcIjpcIm1pbmltYWwtdWlcIixcImljb25cIjpcInNyYy9pbWFnZXMvZ2F0c2J5LWljb24ucG5nXCIsXCJsZWdhY3lcIjp0cnVlLFwidGhlbWVfY29sb3JfaW5faGVhZFwiOnRydWUsXCJjYWNoZV9idXN0aW5nX21vZGVcIjpcInF1ZXJ5XCIsXCJjcm9zc09yaWdpblwiOlwiYW5vbnltb3VzXCIsXCJpbmNsdWRlX2Zhdmljb25cIjp0cnVlLFwiY2FjaGVEaWdlc3RcIjpcIjRhOTc3MzU0OTA5MWMyMjdjZDJlYjgyY2NkOWM1ZTNhXCJ9LFxuICAgIH0se1xuICAgICAgcGx1Z2luOiByZXF1aXJlKCcuLi9nYXRzYnktYnJvd3Nlci5qcycpLFxuICAgICAgb3B0aW9uczoge1wicGx1Z2luc1wiOltdfSxcbiAgICB9XVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJwbHVnaW4iLCJyZXF1aXJlIiwib3B0aW9ucyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5182\n')},7343:function(__unused_webpack_module,exports,__webpack_require__){eval('var plugins=__webpack_require__(5182);var _require$publicLoader=__webpack_require__(8741)/* .publicLoader */ .jN,getResourceURLsForPathname=_require$publicLoader.getResourceURLsForPathname,loadPage=_require$publicLoader.loadPage,loadPageSync=_require$publicLoader.loadPageSync;exports.h=function(api,args,defaultReturn,argTransform){if(args===void 0){args={};}// Hooks for gatsby-cypress\'s API handler\nif(undefined){if(window.___apiHandler){window.___apiHandler(api);}else if(window.___resolvedAPIs){window.___resolvedAPIs.push(api);}else{window.___resolvedAPIs=[api];}}var results=plugins.map(function(plugin){if(!plugin.plugin[api]){return undefined;}args.getResourceURLsForPathname=getResourceURLsForPathname;args.loadPage=loadPage;args.loadPageSync=loadPageSync;var result=plugin.plugin[api](args,plugin.options);if(result&&argTransform){args=argTransform({args:args,result:result,plugin:plugin});}return result;});// Filter out undefined results.\nresults=results.filter(function(result){return typeof result!=="undefined";});if(results.length>0){return results;}else if(defaultReturn){return[defaultReturn];}else{return[];}};exports.I=function(api,args,defaultReturn){return plugins.reduce(function(previous,next){return next.plugin[api]?previous.then(function(){return next.plugin[api](args,next.options);}):previous;},Promise.resolve());};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzM0My5qcyIsIm1hcHBpbmdzIjoiQUFBQSxHQUFNQSxDQUFBQSxPQUFPLENBQUdDLG1CQUFPLENBQUMsS0FBeEIsQ0FDQSwwQkFJSUEsZ0RBSkosQ0FDRUUsMEJBREYsdUJBQ0VBLDBCQURGLENBRUVDLFFBRkYsdUJBRUVBLFFBRkYsQ0FHRUMsWUFIRix1QkFHRUEsWUFIRixDQU1BQyxTQUFBLENBQW9CLFNBQUNFLEdBQUQsQ0FBTUMsSUFBTixDQUFpQkMsYUFBakIsQ0FBZ0NDLFlBQWhDLENBQWlELElBQTNDRixJQUEyQyxXQUEzQ0EsSUFBMkMsQ0FBcEMsRUFBb0MsRUFDbkU7QUFDQSxHQUFJRyxTQUFKLENBQWlDLENBQy9CLEdBQUlHLE1BQU0sQ0FBQ0MsYUFBWCxDQUEwQixDQUN4QkQsTUFBTSxDQUFDQyxhQUFQLENBQXFCUixHQUFyQixFQUNELENBRkQsSUFFTyxJQUFJTyxNQUFNLENBQUNFLGVBQVgsQ0FBNEIsQ0FDakNGLE1BQU0sQ0FBQ0UsZUFBUCxDQUF1QkMsSUFBdkIsQ0FBNEJWLEdBQTVCLEVBQ0QsQ0FGTSxJQUVBLENBQ0xPLE1BQU0sQ0FBQ0UsZUFBUCxDQUF5QixDQUFDVCxHQUFELENBQXpCLENBQ0QsQ0FDRixDQUVELEdBQUlXLENBQUFBLE9BQU8sQ0FBR25CLE9BQU8sQ0FBQ29CLEdBQVIsQ0FBWSxTQUFBQyxNQUFNLENBQUksQ0FDbEMsR0FBSSxDQUFDQSxNQUFNLENBQUNBLE1BQVAsQ0FBY2IsR0FBZCxDQUFMLENBQXlCLENBQ3ZCLE1BQU9jLENBQUFBLFNBQVAsQ0FDRCxDQUVEYixJQUFJLENBQUNOLDBCQUFMLENBQWtDQSwwQkFBbEMsQ0FDQU0sSUFBSSxDQUFDTCxRQUFMLENBQWdCQSxRQUFoQixDQUNBSyxJQUFJLENBQUNKLFlBQUwsQ0FBb0JBLFlBQXBCLENBRUEsR0FBTWtCLENBQUFBLE1BQU0sQ0FBR0YsTUFBTSxDQUFDQSxNQUFQLENBQWNiLEdBQWQsRUFBbUJDLElBQW5CLENBQXlCWSxNQUFNLENBQUNHLE9BQWhDLENBQWYsQ0FDQSxHQUFJRCxNQUFNLEVBQUlaLFlBQWQsQ0FBNEIsQ0FDMUJGLElBQUksQ0FBR0UsWUFBWSxDQUFDLENBQUVGLElBQUksQ0FBSkEsSUFBRixDQUFRYyxNQUFNLENBQU5BLE1BQVIsQ0FBZ0JGLE1BQU0sQ0FBTkEsTUFBaEIsQ0FBRCxDQUFuQixDQUNELENBQ0QsTUFBT0UsQ0FBQUEsTUFBUCxDQUNELENBZGEsQ0FBZCxDQWdCQTtBQUNBSixPQUFPLENBQUdBLE9BQU8sQ0FBQ00sTUFBUixDQUFlLFNBQUFGLE1BQU0sUUFBSSxPQUFPQSxDQUFBQSxNQUFQLGNBQUosRUFBckIsQ0FBVixDQUVBLEdBQUlKLE9BQU8sQ0FBQ08sTUFBUixDQUFpQixDQUFyQixDQUF3QixDQUN0QixNQUFPUCxDQUFBQSxPQUFQLENBQ0QsQ0FGRCxJQUVPLElBQUlULGFBQUosQ0FBbUIsQ0FDeEIsTUFBTyxDQUFDQSxhQUFELENBQVAsQ0FDRCxDQUZNLElBRUEsQ0FDTCxNQUFPLEVBQVAsQ0FDRCxDQUNGLENBdENELENBd0NBSixTQUFBLENBQXlCLFNBQUNFLEdBQUQsQ0FBTUMsSUFBTixDQUFZQyxhQUFaLFFBQ3ZCVixDQUFBQSxPQUFPLENBQUM0QixNQUFSLENBQ0UsU0FBQ0MsUUFBRCxDQUFXQyxJQUFYLFFBQ0VBLENBQUFBLElBQUksQ0FBQ1QsTUFBTCxDQUFZYixHQUFaLEVBQ0lxQixRQUFRLENBQUNFLElBQVQsQ0FBYyxpQkFBTUQsQ0FBQUEsSUFBSSxDQUFDVCxNQUFMLENBQVliLEdBQVosRUFBaUJDLElBQWpCLENBQXVCcUIsSUFBSSxDQUFDTixPQUE1QixDQUFOLEVBQWQsQ0FESixDQUVJSyxRQUhOLEVBREYsQ0FLRUcsT0FBTyxDQUFDQyxPQUFSLEVBTEYsQ0FEdUIsRUFBekIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hc3NhcGlyLmdpdGh1Yi5pby8uLy5jYWNoZS9hcGktcnVubmVyLWJyb3dzZXIuanM/YzZkYiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBwbHVnaW5zID0gcmVxdWlyZShgLi9hcGktcnVubmVyLWJyb3dzZXItcGx1Z2luc2ApXG5jb25zdCB7XG4gIGdldFJlc291cmNlVVJMc0ZvclBhdGhuYW1lLFxuICBsb2FkUGFnZSxcbiAgbG9hZFBhZ2VTeW5jLFxufSA9IHJlcXVpcmUoYC4vbG9hZGVyYCkucHVibGljTG9hZGVyXG5cbmV4cG9ydHMuYXBpUnVubmVyID0gKGFwaSwgYXJncyA9IHt9LCBkZWZhdWx0UmV0dXJuLCBhcmdUcmFuc2Zvcm0pID0+IHtcbiAgLy8gSG9va3MgZm9yIGdhdHNieS1jeXByZXNzJ3MgQVBJIGhhbmRsZXJcbiAgaWYgKHByb2Nlc3MuZW52LkNZUFJFU1NfU1VQUE9SVCkge1xuICAgIGlmICh3aW5kb3cuX19fYXBpSGFuZGxlcikge1xuICAgICAgd2luZG93Ll9fX2FwaUhhbmRsZXIoYXBpKVxuICAgIH0gZWxzZSBpZiAod2luZG93Ll9fX3Jlc29sdmVkQVBJcykge1xuICAgICAgd2luZG93Ll9fX3Jlc29sdmVkQVBJcy5wdXNoKGFwaSlcbiAgICB9IGVsc2Uge1xuICAgICAgd2luZG93Ll9fX3Jlc29sdmVkQVBJcyA9IFthcGldXG4gICAgfVxuICB9XG5cbiAgbGV0IHJlc3VsdHMgPSBwbHVnaW5zLm1hcChwbHVnaW4gPT4ge1xuICAgIGlmICghcGx1Z2luLnBsdWdpblthcGldKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgYXJncy5nZXRSZXNvdXJjZVVSTHNGb3JQYXRobmFtZSA9IGdldFJlc291cmNlVVJMc0ZvclBhdGhuYW1lXG4gICAgYXJncy5sb2FkUGFnZSA9IGxvYWRQYWdlXG4gICAgYXJncy5sb2FkUGFnZVN5bmMgPSBsb2FkUGFnZVN5bmNcblxuICAgIGNvbnN0IHJlc3VsdCA9IHBsdWdpbi5wbHVnaW5bYXBpXShhcmdzLCBwbHVnaW4ub3B0aW9ucylcbiAgICBpZiAocmVzdWx0ICYmIGFyZ1RyYW5zZm9ybSkge1xuICAgICAgYXJncyA9IGFyZ1RyYW5zZm9ybSh7IGFyZ3MsIHJlc3VsdCwgcGx1Z2luIH0pXG4gICAgfVxuICAgIHJldHVybiByZXN1bHRcbiAgfSlcblxuICAvLyBGaWx0ZXIgb3V0IHVuZGVmaW5lZCByZXN1bHRzLlxuICByZXN1bHRzID0gcmVzdWx0cy5maWx0ZXIocmVzdWx0ID0+IHR5cGVvZiByZXN1bHQgIT09IGB1bmRlZmluZWRgKVxuXG4gIGlmIChyZXN1bHRzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcmVzdWx0c1xuICB9IGVsc2UgaWYgKGRlZmF1bHRSZXR1cm4pIHtcbiAgICByZXR1cm4gW2RlZmF1bHRSZXR1cm5dXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFtdXG4gIH1cbn1cblxuZXhwb3J0cy5hcGlSdW5uZXJBc3luYyA9IChhcGksIGFyZ3MsIGRlZmF1bHRSZXR1cm4pID0+XG4gIHBsdWdpbnMucmVkdWNlKFxuICAgIChwcmV2aW91cywgbmV4dCkgPT5cbiAgICAgIG5leHQucGx1Z2luW2FwaV1cbiAgICAgICAgPyBwcmV2aW91cy50aGVuKCgpID0+IG5leHQucGx1Z2luW2FwaV0oYXJncywgbmV4dC5vcHRpb25zKSlcbiAgICAgICAgOiBwcmV2aW91cyxcbiAgICBQcm9taXNlLnJlc29sdmUoKVxuICApXG4iXSwibmFtZXMiOlsicGx1Z2lucyIsInJlcXVpcmUiLCJwdWJsaWNMb2FkZXIiLCJnZXRSZXNvdXJjZVVSTHNGb3JQYXRobmFtZSIsImxvYWRQYWdlIiwibG9hZFBhZ2VTeW5jIiwiZXhwb3J0cyIsImFwaVJ1bm5lciIsImFwaSIsImFyZ3MiLCJkZWZhdWx0UmV0dXJuIiwiYXJnVHJhbnNmb3JtIiwicHJvY2VzcyIsImVudiIsIkNZUFJFU1NfU1VQUE9SVCIsIndpbmRvdyIsIl9fX2FwaUhhbmRsZXIiLCJfX19yZXNvbHZlZEFQSXMiLCJwdXNoIiwicmVzdWx0cyIsIm1hcCIsInBsdWdpbiIsInVuZGVmaW5lZCIsInJlc3VsdCIsIm9wdGlvbnMiLCJmaWx0ZXIiLCJsZW5ndGgiLCJhcGlSdW5uZXJBc3luYyIsInJlZHVjZSIsInByZXZpb3VzIiwibmV4dCIsInRoZW4iLCJQcm9taXNlIiwicmVzb2x2ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7343\n')},8110:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "Z": function() { return /* binding */ _cache_emitter; }\n});\n\n;// CONCATENATED MODULE: ./node_modules/mitt/dist/mitt.es.js\n//      \n// An event handler can take an optional event argument\n// and should not return a value\n                                          \n                                                               \n\n// An array of all currently registered event handlers for a type\n                                            \n                                                            \n// A map of event types and their corresponding event handlers.\n                        \n                                 \n                                   \n  \n\n/** Mitt: Tiny (~200b) functional event emitter / pubsub.\n *  @name mitt\n *  @returns {Mitt}\n */\nfunction mitt(all                 ) {\n\tall = all || Object.create(null);\n\n\treturn {\n\t\t/**\n\t\t * Register an event handler for the given type.\n\t\t *\n\t\t * @param  {String} type\tType of event to listen for, or `"*"` for all events\n\t\t * @param  {Function} handler Function to call in response to given event\n\t\t * @memberOf mitt\n\t\t */\n\t\ton: function on(type        , handler              ) {\n\t\t\t(all[type] || (all[type] = [])).push(handler);\n\t\t},\n\n\t\t/**\n\t\t * Remove an event handler for the given type.\n\t\t *\n\t\t * @param  {String} type\tType of event to unregister `handler` from, or `"*"`\n\t\t * @param  {Function} handler Handler function to remove\n\t\t * @memberOf mitt\n\t\t */\n\t\toff: function off(type        , handler              ) {\n\t\t\tif (all[type]) {\n\t\t\t\tall[type].splice(all[type].indexOf(handler) >>> 0, 1);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Invoke all handlers for the given type.\n\t\t * If present, `"*"` handlers are invoked after type-matched handlers.\n\t\t *\n\t\t * @param {String} type  The event type to invoke\n\t\t * @param {Any} [evt]  Any value (object is recommended and powerful), passed to each handler\n\t\t * @memberOf mitt\n\t\t */\n\t\temit: function emit(type        , evt     ) {\n\t\t\t(all[type] || []).slice().map(function (handler) { handler(evt); });\n\t\t\t(all[\'*\'] || []).slice().map(function (handler) { handler(type, evt); });\n\t\t}\n\t};\n}\n\n/* harmony default export */ var mitt_es = (mitt);\n//# sourceMappingURL=mitt.es.js.map\n\n;// CONCATENATED MODULE: ./.cache/emitter.js\nvar emitter=mitt_es();/* harmony default export */ var _cache_emitter = (emitter);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODExMC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCLGNBQWMsVUFBVTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCLGNBQWMsVUFBVTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsZUFBZTtBQUNyRSxxREFBcUQscUJBQXFCO0FBQzFFO0FBQ0E7QUFDQTs7QUFFQSw0Q0FBZSxJQUFJLEVBQUM7QUFDcEI7OztBQzdEQSxHQUFNQyxDQUFBQSxPQUFPLENBQUdELE9BQUksRUFBcEIsQ0FDQSxtREFBZUMsT0FBZiIsInNvdXJjZXMiOlsid2VicGFjazovL2Fzc2FwaXIuZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzL21pdHQvZGlzdC9taXR0LmVzLmpzPzE0YjciLCJ3ZWJwYWNrOi8vYXNzYXBpci5naXRodWIuaW8vLi8uY2FjaGUvZW1pdHRlci5qcz9lNzJhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vICAgICAgXG4vLyBBbiBldmVudCBoYW5kbGVyIGNhbiB0YWtlIGFuIG9wdGlvbmFsIGV2ZW50IGFyZ3VtZW50XG4vLyBhbmQgc2hvdWxkIG5vdCByZXR1cm4gYSB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcblxuLy8gQW4gYXJyYXkgb2YgYWxsIGN1cnJlbnRseSByZWdpc3RlcmVkIGV2ZW50IGhhbmRsZXJzIGZvciBhIHR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbi8vIEEgbWFwIG9mIGV2ZW50IHR5cGVzIGFuZCB0aGVpciBjb3JyZXNwb25kaW5nIGV2ZW50IGhhbmRsZXJzLlxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIFxuXG4vKiogTWl0dDogVGlueSAofjIwMGIpIGZ1bmN0aW9uYWwgZXZlbnQgZW1pdHRlciAvIHB1YnN1Yi5cbiAqICBAbmFtZSBtaXR0XG4gKiAgQHJldHVybnMge01pdHR9XG4gKi9cbmZ1bmN0aW9uIG1pdHQoYWxsICAgICAgICAgICAgICAgICApIHtcblx0YWxsID0gYWxsIHx8IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cblx0cmV0dXJuIHtcblx0XHQvKipcblx0XHQgKiBSZWdpc3RlciBhbiBldmVudCBoYW5kbGVyIGZvciB0aGUgZ2l2ZW4gdHlwZS5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSAge1N0cmluZ30gdHlwZVx0VHlwZSBvZiBldmVudCB0byBsaXN0ZW4gZm9yLCBvciBgXCIqXCJgIGZvciBhbGwgZXZlbnRzXG5cdFx0ICogQHBhcmFtICB7RnVuY3Rpb259IGhhbmRsZXIgRnVuY3Rpb24gdG8gY2FsbCBpbiByZXNwb25zZSB0byBnaXZlbiBldmVudFxuXHRcdCAqIEBtZW1iZXJPZiBtaXR0XG5cdFx0ICovXG5cdFx0b246IGZ1bmN0aW9uIG9uKHR5cGUgICAgICAgICwgaGFuZGxlciAgICAgICAgICAgICAgKSB7XG5cdFx0XHQoYWxsW3R5cGVdIHx8IChhbGxbdHlwZV0gPSBbXSkpLnB1c2goaGFuZGxlcik7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJlbW92ZSBhbiBldmVudCBoYW5kbGVyIGZvciB0aGUgZ2l2ZW4gdHlwZS5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSAge1N0cmluZ30gdHlwZVx0VHlwZSBvZiBldmVudCB0byB1bnJlZ2lzdGVyIGBoYW5kbGVyYCBmcm9tLCBvciBgXCIqXCJgXG5cdFx0ICogQHBhcmFtICB7RnVuY3Rpb259IGhhbmRsZXIgSGFuZGxlciBmdW5jdGlvbiB0byByZW1vdmVcblx0XHQgKiBAbWVtYmVyT2YgbWl0dFxuXHRcdCAqL1xuXHRcdG9mZjogZnVuY3Rpb24gb2ZmKHR5cGUgICAgICAgICwgaGFuZGxlciAgICAgICAgICAgICAgKSB7XG5cdFx0XHRpZiAoYWxsW3R5cGVdKSB7XG5cdFx0XHRcdGFsbFt0eXBlXS5zcGxpY2UoYWxsW3R5cGVdLmluZGV4T2YoaGFuZGxlcikgPj4+IDAsIDEpO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBJbnZva2UgYWxsIGhhbmRsZXJzIGZvciB0aGUgZ2l2ZW4gdHlwZS5cblx0XHQgKiBJZiBwcmVzZW50LCBgXCIqXCJgIGhhbmRsZXJzIGFyZSBpbnZva2VkIGFmdGVyIHR5cGUtbWF0Y2hlZCBoYW5kbGVycy5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlICBUaGUgZXZlbnQgdHlwZSB0byBpbnZva2Vcblx0XHQgKiBAcGFyYW0ge0FueX0gW2V2dF0gIEFueSB2YWx1ZSAob2JqZWN0IGlzIHJlY29tbWVuZGVkIGFuZCBwb3dlcmZ1bCksIHBhc3NlZCB0byBlYWNoIGhhbmRsZXJcblx0XHQgKiBAbWVtYmVyT2YgbWl0dFxuXHRcdCAqL1xuXHRcdGVtaXQ6IGZ1bmN0aW9uIGVtaXQodHlwZSAgICAgICAgLCBldnQgICAgICkge1xuXHRcdFx0KGFsbFt0eXBlXSB8fCBbXSkuc2xpY2UoKS5tYXAoZnVuY3Rpb24gKGhhbmRsZXIpIHsgaGFuZGxlcihldnQpOyB9KTtcblx0XHRcdChhbGxbJyonXSB8fCBbXSkuc2xpY2UoKS5tYXAoZnVuY3Rpb24gKGhhbmRsZXIpIHsgaGFuZGxlcih0eXBlLCBldnQpOyB9KTtcblx0XHR9XG5cdH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1pdHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1taXR0LmVzLmpzLm1hcFxuIiwiaW1wb3J0IG1pdHQgZnJvbSBcIm1pdHRcIlxuXG5jb25zdCBlbWl0dGVyID0gbWl0dCgpXG5leHBvcnQgZGVmYXVsdCBlbWl0dGVyXG4iXSwibmFtZXMiOlsibWl0dCIsImVtaXR0ZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8110\n')},2257:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "UD": function() { return /* binding */ findMatchPath; },\n  "Cj": function() { return /* binding */ findPath; },\n  "GA": function() { return /* binding */ grabMatchParams; },\n  "DS": function() { return /* binding */ setMatchPaths; }\n});\n\n// UNUSED EXPORTS: cleanPath\n\n// EXTERNAL MODULE: ./node_modules/@gatsbyjs/reach-router/lib/utils.js\nvar utils = __webpack_require__(2098);\n// EXTERNAL MODULE: ./.cache/strip-prefix.js\nvar strip_prefix = __webpack_require__(1578);\n;// CONCATENATED MODULE: ./.cache/normalize-page-path.js\n/* harmony default export */ var normalize_page_path = (function(path){if(path===undefined){return path;}if(path==="/"){return"/";}if(path.charAt(path.length-1)==="/"){return path.slice(0,-1);}return path;});\n// EXTERNAL MODULE: ./.cache/redirect-utils.js + 1 modules\nvar redirect_utils = __webpack_require__(4553);\n;// CONCATENATED MODULE: ./.cache/find-path.js\nvar pathCache=new Map();var matchPaths=[];var trimPathname=function trimPathname(rawPathname){var pathname=decodeURIComponent(rawPathname);// Remove the pathPrefix from the pathname.\nvar trimmedPathname=(0,strip_prefix/* default */.Z)(pathname,decodeURIComponent(""))// Remove any hashfragment\n.split("#")[0]// Remove search query\n.split("?")[0];return trimmedPathname;};function absolutify(path){// If it\'s already absolute, return as-is\nif(path.startsWith("/")||path.startsWith("https://")||path.startsWith("http://")){return path;}// Calculate path relative to current location, adding a trailing slash to\n// match behavior of @reach/router\nreturn new URL(path,window.location.href+(window.location.href.endsWith("/")?"":"/")).pathname;}/**\n * Set list of matchPaths\n *\n * @param {Array<{path: string, matchPath: string}>} value collection of matchPaths\n */var setMatchPaths=function setMatchPaths(value){matchPaths=value;};/**\n * Return a matchpath url\n * if `match-paths.json` contains `{ "/foo*": "/page1", ...}`, then\n * `/foo?bar=far` => `/page1`\n *\n * @param {string} rawPathname A raw pathname\n * @return {string|null}\n */var findMatchPath=function findMatchPath(rawPathname){var trimmedPathname=cleanPath(rawPathname);var pickPaths=matchPaths.map(function(_ref){var path=_ref.path,matchPath=_ref.matchPath;return{path:matchPath,originalPath:path};});var path=(0,utils.pick)(pickPaths,trimmedPathname);if(path){return normalize_page_path(path.route.originalPath);}return null;};/**\n * Return a matchpath params from reach/router rules\n * if `match-paths.json` contains `{ ":bar/*foo" }`, and the path is /baz/zaz/zoo\n * then it returns\n *  { bar: baz, foo: zaz/zoo }\n *\n * @param {string} rawPathname A raw pathname\n * @return {object}\n */var grabMatchParams=function grabMatchParams(rawPathname){var trimmedPathname=cleanPath(rawPathname);var pickPaths=matchPaths.map(function(_ref2){var path=_ref2.path,matchPath=_ref2.matchPath;return{path:matchPath,originalPath:path};});var path=(0,utils.pick)(pickPaths,trimmedPathname);if(path){return path.params;}return{};};// Given a raw URL path, returns the cleaned version of it (trim off\n// `#` and query params), or if it matches an entry in\n// `match-paths.json`, its matched path is returned\n//\n// E.g. `/foo?bar=far` => `/foo`\n//\n// Or if `match-paths.json` contains `{ "/foo*": "/page1", ...}`, then\n// `/foo?bar=far` => `/page1`\nvar findPath=function findPath(rawPathname){var trimmedPathname=trimPathname(absolutify(rawPathname));if(pathCache.has(trimmedPathname)){return pathCache.get(trimmedPathname);}var redirect=(0,redirect_utils/* maybeGetBrowserRedirect */.J)(rawPathname);if(redirect){return findPath(redirect.toPath);}var foundPath=findMatchPath(trimmedPathname);if(!foundPath){foundPath=cleanPath(rawPathname);}pathCache.set(trimmedPathname,foundPath);return foundPath;};/**\n * Clean a url and converts /index.html => /\n * E.g. `/foo?bar=far` => `/foo`\n *\n * @param {string} rawPathname A raw pathname\n * @return {string}\n */var cleanPath=function cleanPath(rawPathname){var trimmedPathname=trimPathname(absolutify(rawPathname));var foundPath=trimmedPathname;if(foundPath==="/index.html"){foundPath="/";}foundPath=normalize_page_path(foundPath);return foundPath;};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2257\n')},5444:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Link": function() { return /* reexport safe */ gatsby_link__WEBPACK_IMPORTED_MODULE_1__.ZP; },\n/* harmony export */   "withAssetPrefix": function() { return /* reexport safe */ gatsby_link__WEBPACK_IMPORTED_MODULE_1__.mc; },\n/* harmony export */   "withPrefix": function() { return /* reexport safe */ gatsby_link__WEBPACK_IMPORTED_MODULE_1__.dq; },\n/* harmony export */   "graphql": function() { return /* binding */ graphql; },\n/* harmony export */   "parsePath": function() { return /* reexport safe */ gatsby_link__WEBPACK_IMPORTED_MODULE_1__.cP; },\n/* harmony export */   "navigate": function() { return /* reexport safe */ gatsby_link__WEBPACK_IMPORTED_MODULE_1__.c4; },\n/* harmony export */   "useScrollRestoration": function() { return /* reexport safe */ gatsby_react_router_scroll__WEBPACK_IMPORTED_MODULE_2__.p2; },\n/* harmony export */   "StaticQueryContext": function() { return /* binding */ StaticQueryContext; },\n/* harmony export */   "StaticQuery": function() { return /* binding */ StaticQuery; },\n/* harmony export */   "PageRenderer": function() { return /* reexport default from dynamic */ _public_page_renderer__WEBPACK_IMPORTED_MODULE_3___default.a; },\n/* harmony export */   "useStaticQuery": function() { return /* binding */ useStaticQuery; },\n/* harmony export */   "prefetchPathname": function() { return /* binding */ prefetchPathname; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var gatsby_link__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8037);\n/* harmony import */ var gatsby_react_router_scroll__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9679);\n/* harmony import */ var _public_page_renderer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(861);\n/* harmony import */ var _public_page_renderer__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_public_page_renderer__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _loader__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(8741);\nvar prefetchPathname=_loader__WEBPACK_IMPORTED_MODULE_4__/* .default.enqueue */ .ZP.enqueue;var StaticQueryContext=/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createContext({});function StaticQueryDataRenderer(_ref){var staticQueryData=_ref.staticQueryData,data=_ref.data,query=_ref.query,render=_ref.render;var finalData=data?data.data:staticQueryData[query]&&staticQueryData[query].data;return/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,finalData&&render(finalData),!finalData&&/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,"Loading (StaticQuery)"));}var StaticQuery=function StaticQuery(props){var data=props.data,query=props.query,render=props.render,children=props.children;return/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(StaticQueryContext.Consumer,null,function(staticQueryData){return/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(StaticQueryDataRenderer,{data:data,query:query,render:render||children,staticQueryData:staticQueryData});});};var useStaticQuery=function useStaticQuery(query){var _context$query;if(typeof react__WEBPACK_IMPORTED_MODULE_0__.useContext!=="function"&&"production"==="development"){throw new Error("You\'re likely using a version of React that doesn\'t support Hooks\\n"+"Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.");}var context=react__WEBPACK_IMPORTED_MODULE_0__.useContext(StaticQueryContext);// query is a stringified number like `3303882` when wrapped with graphql, If a user forgets\n// to wrap the query in a grqphql, then casting it to a Number results in `NaN` allowing us to\n// catch the misuse of the API and give proper direction\nif(isNaN(Number(query))){throw new Error("useStaticQuery was called with a string but expects to be called using `graphql`. Try this:\\n\\nimport { useStaticQuery, graphql } from \'gatsby\';\\n\\nuseStaticQuery(graphql`"+query+"`);\\n");}if((_context$query=context[query])!==null&&_context$query!==void 0&&_context$query.data){return context[query].data;}else{throw new Error("The result of this StaticQuery could not be fetched.\\n\\n"+"This is likely a bug in Gatsby and if refreshing the page does not fix it, "+"please open an issue in https://github.com/gatsbyjs/gatsby/issues");}};function graphql(){throw new Error("It appears like Gatsby is misconfigured. Gatsby related `graphql` calls "+"are supposed to only be evaluated at compile time, and then compiled away. "+"Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n"+"Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.");}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTQ0NC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFlQSxHQUFNWSxDQUFBQSxnQkFBZ0IsQ0FBR0Qsc0VBQXpCLENBRUEsR0FBTUcsQ0FBQUEsa0JBQWtCLGNBQUdkLGdEQUFBLENBQW9CLEVBQXBCLENBQTNCLENBRUEsUUFBU2dCLENBQUFBLHVCQUFULE1BQTJFLElBQXhDQyxDQUFBQSxlQUF3QyxNQUF4Q0EsZUFBd0MsQ0FBdkJDLElBQXVCLE1BQXZCQSxJQUF1QixDQUFqQkMsS0FBaUIsTUFBakJBLEtBQWlCLENBQVZDLE1BQVUsTUFBVkEsTUFBVSxDQUN6RSxHQUFNQyxDQUFBQSxTQUFTLENBQUdILElBQUksQ0FDbEJBLElBQUksQ0FBQ0EsSUFEYSxDQUVsQkQsZUFBZSxDQUFDRSxLQUFELENBQWYsRUFBMEJGLGVBQWUsQ0FBQ0UsS0FBRCxDQUFmLENBQXVCRCxJQUZyRCxDQUlBLG1CQUNFLGlEQUFDLDJDQUFELE1BQ0dHLFNBQVMsRUFBSUQsTUFBTSxDQUFDQyxTQUFELENBRHRCLENBRUcsQ0FBQ0EsU0FBRCxlQUFjLG9GQUZqQixDQURGLENBTUQsQ0FFRCxHQUFNQyxDQUFBQSxXQUFXLENBQUcsUUFBZEEsQ0FBQUEsV0FBYyxDQUFBQyxLQUFLLENBQUksQ0FDM0IsR0FBUUwsQ0FBQUEsSUFBUixDQUEwQ0ssS0FBMUMsQ0FBUUwsSUFBUixDQUFjQyxLQUFkLENBQTBDSSxLQUExQyxDQUFjSixLQUFkLENBQXFCQyxNQUFyQixDQUEwQ0csS0FBMUMsQ0FBcUJILE1BQXJCLENBQTZCSSxRQUE3QixDQUEwQ0QsS0FBMUMsQ0FBNkJDLFFBQTdCLENBRUEsbUJBQ0UsaURBQUMsa0JBQUQsQ0FBb0IsUUFBcEIsTUFDRyxTQUFBUCxlQUFlLHFCQUNkLGlEQUFDLHVCQUFELEVBQ0UsSUFBSSxDQUFFQyxJQURSLENBRUUsS0FBSyxDQUFFQyxLQUZULENBR0UsTUFBTSxDQUFFQyxNQUFNLEVBQUlJLFFBSHBCLENBSUUsZUFBZSxDQUFFUCxlQUpuQixFQURjLEVBRGxCLENBREYsQ0FZRCxDQWZELENBaUJBLEdBQU1RLENBQUFBLGNBQWMsQ0FBRyxRQUFqQkEsQ0FBQUEsY0FBaUIsQ0FBQU4sS0FBSyxDQUFJLG9CQUM5QixHQUNFLE1BQU9uQixDQUFBQSw2Q0FBUCxlQUNBMkIsWUFBQSxnQkFGRixDQUdFLENBQ0EsS0FBTSxJQUFJRyxDQUFBQSxLQUFKLENBQ0osMkpBREksQ0FBTixDQUlELENBQ0QsR0FBTUMsQ0FBQUEsT0FBTyxDQUFHL0IsNkNBQUEsQ0FBaUJjLGtCQUFqQixDQUFoQixDQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUlrQixLQUFLLENBQUNDLE1BQU0sQ0FBQ2QsS0FBRCxDQUFQLENBQVQsQ0FBMEIsQ0FDeEIsS0FBTSxJQUFJVyxDQUFBQSxLQUFKLCtLQUlnQlgsS0FKaEIsU0FBTixDQU1ELENBRUQsbUJBQUlZLE9BQU8sQ0FBQ1osS0FBRCxDQUFYLG1DQUFJLGVBQWdCRCxJQUFwQixDQUEwQixDQUN4QixNQUFPYSxDQUFBQSxPQUFPLENBQUNaLEtBQUQsQ0FBUCxDQUFlRCxJQUF0QixDQUNELENBRkQsSUFFTyxDQUNMLEtBQU0sSUFBSVksQ0FBQUEsS0FBSixDQUNKLDRNQURJLENBQU4sQ0FLRCxDQUNGLENBakNELENBMENBLFFBQVNJLENBQUFBLE9BQVQsRUFBbUIsQ0FDakIsS0FBTSxJQUFJSixDQUFBQSxLQUFKLENBQ0oscVZBREksQ0FBTixDQU1EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXNzYXBpci5naXRodWIuaW8vLi8uY2FjaGUvZ2F0c2J5LWJyb3dzZXItZW50cnkuanM/NTliYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCJcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIlxuaW1wb3J0IExpbmssIHtcbiAgd2l0aFByZWZpeCxcbiAgd2l0aEFzc2V0UHJlZml4LFxuICBuYXZpZ2F0ZSxcbiAgcHVzaCxcbiAgcmVwbGFjZSxcbiAgbmF2aWdhdGVUbyxcbiAgcGFyc2VQYXRoLFxufSBmcm9tIFwiZ2F0c2J5LWxpbmtcIlxuaW1wb3J0IHsgdXNlU2Nyb2xsUmVzdG9yYXRpb24gfSBmcm9tIFwiZ2F0c2J5LXJlYWN0LXJvdXRlci1zY3JvbGxcIlxuaW1wb3J0IFBhZ2VSZW5kZXJlciBmcm9tIFwiLi9wdWJsaWMtcGFnZS1yZW5kZXJlclwiXG5pbXBvcnQgbG9hZGVyIGZyb20gXCIuL2xvYWRlclwiXG5cbmNvbnN0IHByZWZldGNoUGF0aG5hbWUgPSBsb2FkZXIuZW5xdWV1ZVxuXG5jb25zdCBTdGF0aWNRdWVyeUNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KHt9KVxuXG5mdW5jdGlvbiBTdGF0aWNRdWVyeURhdGFSZW5kZXJlcih7IHN0YXRpY1F1ZXJ5RGF0YSwgZGF0YSwgcXVlcnksIHJlbmRlciB9KSB7XG4gIGNvbnN0IGZpbmFsRGF0YSA9IGRhdGFcbiAgICA/IGRhdGEuZGF0YVxuICAgIDogc3RhdGljUXVlcnlEYXRhW3F1ZXJ5XSAmJiBzdGF0aWNRdWVyeURhdGFbcXVlcnldLmRhdGFcblxuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIHtmaW5hbERhdGEgJiYgcmVuZGVyKGZpbmFsRGF0YSl9XG4gICAgICB7IWZpbmFsRGF0YSAmJiA8ZGl2PkxvYWRpbmcgKFN0YXRpY1F1ZXJ5KTwvZGl2Pn1cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApXG59XG5cbmNvbnN0IFN0YXRpY1F1ZXJ5ID0gcHJvcHMgPT4ge1xuICBjb25zdCB7IGRhdGEsIHF1ZXJ5LCByZW5kZXIsIGNoaWxkcmVuIH0gPSBwcm9wc1xuXG4gIHJldHVybiAoXG4gICAgPFN0YXRpY1F1ZXJ5Q29udGV4dC5Db25zdW1lcj5cbiAgICAgIHtzdGF0aWNRdWVyeURhdGEgPT4gKFxuICAgICAgICA8U3RhdGljUXVlcnlEYXRhUmVuZGVyZXJcbiAgICAgICAgICBkYXRhPXtkYXRhfVxuICAgICAgICAgIHF1ZXJ5PXtxdWVyeX1cbiAgICAgICAgICByZW5kZXI9e3JlbmRlciB8fCBjaGlsZHJlbn1cbiAgICAgICAgICBzdGF0aWNRdWVyeURhdGE9e3N0YXRpY1F1ZXJ5RGF0YX1cbiAgICAgICAgLz5cbiAgICAgICl9XG4gICAgPC9TdGF0aWNRdWVyeUNvbnRleHQuQ29uc3VtZXI+XG4gIClcbn1cblxuY29uc3QgdXNlU3RhdGljUXVlcnkgPSBxdWVyeSA9PiB7XG4gIGlmIChcbiAgICB0eXBlb2YgUmVhY3QudXNlQ29udGV4dCAhPT0gYGZ1bmN0aW9uYCAmJlxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBgZGV2ZWxvcG1lbnRgXG4gICkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBZb3UncmUgbGlrZWx5IHVzaW5nIGEgdmVyc2lvbiBvZiBSZWFjdCB0aGF0IGRvZXNuJ3Qgc3VwcG9ydCBIb29rc1xcbmAgK1xuICAgICAgICBgUGxlYXNlIHVwZGF0ZSBSZWFjdCBhbmQgUmVhY3RET00gdG8gMTYuOC4wIG9yIGxhdGVyIHRvIHVzZSB0aGUgdXNlU3RhdGljUXVlcnkgaG9vay5gXG4gICAgKVxuICB9XG4gIGNvbnN0IGNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KFN0YXRpY1F1ZXJ5Q29udGV4dClcblxuICAvLyBxdWVyeSBpcyBhIHN0cmluZ2lmaWVkIG51bWJlciBsaWtlIGAzMzAzODgyYCB3aGVuIHdyYXBwZWQgd2l0aCBncmFwaHFsLCBJZiBhIHVzZXIgZm9yZ2V0c1xuICAvLyB0byB3cmFwIHRoZSBxdWVyeSBpbiBhIGdycXBocWwsIHRoZW4gY2FzdGluZyBpdCB0byBhIE51bWJlciByZXN1bHRzIGluIGBOYU5gIGFsbG93aW5nIHVzIHRvXG4gIC8vIGNhdGNoIHRoZSBtaXN1c2Ugb2YgdGhlIEFQSSBhbmQgZ2l2ZSBwcm9wZXIgZGlyZWN0aW9uXG4gIGlmIChpc05hTihOdW1iZXIocXVlcnkpKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgdXNlU3RhdGljUXVlcnkgd2FzIGNhbGxlZCB3aXRoIGEgc3RyaW5nIGJ1dCBleHBlY3RzIHRvIGJlIGNhbGxlZCB1c2luZyBcXGBncmFwaHFsXFxgLiBUcnkgdGhpczpcblxuaW1wb3J0IHsgdXNlU3RhdGljUXVlcnksIGdyYXBocWwgfSBmcm9tICdnYXRzYnknO1xuXG51c2VTdGF0aWNRdWVyeShncmFwaHFsXFxgJHtxdWVyeX1cXGApO1xuYClcbiAgfVxuXG4gIGlmIChjb250ZXh0W3F1ZXJ5XT8uZGF0YSkge1xuICAgIHJldHVybiBjb250ZXh0W3F1ZXJ5XS5kYXRhXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYFRoZSByZXN1bHQgb2YgdGhpcyBTdGF0aWNRdWVyeSBjb3VsZCBub3QgYmUgZmV0Y2hlZC5cXG5cXG5gICtcbiAgICAgICAgYFRoaXMgaXMgbGlrZWx5IGEgYnVnIGluIEdhdHNieSBhbmQgaWYgcmVmcmVzaGluZyB0aGUgcGFnZSBkb2VzIG5vdCBmaXggaXQsIGAgK1xuICAgICAgICBgcGxlYXNlIG9wZW4gYW4gaXNzdWUgaW4gaHR0cHM6Ly9naXRodWIuY29tL2dhdHNieWpzL2dhdHNieS9pc3N1ZXNgXG4gICAgKVxuICB9XG59XG5cblN0YXRpY1F1ZXJ5LnByb3BUeXBlcyA9IHtcbiAgZGF0YTogUHJvcFR5cGVzLm9iamVjdCxcbiAgcXVlcnk6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgcmVuZGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5mdW5jLFxufVxuXG5mdW5jdGlvbiBncmFwaHFsKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgYEl0IGFwcGVhcnMgbGlrZSBHYXRzYnkgaXMgbWlzY29uZmlndXJlZC4gR2F0c2J5IHJlbGF0ZWQgXFxgZ3JhcGhxbFxcYCBjYWxscyBgICtcbiAgICAgIGBhcmUgc3VwcG9zZWQgdG8gb25seSBiZSBldmFsdWF0ZWQgYXQgY29tcGlsZSB0aW1lLCBhbmQgdGhlbiBjb21waWxlZCBhd2F5LiBgICtcbiAgICAgIGBVbmZvcnR1bmF0ZWx5LCBzb21ldGhpbmcgd2VudCB3cm9uZyBhbmQgdGhlIHF1ZXJ5IHdhcyBsZWZ0IGluIHRoZSBjb21waWxlZCBjb2RlLlxcblxcbmAgK1xuICAgICAgYFVubGVzcyB5b3VyIHNpdGUgaGFzIGEgY29tcGxleCBvciBjdXN0b20gYmFiZWwvR2F0c2J5IGNvbmZpZ3VyYXRpb24gdGhpcyBpcyBsaWtlbHkgYSBidWcgaW4gR2F0c2J5LmBcbiAgKVxufVxuXG5leHBvcnQge1xuICBMaW5rLFxuICB3aXRoQXNzZXRQcmVmaXgsXG4gIHdpdGhQcmVmaXgsXG4gIGdyYXBocWwsXG4gIHBhcnNlUGF0aCxcbiAgbmF2aWdhdGUsXG4gIHVzZVNjcm9sbFJlc3RvcmF0aW9uLFxuICBTdGF0aWNRdWVyeUNvbnRleHQsXG4gIFN0YXRpY1F1ZXJ5LFxuICBQYWdlUmVuZGVyZXIsXG4gIHVzZVN0YXRpY1F1ZXJ5LFxuICBwcmVmZXRjaFBhdGhuYW1lLFxufVxuIl0sIm5hbWVzIjpbIlJlYWN0IiwiTGluayIsIndpdGhQcmVmaXgiLCJ3aXRoQXNzZXRQcmVmaXgiLCJuYXZpZ2F0ZSIsInB1c2giLCJyZXBsYWNlIiwibmF2aWdhdGVUbyIsInBhcnNlUGF0aCIsInVzZVNjcm9sbFJlc3RvcmF0aW9uIiwiUGFnZVJlbmRlcmVyIiwibG9hZGVyIiwicHJlZmV0Y2hQYXRobmFtZSIsImVucXVldWUiLCJTdGF0aWNRdWVyeUNvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwiU3RhdGljUXVlcnlEYXRhUmVuZGVyZXIiLCJzdGF0aWNRdWVyeURhdGEiLCJkYXRhIiwicXVlcnkiLCJyZW5kZXIiLCJmaW5hbERhdGEiLCJTdGF0aWNRdWVyeSIsInByb3BzIiwiY2hpbGRyZW4iLCJ1c2VTdGF0aWNRdWVyeSIsInVzZUNvbnRleHQiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJFcnJvciIsImNvbnRleHQiLCJpc05hTiIsIk51bWJlciIsImdyYXBocWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5444\n')},8741:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "uQ": function() { return /* binding */ PageResourceStatus; },\n  "kL": function() { return /* binding */ ProdLoader; },\n  "ZP": function() { return /* binding */ loader; },\n  "hs": function() { return /* binding */ getStaticQueryResults; },\n  "jN": function() { return /* binding */ publicLoader; },\n  "N1": function() { return /* binding */ setLoader; }\n});\n\n// UNUSED EXPORTS: BaseLoader\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js + 1 modules\nvar inheritsLoose = __webpack_require__(8577);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js + 5 modules\nvar toConsumableArray = __webpack_require__(4934);\n;// CONCATENATED MODULE: ./.cache/prefetch.js\nvar support=function support(feature){if(typeof document==="undefined"){return false;}var fakeLink=document.createElement("link");try{if(fakeLink.relList&&typeof fakeLink.relList.supports==="function"){return fakeLink.relList.supports(feature);}}catch(err){return false;}return false;};var linkPrefetchStrategy=function linkPrefetchStrategy(url,options){return new Promise(function(resolve,reject){if(typeof document==="undefined"){reject();return;}var link=document.createElement("link");link.setAttribute("rel","prefetch");link.setAttribute("href",url);Object.keys(options).forEach(function(key){link.setAttribute(key,options[key]);});link.onload=resolve;link.onerror=reject;var parentElement=document.getElementsByTagName("head")[0]||document.getElementsByName("script")[0].parentNode;parentElement.appendChild(link);});};var xhrPrefetchStrategy=function xhrPrefetchStrategy(url){return new Promise(function(resolve,reject){var req=new XMLHttpRequest();req.open("GET",url,true);req.onload=function(){if(req.status===200){resolve();}else{reject();}};req.send(null);});};var supportedPrefetchStrategy=support("prefetch")?linkPrefetchStrategy:xhrPrefetchStrategy;var preFetched={};var prefetch=function prefetch(url,options){return new Promise(function(resolve){if(preFetched[url]){resolve();return;}supportedPrefetchStrategy(url,options).then(function(){resolve();preFetched[url]=true;}).catch(function(){});// 404s are logged to the console anyway\n});};/* harmony default export */ var _cache_prefetch = (prefetch);\n// EXTERNAL MODULE: ./.cache/emitter.js + 1 modules\nvar emitter = __webpack_require__(8110);\n// EXTERNAL MODULE: ./.cache/find-path.js + 1 modules\nvar find_path = __webpack_require__(2257);\n;// CONCATENATED MODULE: ./.cache/loader.js\n/**\n * Available resource loading statuses\n */var PageResourceStatus={/**\n   * At least one of critical resources failed to load\n   */Error:"error",/**\n   * Resources loaded successfully\n   */Success:"success"};var preferDefault=function preferDefault(m){return m&&m.default||m;};var stripSurroundingSlashes=function stripSurroundingSlashes(s){s=s[0]==="/"?s.slice(1):s;s=s.endsWith("/")?s.slice(0,-1):s;return s;};var createPageDataUrl=function createPageDataUrl(path){var fixedPath=path==="/"?"index":stripSurroundingSlashes(path);return ""+"/page-data/"+fixedPath+"/page-data.json";};function doFetch(url,method){if(method===void 0){method="GET";}return new Promise(function(resolve,reject){var req=new XMLHttpRequest();req.open(method,url,true);req.onreadystatechange=function(){if(req.readyState==4){resolve(req);}};req.send(null);});}var doesConnectionSupportPrefetch=function doesConnectionSupportPrefetch(){if("connection"in navigator&&typeof navigator.connection!=="undefined"){if((navigator.connection.effectiveType||"").includes("2g")){return false;}if(navigator.connection.saveData){return false;}}return true;};var toPageResources=function toPageResources(pageData,component){if(component===void 0){component=null;}var page={componentChunkName:pageData.componentChunkName,path:pageData.path,webpackCompilationHash:pageData.webpackCompilationHash,matchPath:pageData.matchPath,staticQueryHashes:pageData.staticQueryHashes};return{component:component,json:pageData.result,page:page};};var BaseLoader=/*#__PURE__*/function(){function BaseLoader(loadComponent,matchPaths){this.inFlightNetworkRequests=new Map();// Map of pagePath -> Page. Where Page is an object with: {\n//   status: PageResourceStatus.Success || PageResourceStatus.Error,\n//   payload: PageResources, // undefined if PageResourceStatus.Error\n// }\n// PageResources is {\n//   component,\n//   json: pageData.result,\n//   page: {\n//     componentChunkName,\n//     path,\n//     webpackCompilationHash,\n//     staticQueryHashes\n//   },\n//   staticQueryResults\n// }\nthis.pageDb=new Map();this.inFlightDb=new Map();this.staticQueryDb={};this.pageDataDb=new Map();this.prefetchTriggered=new Set();this.prefetchCompleted=new Set();this.loadComponent=loadComponent;(0,find_path/* setMatchPaths */.DS)(matchPaths);}var _proto=BaseLoader.prototype;_proto.memoizedGet=function memoizedGet(url){var _this=this;var inFlightPromise=this.inFlightNetworkRequests.get(url);if(!inFlightPromise){inFlightPromise=doFetch(url,"GET");this.inFlightNetworkRequests.set(url,inFlightPromise);}// Prefer duplication with then + catch over .finally to prevent problems in ie11 + firefox\nreturn inFlightPromise.then(function(response){_this.inFlightNetworkRequests.delete(url);return response;}).catch(function(err){_this.inFlightNetworkRequests.delete(url);throw err;});};_proto.setApiRunner=function setApiRunner(apiRunner){this.apiRunner=apiRunner;this.prefetchDisabled=apiRunner("disableCorePrefetching").some(function(a){return a;});};_proto.fetchPageDataJson=function fetchPageDataJson(loadObj){var _this2=this;var pagePath=loadObj.pagePath,_loadObj$retries=loadObj.retries,retries=_loadObj$retries===void 0?0:_loadObj$retries;var url=createPageDataUrl(pagePath);return this.memoizedGet(url).then(function(req){var status=req.status,responseText=req.responseText;// Handle 200\nif(status===200){try{var jsonPayload=JSON.parse(responseText);if(jsonPayload.path===undefined){throw new Error("not a valid pageData response");}return Object.assign(loadObj,{status:PageResourceStatus.Success,payload:jsonPayload});}catch(err){// continue regardless of error\n}}// Handle 404\nif(status===404||status===200){// If the request was for a 404 page and it doesn\'t exist, we\'re done\nif(pagePath==="/404.html"){return Object.assign(loadObj,{status:PageResourceStatus.Error});}// Need some code here to cache the 404 request. In case\n// multiple loadPageDataJsons result in 404s\nreturn _this2.fetchPageDataJson(Object.assign(loadObj,{pagePath:"/404.html",notFound:true}));}// handle 500 response (Unrecoverable)\nif(status===500){return Object.assign(loadObj,{status:PageResourceStatus.Error});}// Handle everything else, including status === 0, and 503s. Should retry\nif(retries<3){return _this2.fetchPageDataJson(Object.assign(loadObj,{retries:retries+1}));}// Retried 3 times already, result is an error.\nreturn Object.assign(loadObj,{status:PageResourceStatus.Error});});};_proto.loadPageDataJson=function loadPageDataJson(rawPath){var _this3=this;var pagePath=(0,find_path/* findPath */.Cj)(rawPath);if(this.pageDataDb.has(pagePath)){var pageData=this.pageDataDb.get(pagePath);if(true){return Promise.resolve(pageData);}}return this.fetchPageDataJson({pagePath:pagePath}).then(function(pageData){_this3.pageDataDb.set(pagePath,pageData);return pageData;});};_proto.findMatchPath=function findMatchPath(rawPath){return (0,find_path/* findMatchPath */.UD)(rawPath);}// TODO check all uses of this and whether they use undefined for page resources not exist\n;_proto.loadPage=function loadPage(rawPath){var _this4=this;var pagePath=(0,find_path/* findPath */.Cj)(rawPath);if(this.pageDb.has(pagePath)){var page=this.pageDb.get(pagePath);if(true){if(page.error){return{error:page.error,status:page.status};}return Promise.resolve(page.payload);}}if(this.inFlightDb.has(pagePath)){return this.inFlightDb.get(pagePath);}var inFlightPromise=Promise.all([this.loadAppData(),this.loadPageDataJson(pagePath)]).then(function(allData){var result=allData[1];if(result.status===PageResourceStatus.Error){return{status:PageResourceStatus.Error};}var pageData=result.payload;var _pageData=pageData,componentChunkName=_pageData.componentChunkName,_pageData$staticQuery=_pageData.staticQueryHashes,staticQueryHashes=_pageData$staticQuery===void 0?[]:_pageData$staticQuery;var finalResult={};var componentChunkPromise=_this4.loadComponent(componentChunkName).then(function(component){finalResult.createdAt=new Date();var pageResources;if(!component||component instanceof Error){finalResult.status=PageResourceStatus.Error;finalResult.error=component;}else{finalResult.status=PageResourceStatus.Success;if(result.notFound===true){finalResult.notFound=true;}pageData=Object.assign(pageData,{webpackCompilationHash:allData[0]?allData[0].webpackCompilationHash:""});pageResources=toPageResources(pageData,component);}// undefined if final result is an error\nreturn pageResources;});var staticQueryBatchPromise=Promise.all(staticQueryHashes.map(function(staticQueryHash){// Check for cache in case this static query result has already been loaded\nif(_this4.staticQueryDb[staticQueryHash]){var jsonPayload=_this4.staticQueryDb[staticQueryHash];return{staticQueryHash:staticQueryHash,jsonPayload:jsonPayload};}return _this4.memoizedGet(""+"/page-data/sq/d/"+staticQueryHash+".json").then(function(req){var jsonPayload=JSON.parse(req.responseText);return{staticQueryHash:staticQueryHash,jsonPayload:jsonPayload};}).catch(function(){throw new Error("We couldn\'t load \\""+""+"/page-data/sq/d/"+staticQueryHash+".json\\"");});})).then(function(staticQueryResults){var staticQueryResultsMap={};staticQueryResults.forEach(function(_ref){var staticQueryHash=_ref.staticQueryHash,jsonPayload=_ref.jsonPayload;staticQueryResultsMap[staticQueryHash]=jsonPayload;_this4.staticQueryDb[staticQueryHash]=jsonPayload;});return staticQueryResultsMap;});return Promise.all([componentChunkPromise,staticQueryBatchPromise]).then(function(_ref2){var pageResources=_ref2[0],staticQueryResults=_ref2[1];var payload;if(pageResources){payload=Object.assign({},pageResources,{staticQueryResults:staticQueryResults});finalResult.payload=payload;emitter/* default.emit */.Z.emit("onPostLoadPageResources",{page:payload,pageResources:payload});}_this4.pageDb.set(pagePath,finalResult);if(finalResult.error){return{error:finalResult.error,status:finalResult.status};}return payload;})// when static-query fail to load we throw a better error\n.catch(function(err){return{error:err,status:PageResourceStatus.Error};});});inFlightPromise.then(function(){_this4.inFlightDb.delete(pagePath);}).catch(function(error){_this4.inFlightDb.delete(pagePath);throw error;});this.inFlightDb.set(pagePath,inFlightPromise);return inFlightPromise;}// returns undefined if the page does not exists in cache\n;_proto.loadPageSync=function loadPageSync(rawPath,options){if(options===void 0){options={};}var pagePath=(0,find_path/* findPath */.Cj)(rawPath);if(this.pageDb.has(pagePath)){var _options;var pageData=this.pageDb.get(pagePath);if(pageData.payload){return pageData.payload;}if((_options=options)!==null&&_options!==void 0&&_options.withErrorDetails){return{error:pageData.error,status:pageData.status};}}return undefined;};_proto.shouldPrefetch=function shouldPrefetch(pagePath){// Skip prefetching if we know user is on slow or constrained connection\nif(!doesConnectionSupportPrefetch()){return false;}// Check if the page exists.\nif(this.pageDb.has(pagePath)){return false;}return true;};_proto.prefetch=function prefetch(pagePath){var _this5=this;if(!this.shouldPrefetch(pagePath)){return false;}// Tell plugins with custom prefetching logic that they should start\n// prefetching this path.\nif(!this.prefetchTriggered.has(pagePath)){this.apiRunner("onPrefetchPathname",{pathname:pagePath});this.prefetchTriggered.add(pagePath);}// If a plugin has disabled core prefetching, stop now.\nif(this.prefetchDisabled){return false;}var realPath=(0,find_path/* findPath */.Cj)(pagePath);// Todo make doPrefetch logic cacheable\n// eslint-disable-next-line consistent-return\nthis.doPrefetch(realPath).then(function(){if(!_this5.prefetchCompleted.has(pagePath)){_this5.apiRunner("onPostPrefetchPathname",{pathname:pagePath});_this5.prefetchCompleted.add(pagePath);}});return true;};_proto.doPrefetch=function doPrefetch(pagePath){var _this6=this;var pageDataUrl=createPageDataUrl(pagePath);return _cache_prefetch(pageDataUrl,{crossOrigin:"anonymous",as:"fetch"}).then(function(){return(// This was just prefetched, so will return a response from\n// the cache instead of making another request to the server\n_this6.loadPageDataJson(pagePath));});};_proto.hovering=function hovering(rawPath){this.loadPage(rawPath);};_proto.getResourceURLsForPathname=function getResourceURLsForPathname(rawPath){var pagePath=(0,find_path/* findPath */.Cj)(rawPath);var page=this.pageDataDb.get(pagePath);if(page){var pageResources=toPageResources(page.payload);return[].concat((0,toConsumableArray/* default */.Z)(createComponentUrls(pageResources.page.componentChunkName)),[createPageDataUrl(pagePath)]);}else{return null;}};_proto.isPageNotFound=function isPageNotFound(rawPath){var pagePath=(0,find_path/* findPath */.Cj)(rawPath);var page=this.pageDb.get(pagePath);return!page||page.notFound;};_proto.loadAppData=function loadAppData(retries){var _this7=this;if(retries===void 0){retries=0;}return this.memoizedGet(""+"/page-data/app-data.json").then(function(req){var status=req.status,responseText=req.responseText;var appData;if(status!==200&&retries<3){// Retry 3 times incase of non-200 responses\nreturn _this7.loadAppData(retries+1);}// Handle 200\nif(status===200){try{var jsonPayload=JSON.parse(responseText);if(jsonPayload.webpackCompilationHash===undefined){throw new Error("not a valid app-data response");}appData=jsonPayload;}catch(err){// continue regardless of error\n}}return appData;});};return BaseLoader;}();var createComponentUrls=function createComponentUrls(componentChunkName){return(window.___chunkMapping[componentChunkName]||[]).map(function(chunk){return ""+chunk;});};var ProdLoader=/*#__PURE__*/function(_BaseLoader){(0,inheritsLoose/* default */.Z)(ProdLoader,_BaseLoader);function ProdLoader(asyncRequires,matchPaths){var loadComponent=function loadComponent(chunkName){if(!asyncRequires.components[chunkName]){throw new Error("We couldn\'t find the correct component chunk with the name "+chunkName);}return asyncRequires.components[chunkName]().then(preferDefault)// loader will handle the case when component is error\n.catch(function(err){return err;});};return _BaseLoader.call(this,loadComponent,matchPaths)||this;}var _proto2=ProdLoader.prototype;_proto2.doPrefetch=function doPrefetch(pagePath){return _BaseLoader.prototype.doPrefetch.call(this,pagePath).then(function(result){if(result.status!==PageResourceStatus.Success){return Promise.resolve();}var pageData=result.payload;var chunkName=pageData.componentChunkName;var componentUrls=createComponentUrls(chunkName);return Promise.all(componentUrls.map(_cache_prefetch)).then(function(){return pageData;});});};_proto2.loadPageDataJson=function loadPageDataJson(rawPath){return _BaseLoader.prototype.loadPageDataJson.call(this,rawPath).then(function(data){if(data.notFound){// check if html file exist using HEAD request:\n// if it does we should navigate to it instead of showing 404\nreturn doFetch(rawPath,"HEAD").then(function(req){if(req.status===200){// page (.html file) actually exist (or we asked for 404 )\n// returning page resources status as errored to trigger\n// regular browser navigation to given page\nreturn{status:PageResourceStatus.Error};}// if HEAD request wasn\'t 200, return notFound result\n// and show 404 page\nreturn data;});}return data;});};return ProdLoader;}(BaseLoader);var instance;var setLoader=function setLoader(_loader){instance=_loader;};var publicLoader={enqueue:function enqueue(rawPath){return instance.prefetch(rawPath);},// Real methods\ngetResourceURLsForPathname:function getResourceURLsForPathname(rawPath){return instance.getResourceURLsForPathname(rawPath);},loadPage:function loadPage(rawPath){return instance.loadPage(rawPath);},// TODO add deprecation to v4 so people use withErrorDetails and then we can remove in v5 and change default behaviour\nloadPageSync:function loadPageSync(rawPath,options){if(options===void 0){options={};}return instance.loadPageSync(rawPath,options);},prefetch:function prefetch(rawPath){return instance.prefetch(rawPath);},isPageNotFound:function isPageNotFound(rawPath){return instance.isPageNotFound(rawPath);},hovering:function hovering(rawPath){return instance.hovering(rawPath);},loadAppData:function loadAppData(){return instance.loadAppData();}};/* harmony default export */ var loader = (publicLoader);function getStaticQueryResults(){if(instance){return instance.staticQueryDb;}else{return{};}}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8741\n')},804:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(8577);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var _api_runner_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7343);\n/* harmony import */ var _find_path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2257);\n// Renders page\nvar PageRenderer=/*#__PURE__*/function(_React$Component){(0,_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)(PageRenderer,_React$Component);function PageRenderer(){return _React$Component.apply(this,arguments)||this;}var _proto=PageRenderer.prototype;_proto.render=function render(){var props=Object.assign({},this.props,{params:Object.assign({},(0,_find_path__WEBPACK_IMPORTED_MODULE_2__/* .grabMatchParams */ .GA)(this.props.location.pathname),this.props.pageResources.json.pageContext.__params)});var pageElement=/*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(this.props.pageResources.component,Object.assign({},props,{key:this.props.path||this.props.pageResources.page.path}));var wrappedPage=(0,_api_runner_browser__WEBPACK_IMPORTED_MODULE_1__/* .apiRunner */ .h)("wrapPageElement",{element:pageElement,props:props},pageElement,function(_ref){var result=_ref.result;return{element:result,props:props};}).pop();return wrappedPage;};return PageRenderer;}(react__WEBPACK_IMPORTED_MODULE_0__.Component);/* harmony default export */ __webpack_exports__["Z"] = (PageRenderer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODA0LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFLQTtHQUNNSSxDQUFBQSxxU0FDSkMsT0FBQSxpQkFBUyxDQUNQLEdBQU1DLENBQUFBLEtBQUssa0JBQ04sS0FBS0EsS0FEQyxFQUVUQyxNQUFNLGtCQUNESixxRUFBZSxDQUFDLEtBQUtHLEtBQUwsQ0FBV0UsUUFBWCxDQUFvQkMsUUFBckIsQ0FEZCxDQUVELEtBQUtILEtBQUwsQ0FBV0ksYUFBWCxDQUF5QkMsSUFBekIsQ0FBOEJDLFdBQTlCLENBQTBDQyxRQUZ6QyxDQUZHLEVBQVgsQ0FRQSxHQUFNQyxDQUFBQSxXQUFXLGNBQUdiLG9EQUFhLENBQUMsS0FBS0ssS0FBTCxDQUFXSSxhQUFYLENBQXlCSyxTQUExQixrQkFDNUJULEtBRDRCLEVBRS9CVSxHQUFHLENBQUUsS0FBS1YsS0FBTCxDQUFXVyxJQUFYLEVBQW1CLEtBQUtYLEtBQUwsQ0FBV0ksYUFBWCxDQUF5QlEsSUFBekIsQ0FBOEJELElBRnZCLEdBQWpDLENBS0EsR0FBTUUsQ0FBQUEsV0FBVyxDQUFHakIsdUVBQVMsbUJBRTNCLENBQUVrQixPQUFPLENBQUVOLFdBQVgsQ0FBd0JSLEtBQUssQ0FBTEEsS0FBeEIsQ0FGMkIsQ0FHM0JRLFdBSDJCLENBSTNCLGNBQWdCLElBQWJPLENBQUFBLE1BQWEsTUFBYkEsTUFBYSxDQUNkLE1BQU8sQ0FBRUQsT0FBTyxDQUFFQyxNQUFYLENBQW1CZixLQUFLLENBQUxBLEtBQW5CLENBQVAsQ0FDRCxDQU4wQixDQUFULENBT2xCZ0IsR0FQa0IsRUFBcEIsQ0FTQSxNQUFPSCxDQUFBQSxXQUFQLENBQ0Qsd0JBekJ3Qm5CLDhDQW1DM0IseURBQWVJLFlBQWYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hc3NhcGlyLmdpdGh1Yi5pby8uLy5jYWNoZS9wYWdlLXJlbmRlcmVyLmpzPzIwZTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IGNyZWF0ZUVsZW1lbnQgfSBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiXG5pbXBvcnQgeyBhcGlSdW5uZXIgfSBmcm9tIFwiLi9hcGktcnVubmVyLWJyb3dzZXJcIlxuaW1wb3J0IHsgZ3JhYk1hdGNoUGFyYW1zIH0gZnJvbSBcIi4vZmluZC1wYXRoXCJcblxuLy8gUmVuZGVycyBwYWdlXG5jbGFzcyBQYWdlUmVuZGVyZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICByZW5kZXIoKSB7XG4gICAgY29uc3QgcHJvcHMgPSB7XG4gICAgICAuLi50aGlzLnByb3BzLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIC4uLmdyYWJNYXRjaFBhcmFtcyh0aGlzLnByb3BzLmxvY2F0aW9uLnBhdGhuYW1lKSxcbiAgICAgICAgLi4udGhpcy5wcm9wcy5wYWdlUmVzb3VyY2VzLmpzb24ucGFnZUNvbnRleHQuX19wYXJhbXMsXG4gICAgICB9LFxuICAgIH1cblxuICAgIGNvbnN0IHBhZ2VFbGVtZW50ID0gY3JlYXRlRWxlbWVudCh0aGlzLnByb3BzLnBhZ2VSZXNvdXJjZXMuY29tcG9uZW50LCB7XG4gICAgICAuLi5wcm9wcyxcbiAgICAgIGtleTogdGhpcy5wcm9wcy5wYXRoIHx8IHRoaXMucHJvcHMucGFnZVJlc291cmNlcy5wYWdlLnBhdGgsXG4gICAgfSlcblxuICAgIGNvbnN0IHdyYXBwZWRQYWdlID0gYXBpUnVubmVyKFxuICAgICAgYHdyYXBQYWdlRWxlbWVudGAsXG4gICAgICB7IGVsZW1lbnQ6IHBhZ2VFbGVtZW50LCBwcm9wcyB9LFxuICAgICAgcGFnZUVsZW1lbnQsXG4gICAgICAoeyByZXN1bHQgfSkgPT4ge1xuICAgICAgICByZXR1cm4geyBlbGVtZW50OiByZXN1bHQsIHByb3BzIH1cbiAgICAgIH1cbiAgICApLnBvcCgpXG5cbiAgICByZXR1cm4gd3JhcHBlZFBhZ2VcbiAgfVxufVxuXG5QYWdlUmVuZGVyZXIucHJvcFR5cGVzID0ge1xuICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBwYWdlUmVzb3VyY2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGRhdGE6IFByb3BUeXBlcy5vYmplY3QsXG4gIHBhZ2VDb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG59XG5cbmV4cG9ydCBkZWZhdWx0IFBhZ2VSZW5kZXJlclxuIl0sIm5hbWVzIjpbIlJlYWN0IiwiY3JlYXRlRWxlbWVudCIsImFwaVJ1bm5lciIsImdyYWJNYXRjaFBhcmFtcyIsIlBhZ2VSZW5kZXJlciIsInJlbmRlciIsInByb3BzIiwicGFyYW1zIiwibG9jYXRpb24iLCJwYXRobmFtZSIsInBhZ2VSZXNvdXJjZXMiLCJqc29uIiwicGFnZUNvbnRleHQiLCJfX3BhcmFtcyIsInBhZ2VFbGVtZW50IiwiY29tcG9uZW50Iiwia2V5IiwicGF0aCIsInBhZ2UiLCJ3cmFwcGVkUGFnZSIsImVsZW1lbnQiLCJyZXN1bHQiLCJwb3AiLCJDb21wb25lbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///804\n')},678:function(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js + 1 modules\nvar inheritsLoose = __webpack_require__(8577);\n// EXTERNAL MODULE: ./.cache/api-runner-browser.js\nvar api_runner_browser = __webpack_require__(7343);\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(7294);\n// EXTERNAL MODULE: ./node_modules/react-dom/index.js\nvar react_dom = __webpack_require__(3935);\n// EXTERNAL MODULE: ./node_modules/@gatsbyjs/reach-router/es/index.js + 2 modules\nvar es = __webpack_require__(9499);\n// EXTERNAL MODULE: ./node_modules/gatsby-react-router-scroll/index.js\nvar gatsby_react_router_scroll = __webpack_require__(9679);\n// EXTERNAL MODULE: ./.cache/gatsby-browser-entry.js\nvar gatsby_browser_entry = __webpack_require__(5444);\n// EXTERNAL MODULE: ./.cache/loader.js + 1 modules\nvar loader = __webpack_require__(8741);\n// EXTERNAL MODULE: ./.cache/redirect-utils.js + 1 modules\nvar redirect_utils = __webpack_require__(4553);\n// EXTERNAL MODULE: ./.cache/emitter.js + 1 modules\nvar emitter = __webpack_require__(8110);\n;// CONCATENATED MODULE: ./.cache/route-announcer-props.js\n// This is extracted to separate module because it\'s shared\n// between browser and SSR code\nvar RouteAnnouncerProps={id:"gatsby-announcer",style:{position:"absolute",top:0,width:1,height:1,padding:0,overflow:"hidden",clip:"rect(0, 0, 0, 0)",whiteSpace:"nowrap",border:0},"aria-live":"assertive","aria-atomic":"true"};\n// EXTERNAL MODULE: ./node_modules/@gatsbyjs/reach-router/lib/history.js\nvar lib_history = __webpack_require__(2393);\n// EXTERNAL MODULE: ./node_modules/gatsby-link/index.js\nvar gatsby_link = __webpack_require__(8037);\n;// CONCATENATED MODULE: ./.cache/navigation.js\nfunction maybeRedirect(pathname){var redirect=(0,redirect_utils/* maybeGetBrowserRedirect */.J)(pathname);var _window$location=window.location,hash=_window$location.hash,search=_window$location.search;if(redirect!=null){window.___replace(redirect.toPath+search+hash);return true;}else{return false;}}var onPreRouteUpdate=function onPreRouteUpdate(location,prevLocation){if(!maybeRedirect(location.pathname)){(0,api_runner_browser/* apiRunner */.h)("onPreRouteUpdate",{location:location,prevLocation:prevLocation});}};var onRouteUpdate=function onRouteUpdate(location,prevLocation){if(!maybeRedirect(location.pathname)){(0,api_runner_browser/* apiRunner */.h)("onRouteUpdate",{location:location,prevLocation:prevLocation});if(false){}}};var navigation_navigate=function navigate(to,options){if(options===void 0){options={};}// Support forward/backward navigation with numbers\n// navigate(-2) (jumps back 2 history steps)\n// navigate(2)  (jumps forward 2 history steps)\nif(typeof to==="number"){lib_history/* globalHistory.navigate */.V5.navigate(to);return;}var _parsePath=(0,gatsby_link/* parsePath */.cP)(to),pathname=_parsePath.pathname,search=_parsePath.search,hash=_parsePath.hash;var redirect=(0,redirect_utils/* maybeGetBrowserRedirect */.J)(pathname);// If we\'re redirecting, just replace the passed in pathname\n// to the one we want to redirect to.\nif(redirect){to=redirect.toPath+search+hash;}// If we had a service worker update, no matter the path, reload window and\n// reset the pathname whitelist\nif(window.___swUpdated){window.location=pathname+search+hash;return;}// Start a timer to wait for a second before transitioning and showing a\n// loader in case resources aren\'t around yet.\nvar timeoutId=setTimeout(function(){emitter/* default.emit */.Z.emit("onDelayedLoadPageResources",{pathname:pathname});(0,api_runner_browser/* apiRunner */.h)("onRouteUpdateDelayed",{location:window.location});},1000);loader/* default.loadPage */.ZP.loadPage(pathname).then(function(pageResources){// If no page resources, then refresh the page\n// Do this, rather than simply `window.location.reload()`, so that\n// pressing the back/forward buttons work - otherwise when pressing\n// back, the browser will just change the URL and expect JS to handle\n// the change, which won\'t always work since it might not be a Gatsby\n// page.\nif(!pageResources||pageResources.status===loader/* PageResourceStatus.Error */.uQ.Error){window.history.replaceState({},"",location.href);window.location=pathname;clearTimeout(timeoutId);return;}// If the loaded page has a different compilation hash to the\n// window, then a rebuild has occurred on the server. Reload.\nif( true&&pageResources){if(pageResources.page.webpackCompilationHash!==window.___webpackCompilationHash){// Purge plugin-offline cache\nif("serviceWorker"in navigator&&navigator.serviceWorker.controller!==null&&navigator.serviceWorker.controller.state==="activated"){navigator.serviceWorker.controller.postMessage({gatsbyApi:"clearPathResources"});}window.location=pathname;}}(0,es.navigate)(to,options);clearTimeout(timeoutId);});};function shouldUpdateScroll(prevRouterProps,_ref){var _this=this;var location=_ref.location;var pathname=location.pathname,hash=location.hash;var results=(0,api_runner_browser/* apiRunner */.h)("shouldUpdateScroll",{prevRouterProps:prevRouterProps,// `pathname` for backwards compatibility\npathname:pathname,routerProps:{location:location},getSavedScrollPosition:function getSavedScrollPosition(args){return[0,// FIXME this is actually a big code smell, we should fix this\n// eslint-disable-next-line @babel/no-invalid-this\n_this._stateStorage.read(args,args.key)];}});if(results.length>0){// Use the latest registered shouldUpdateScroll result, this allows users to override plugin\'s configuration\n// @see https://github.com/gatsbyjs/gatsby/issues/12038\nreturn results[results.length-1];}if(prevRouterProps){var oldPathname=prevRouterProps.location.pathname;if(oldPathname===pathname){// Scroll to element if it exists, if it doesn\'t, or no hash is provided,\n// scroll to top.\nreturn hash?decodeURI(hash.slice(1)):[0,0];}}return true;}function init(){// The "scroll-behavior" package expects the "action" to be on the location\n// object so let\'s copy it over.\nlib_history/* globalHistory.listen */.V5.listen(function(args){args.location.action=args.action;});window.___push=function(to){return navigation_navigate(to,{replace:false});};window.___replace=function(to){return navigation_navigate(to,{replace:true});};window.___navigate=function(to,options){return navigation_navigate(to,options);};// Check for initial page-load redirect\nmaybeRedirect(window.location.pathname);}var RouteAnnouncer=/*#__PURE__*/function(_React$Component){(0,inheritsLoose/* default */.Z)(RouteAnnouncer,_React$Component);function RouteAnnouncer(props){var _this2;_this2=_React$Component.call(this,props)||this;_this2.announcementRef=/*#__PURE__*/react.createRef();return _this2;}var _proto=RouteAnnouncer.prototype;_proto.componentDidUpdate=function componentDidUpdate(prevProps,nextProps){var _this3=this;requestAnimationFrame(function(){var pageName="new page at "+_this3.props.location.pathname;if(document.title){pageName=document.title;}var pageHeadings=document.querySelectorAll("#gatsby-focus-wrapper h1");if(pageHeadings&&pageHeadings.length){pageName=pageHeadings[0].textContent;}var newAnnouncement="Navigated to "+pageName;if(_this3.announcementRef.current){var oldAnnouncement=_this3.announcementRef.current.innerText;if(oldAnnouncement!==newAnnouncement){_this3.announcementRef.current.innerText=newAnnouncement;}}});};_proto.render=function render(){return/*#__PURE__*/react.createElement("div",Object.assign({},RouteAnnouncerProps,{ref:this.announcementRef}));};return RouteAnnouncer;}(react.Component);var compareLocationProps=function compareLocationProps(prevLocation,nextLocation){var _prevLocation$state,_nextLocation$state;if(prevLocation.href!==nextLocation.href){return true;}if((prevLocation===null||prevLocation===void 0?void 0:(_prevLocation$state=prevLocation.state)===null||_prevLocation$state===void 0?void 0:_prevLocation$state.key)!==(nextLocation===null||nextLocation===void 0?void 0:(_nextLocation$state=nextLocation.state)===null||_nextLocation$state===void 0?void 0:_nextLocation$state.key)){return true;}return false;};// Fire on(Pre)RouteUpdate APIs\nvar RouteUpdates=/*#__PURE__*/function(_React$Component2){(0,inheritsLoose/* default */.Z)(RouteUpdates,_React$Component2);function RouteUpdates(props){var _this4;_this4=_React$Component2.call(this,props)||this;onPreRouteUpdate(props.location,null);return _this4;}var _proto2=RouteUpdates.prototype;_proto2.componentDidMount=function componentDidMount(){onRouteUpdate(this.props.location,null);};_proto2.shouldComponentUpdate=function shouldComponentUpdate(prevProps){if(compareLocationProps(prevProps.location,this.props.location)){onPreRouteUpdate(this.props.location,prevProps.location);return true;}return false;};_proto2.componentDidUpdate=function componentDidUpdate(prevProps){if(compareLocationProps(prevProps.location,this.props.location)){onRouteUpdate(this.props.location,prevProps.location);}};_proto2.render=function render(){return/*#__PURE__*/react.createElement(react.Fragment,null,this.props.children,/*#__PURE__*/react.createElement(RouteAnnouncer,{location:location}));};return RouteUpdates;}(react.Component);\n// EXTERNAL MODULE: ./.cache/page-renderer.js\nvar page_renderer = __webpack_require__(804);\n// EXTERNAL MODULE: ./.cache/_this_is_virtual_fs_path_/$virtual/async-requires.js\nvar async_requires = __webpack_require__(4999);\n;// CONCATENATED MODULE: ./node_modules/shallow-compare/es/index.js\n// Pulled from react-compat\n// https://github.com/developit/preact-compat/blob/7c5de00e7c85e2ffd011bf3af02899b63f699d3a/src/index.js#L349\nfunction shallowDiffers(a, b) {\n  for (var i in a) {\n    if (!(i in b)) return true;\n  }for (var _i in b) {\n    if (a[_i] !== b[_i]) return true;\n  }return false;\n}\n\n/* harmony default export */ var shallow_compare_es = (function (instance, nextProps, nextState) {\n  return shallowDiffers(instance.props, nextProps) || shallowDiffers(instance.state, nextState);\n});\n;// CONCATENATED MODULE: ./.cache/ensure-resources.js\nvar EnsureResources=/*#__PURE__*/function(_React$Component){(0,inheritsLoose/* default */.Z)(EnsureResources,_React$Component);function EnsureResources(props){var _this;_this=_React$Component.call(this)||this;var location=props.location,pageResources=props.pageResources;_this.state={location:Object.assign({},location),pageResources:pageResources||loader/* default.loadPageSync */.ZP.loadPageSync(location.pathname,{withErrorDetails:true})};return _this;}EnsureResources.getDerivedStateFromProps=function getDerivedStateFromProps(_ref,prevState){var location=_ref.location;if(prevState.location.href!==location.href){var pageResources=loader/* default.loadPageSync */.ZP.loadPageSync(location.pathname,{withErrorDetails:true});return{pageResources:pageResources,location:Object.assign({},location)};}return{location:Object.assign({},location)};};var _proto=EnsureResources.prototype;_proto.loadResources=function loadResources(rawPath){var _this2=this;loader/* default.loadPage */.ZP.loadPage(rawPath).then(function(pageResources){if(pageResources&&pageResources.status!==loader/* PageResourceStatus.Error */.uQ.Error){_this2.setState({location:Object.assign({},window.location),pageResources:pageResources});}else{window.history.replaceState({},"",location.href);window.location=rawPath;}});};_proto.shouldComponentUpdate=function shouldComponentUpdate(nextProps,nextState){// Always return false if we\'re missing resources.\nif(!nextState.pageResources){this.loadResources(nextProps.location.pathname);return false;}if(false){}// Check if the component or json have changed.\nif(this.state.pageResources!==nextState.pageResources){return true;}if(this.state.pageResources.component!==nextState.pageResources.component){return true;}if(this.state.pageResources.json!==nextState.pageResources.json){return true;}// Check if location has changed on a page using internal routing\n// via matchPath configuration.\nif(this.state.location.key!==nextState.location.key&&nextState.pageResources.page&&(nextState.pageResources.page.matchPath||nextState.pageResources.page.path)){return true;}return shallow_compare_es(this,nextProps,nextState);};_proto.render=function render(){if(false){ var message, _this$state$pageResou; }return this.props.children(this.state);};return EnsureResources;}(react.Component);/* harmony default export */ var ensure_resources = (EnsureResources);\n// EXTERNAL MODULE: ./.cache/strip-prefix.js\nvar strip_prefix = __webpack_require__(1578);\n;// CONCATENATED MODULE: ./.cache/_this_is_virtual_fs_path_/$virtual/match-paths.json\nvar match_paths_namespaceObject = [];\n;// CONCATENATED MODULE: ./.cache/production-app.js\n// Generated during bootstrap\nvar production_app_loader=new loader/* ProdLoader */.kL(async_requires,match_paths_namespaceObject);(0,loader/* setLoader */.N1)(production_app_loader);production_app_loader.setApiRunner(api_runner_browser/* apiRunner */.h);window.asyncRequires=async_requires;window.___emitter=emitter/* default */.Z;window.___loader=loader/* publicLoader */.jN;init();(0,api_runner_browser/* apiRunnerAsync */.I)("onClientEntry").then(function(){// Let plugins register a service worker. The plugin just needs\n// to return true.\nif((0,api_runner_browser/* apiRunner */.h)("registerServiceWorker").filter(Boolean).length>0){__webpack_require__(154);}// In gatsby v2 if Router is used in page using matchPaths\n// paths need to contain full path.\n// For example:\n//   - page have `/app/*` matchPath\n//   - inside template user needs to use `/app/xyz` as path\n// Resetting `basepath`/`baseuri` keeps current behaviour\n// to not introduce breaking change.\n// Remove this in v3\nvar RouteHandler=function RouteHandler(props){return/*#__PURE__*/react.createElement(es.BaseContext.Provider,{value:{baseuri:"/",basepath:"/"}},/*#__PURE__*/react.createElement(page_renderer/* default */.Z,props));};var DataContext=/*#__PURE__*/react.createContext({});var GatsbyRoot=/*#__PURE__*/function(_React$Component){(0,inheritsLoose/* default */.Z)(GatsbyRoot,_React$Component);function GatsbyRoot(){return _React$Component.apply(this,arguments)||this;}var _proto=GatsbyRoot.prototype;_proto.render=function render(){var children=this.props.children;return/*#__PURE__*/react.createElement(es.Location,null,function(_ref){var location=_ref.location;return/*#__PURE__*/react.createElement(ensure_resources,{location:location},function(_ref2){var pageResources=_ref2.pageResources,location=_ref2.location;var staticQueryResults=(0,loader/* getStaticQueryResults */.hs)();return/*#__PURE__*/react.createElement(gatsby_browser_entry.StaticQueryContext.Provider,{value:staticQueryResults},/*#__PURE__*/react.createElement(DataContext.Provider,{value:{pageResources:pageResources,location:location}},children));});});};return GatsbyRoot;}(react.Component);var LocationHandler=/*#__PURE__*/function(_React$Component2){(0,inheritsLoose/* default */.Z)(LocationHandler,_React$Component2);function LocationHandler(){return _React$Component2.apply(this,arguments)||this;}var _proto2=LocationHandler.prototype;_proto2.render=function render(){var _this=this;return/*#__PURE__*/react.createElement(DataContext.Consumer,null,function(_ref3){var pageResources=_ref3.pageResources,location=_ref3.location;return/*#__PURE__*/react.createElement(RouteUpdates,{location:location},/*#__PURE__*/react.createElement(gatsby_react_router_scroll/* ScrollContext */.$C,{location:location,shouldUpdateScroll:shouldUpdateScroll},/*#__PURE__*/react.createElement(es.Router,{basepath:"",location:location,id:"gatsby-focus-wrapper"},/*#__PURE__*/react.createElement(RouteHandler,Object.assign({path:pageResources.page.path==="/404.html"?(0,strip_prefix/* default */.Z)(location.pathname,""):encodeURI(pageResources.page.matchPath||pageResources.page.path)},_this.props,{location:location,pageResources:pageResources},pageResources.json)))));});};return LocationHandler;}(react.Component);var _window=window,pagePath=_window.pagePath,browserLoc=_window.location;// Explicitly call navigate if the canonical path (window.pagePath)\n// is different to the browser path (window.location.pathname). But\n// only if NONE of the following conditions hold:\n//\n// - The url matches a client side route (page.matchPath)\n// - it\'s a 404 page\n// - it\'s the offline plugin shell (/offline-plugin-app-shell-fallback/)\nif(pagePath&&""+pagePath!==browserLoc.pathname&&!(production_app_loader.findMatchPath((0,strip_prefix/* default */.Z)(browserLoc.pathname,""))||pagePath==="/404.html"||pagePath.match(/^\\/404\\/?$/)||pagePath.match(/^\\/offline-plugin-app-shell-fallback\\/?$/))){(0,es.navigate)(""+pagePath+browserLoc.search+browserLoc.hash,{replace:true});}loader/* publicLoader.loadPage */.jN.loadPage(browserLoc.pathname).then(function(page){if(!page||page.status===loader/* PageResourceStatus.Error */.uQ.Error){var message="page resources for "+browserLoc.pathname+" not found. Not rendering React";// if the chunk throws an error we want to capture the real error\n// This should help with https://github.com/gatsbyjs/gatsby/issues/19618\nif(page&&page.error){console.error(message);throw page.error;}throw new Error(message);}window.___webpackCompilationHash=page.page.webpackCompilationHash;var SiteRoot=(0,api_runner_browser/* apiRunner */.h)("wrapRootElement",{element:/*#__PURE__*/react.createElement(LocationHandler,null)},/*#__PURE__*/react.createElement(LocationHandler,null),function(_ref4){var result=_ref4.result;return{element:result};}).pop();var App=function App(){var onClientEntryRanRef=react.useRef(false);react.useEffect(function(){if(!onClientEntryRanRef.current){onClientEntryRanRef.current=true;performance.mark("onInitialClientRender");(0,api_runner_browser/* apiRunner */.h)("onInitialClientRender");}},[]);return/*#__PURE__*/react.createElement(GatsbyRoot,null,SiteRoot);};var renderer=(0,api_runner_browser/* apiRunner */.h)("replaceHydrateFunction",undefined,react_dom.hydrateRoot?react_dom.hydrateRoot:react_dom.hydrate)[0];function runRender(){var rootElement=typeof window!=="undefined"?document.getElementById("___gatsby"):null;if(renderer===react_dom.hydrateRoot){renderer(rootElement,/*#__PURE__*/react.createElement(App,null));}else{renderer(/*#__PURE__*/react.createElement(App,null),rootElement);}}// https://github.com/madrobby/zepto/blob/b5ed8d607f67724788ec9ff492be297f64d47dfc/src/zepto.js#L439-L450\n// TODO remove IE 10 support\nvar doc=document;if(doc.readyState==="complete"||doc.readyState!=="loading"&&!doc.documentElement.doScroll){setTimeout(function(){runRender();},0);}else{var handler=function handler(){doc.removeEventListener("DOMContentLoaded",handler,false);window.removeEventListener("load",handler,false);runRender();};doc.addEventListener("DOMContentLoaded",handler,false);window.addEventListener("load",handler,false);}});});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///678\n')},6947:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var _loader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8741);\n/* harmony import */ var _page_renderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(804);\nvar ProdPageRenderer=function ProdPageRenderer(_ref){var location=_ref.location;var pageResources=_loader__WEBPACK_IMPORTED_MODULE_1__/* .default.loadPageSync */ .ZP.loadPageSync(location.pathname);if(!pageResources){return null;}return/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(_page_renderer__WEBPACK_IMPORTED_MODULE_2__/* .default */ .Z,Object.assign({location:location,pageResources:pageResources},pageResources.json));};/* harmony default export */ __webpack_exports__["default"] = (ProdPageRenderer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjk0Ny5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBTUEsR0FBTUcsQ0FBQUEsZ0JBQWdCLENBQUcsUUFBbkJBLENBQUFBLGdCQUFtQixNQUFrQixJQUFmQyxDQUFBQSxRQUFlLE1BQWZBLFFBQWUsQ0FDekMsR0FBTUMsQ0FBQUEsYUFBYSxDQUFHSixnRkFBQSxDQUFvQkcsUUFBUSxDQUFDRyxRQUE3QixDQUF0QixDQUNBLEdBQUksQ0FBQ0YsYUFBTCxDQUFvQixDQUNsQixNQUFPLEtBQVAsQ0FDRCxDQUNELG1CQUFPTCxnREFBQSxDQUFvQkUsNERBQXBCLGdCQUNMRSxRQUFRLENBQVJBLFFBREssQ0FFTEMsYUFBYSxDQUFiQSxhQUZLLEVBR0ZBLGFBQWEsQ0FBQ0ksSUFIWixFQUFQLENBS0QsQ0FWRCxDQWtCQSwrREFBZU4sZ0JBQWYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hc3NhcGlyLmdpdGh1Yi5pby8uLy5jYWNoZS9wdWJsaWMtcGFnZS1yZW5kZXJlci1wcm9kLmpzP2FmMzkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCJcblxuaW1wb3J0IGxvYWRlciBmcm9tIFwiLi9sb2FkZXJcIlxuaW1wb3J0IEludGVybmFsUGFnZVJlbmRlcmVyIGZyb20gXCIuL3BhZ2UtcmVuZGVyZXJcIlxuXG5jb25zdCBQcm9kUGFnZVJlbmRlcmVyID0gKHsgbG9jYXRpb24gfSkgPT4ge1xuICBjb25zdCBwYWdlUmVzb3VyY2VzID0gbG9hZGVyLmxvYWRQYWdlU3luYyhsb2NhdGlvbi5wYXRobmFtZSlcbiAgaWYgKCFwYWdlUmVzb3VyY2VzKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChJbnRlcm5hbFBhZ2VSZW5kZXJlciwge1xuICAgIGxvY2F0aW9uLFxuICAgIHBhZ2VSZXNvdXJjZXMsXG4gICAgLi4ucGFnZVJlc291cmNlcy5qc29uLFxuICB9KVxufVxuXG5Qcm9kUGFnZVJlbmRlcmVyLnByb3BUeXBlcyA9IHtcbiAgbG9jYXRpb246IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgcGF0aG5hbWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgfSkuaXNSZXF1aXJlZCxcbn1cblxuZXhwb3J0IGRlZmF1bHQgUHJvZFBhZ2VSZW5kZXJlclxuIl0sIm5hbWVzIjpbIlJlYWN0IiwibG9hZGVyIiwiSW50ZXJuYWxQYWdlUmVuZGVyZXIiLCJQcm9kUGFnZVJlbmRlcmVyIiwibG9jYXRpb24iLCJwYWdlUmVzb3VyY2VzIiwibG9hZFBhZ2VTeW5jIiwicGF0aG5hbWUiLCJjcmVhdGVFbGVtZW50IiwianNvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6947\n')},861:function(module,__unused_webpack_exports,__webpack_require__){eval("var preferDefault=function preferDefault(m){return m&&m.default||m;};if(false){}else if(true){module.exports=preferDefault(__webpack_require__(6947));}else{}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODYxLmpzIiwibWFwcGluZ3MiOiJBQUFBLEdBQU1BLENBQUFBLGFBQWEsQ0FBRyxRQUFoQkEsQ0FBQUEsYUFBZ0IsQ0FBQUMsQ0FBQyxRQUFLQSxDQUFBQSxDQUFDLEVBQUlBLENBQUMsQ0FBQ0MsT0FBUixFQUFvQkQsQ0FBeEIsRUFBdkIsQ0FFQSxHQUFJRSxLQUFKLENBQTJDLEVBQTNDLElBRU8sSUFBSUEsSUFBSixDQUFvRCxDQUN6REcsTUFBTSxDQUFDQyxPQUFQLENBQWlCUCxhQUFhLENBQUNRLG1CQUFPLENBQUMsS0FBVCxDQUE5QixDQUNELENBRk0sSUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Fzc2FwaXIuZ2l0aHViLmlvLy4vLmNhY2hlL3B1YmxpYy1wYWdlLXJlbmRlcmVyLmpzPzk3MGQiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgcHJlZmVyRGVmYXVsdCA9IG0gPT4gKG0gJiYgbS5kZWZhdWx0KSB8fCBtXG5cbmlmIChwcm9jZXNzLmVudi5CVUlMRF9TVEFHRSA9PT0gYGRldmVsb3BgKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcHJlZmVyRGVmYXVsdChyZXF1aXJlKGAuL3B1YmxpYy1wYWdlLXJlbmRlcmVyLWRldmApKVxufSBlbHNlIGlmIChwcm9jZXNzLmVudi5CVUlMRF9TVEFHRSA9PT0gYGJ1aWxkLWphdmFzY3JpcHRgKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcHJlZmVyRGVmYXVsdChyZXF1aXJlKGAuL3B1YmxpYy1wYWdlLXJlbmRlcmVyLXByb2RgKSlcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gKCkgPT4gbnVsbFxufVxuIl0sIm5hbWVzIjpbInByZWZlckRlZmF1bHQiLCJtIiwiZGVmYXVsdCIsInByb2Nlc3MiLCJlbnYiLCJCVUlMRF9TVEFHRSIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///861\n")},3639:function(__unused_webpack_module,exports){eval("exports.O=function(Component){return Component;};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzYzOS5qcyIsIm1hcHBpbmdzIjoiQUFBQUEsU0FBQSxDQUFtQixTQUFBRSxTQUFTLFFBQUlBLENBQUFBLFNBQUosRUFBNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hc3NhcGlyLmdpdGh1Yi5pby8uLy5jYWNoZS9yZWFjdC1saWZlY3ljbGVzLWNvbXBhdC5qcz9mNzg1Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMucG9seWZpbGwgPSBDb21wb25lbnQgPT4gQ29tcG9uZW50XG4iXSwibmFtZXMiOlsiZXhwb3J0cyIsInBvbHlmaWxsIiwiQ29tcG9uZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3639\n")},4553:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "J": function() { return /* binding */ maybeGetBrowserRedirect; }\n});\n\n;// CONCATENATED MODULE: ./.cache/redirects.json\nvar redirects_namespaceObject = [];\n;// CONCATENATED MODULE: ./.cache/redirect-utils.js\n// Convert to a map for faster lookup in maybeRedirect()\nvar redirectMap=new Map();var redirectIgnoreCaseMap=new Map();redirects_namespaceObject.forEach(function(redirect){if(redirect.ignoreCase){redirectIgnoreCaseMap.set(redirect.fromPath,redirect);}else{redirectMap.set(redirect.fromPath,redirect);}});function maybeGetBrowserRedirect(pathname){var redirect=redirectMap.get(pathname);if(!redirect){redirect=redirectIgnoreCaseMap.get(pathname.toLowerCase());}return redirect;}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDU1My5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFFQTtBQUVBLEdBQU1DLENBQUFBLFdBQVcsQ0FBRyxHQUFJQyxDQUFBQSxHQUFKLEVBQXBCLENBQ0EsR0FBTUMsQ0FBQUEscUJBQXFCLENBQUcsR0FBSUQsQ0FBQUEsR0FBSixFQUE5QixDQUVBRixpQ0FBQSxDQUFrQixTQUFBSyxRQUFRLENBQUksQ0FDNUIsR0FBSUEsUUFBUSxDQUFDQyxVQUFiLENBQXlCLENBQ3ZCSCxxQkFBcUIsQ0FBQ0ksR0FBdEIsQ0FBMEJGLFFBQVEsQ0FBQ0csUUFBbkMsQ0FBNkNILFFBQTdDLEVBQ0QsQ0FGRCxJQUVPLENBQ0xKLFdBQVcsQ0FBQ00sR0FBWixDQUFnQkYsUUFBUSxDQUFDRyxRQUF6QixDQUFtQ0gsUUFBbkMsRUFDRCxDQUNGLENBTkQsRUFRTyxRQUFTSSxDQUFBQSx1QkFBVCxDQUFpQ0MsUUFBakMsQ0FBMkMsQ0FDaEQsR0FBSUwsQ0FBQUEsUUFBUSxDQUFHSixXQUFXLENBQUNVLEdBQVosQ0FBZ0JELFFBQWhCLENBQWYsQ0FDQSxHQUFJLENBQUNMLFFBQUwsQ0FBZSxDQUNiQSxRQUFRLENBQUdGLHFCQUFxQixDQUFDUSxHQUF0QixDQUEwQkQsUUFBUSxDQUFDRSxXQUFULEVBQTFCLENBQVgsQ0FDRCxDQUNELE1BQU9QLENBQUFBLFFBQVAsQ0FDRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Fzc2FwaXIuZ2l0aHViLmlvLy4vLmNhY2hlL3JlZGlyZWN0LXV0aWxzLmpzPzg5YjgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJlZGlyZWN0cyBmcm9tIFwiLi9yZWRpcmVjdHMuanNvblwiXG5cbi8vIENvbnZlcnQgdG8gYSBtYXAgZm9yIGZhc3RlciBsb29rdXAgaW4gbWF5YmVSZWRpcmVjdCgpXG5cbmNvbnN0IHJlZGlyZWN0TWFwID0gbmV3IE1hcCgpXG5jb25zdCByZWRpcmVjdElnbm9yZUNhc2VNYXAgPSBuZXcgTWFwKClcblxucmVkaXJlY3RzLmZvckVhY2gocmVkaXJlY3QgPT4ge1xuICBpZiAocmVkaXJlY3QuaWdub3JlQ2FzZSkge1xuICAgIHJlZGlyZWN0SWdub3JlQ2FzZU1hcC5zZXQocmVkaXJlY3QuZnJvbVBhdGgsIHJlZGlyZWN0KVxuICB9IGVsc2Uge1xuICAgIHJlZGlyZWN0TWFwLnNldChyZWRpcmVjdC5mcm9tUGF0aCwgcmVkaXJlY3QpXG4gIH1cbn0pXG5cbmV4cG9ydCBmdW5jdGlvbiBtYXliZUdldEJyb3dzZXJSZWRpcmVjdChwYXRobmFtZSkge1xuICBsZXQgcmVkaXJlY3QgPSByZWRpcmVjdE1hcC5nZXQocGF0aG5hbWUpXG4gIGlmICghcmVkaXJlY3QpIHtcbiAgICByZWRpcmVjdCA9IHJlZGlyZWN0SWdub3JlQ2FzZU1hcC5nZXQocGF0aG5hbWUudG9Mb3dlckNhc2UoKSlcbiAgfVxuICByZXR1cm4gcmVkaXJlY3Rcbn1cbiJdLCJuYW1lcyI6WyJyZWRpcmVjdHMiLCJyZWRpcmVjdE1hcCIsIk1hcCIsInJlZGlyZWN0SWdub3JlQ2FzZU1hcCIsImZvckVhY2giLCJyZWRpcmVjdCIsImlnbm9yZUNhc2UiLCJzZXQiLCJmcm9tUGF0aCIsIm1heWJlR2V0QnJvd3NlclJlZGlyZWN0IiwicGF0aG5hbWUiLCJnZXQiLCJ0b0xvd2VyQ2FzZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4553\n')},154:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _api_runner_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7343);\nif(window.location.protocol!=="https:"&&window.location.hostname!=="localhost"){console.error("Service workers can only be used over HTTPS, or on localhost for development");}else if("serviceWorker"in navigator){navigator.serviceWorker.register(""+"/sw.js").then(function(reg){reg.addEventListener("updatefound",function(){(0,_api_runner_browser__WEBPACK_IMPORTED_MODULE_0__/* .apiRunner */ .h)("onServiceWorkerUpdateFound",{serviceWorker:reg});// The updatefound event implies that reg.installing is set; see\n// https://w3c.github.io/ServiceWorker/#service-worker-registration-updatefound-event\nvar installingWorker=reg.installing;console.log("installingWorker",installingWorker);installingWorker.addEventListener("statechange",function(){switch(installingWorker.state){case"installed":if(navigator.serviceWorker.controller){// At this point, the old content will have been purged and the fresh content will\n// have been added to the cache.\n// We set a flag so Gatsby Link knows to refresh the page on next navigation attempt\nwindow.___swUpdated=true;// We call the onServiceWorkerUpdateReady API so users can show update prompts.\n(0,_api_runner_browser__WEBPACK_IMPORTED_MODULE_0__/* .apiRunner */ .h)("onServiceWorkerUpdateReady",{serviceWorker:reg});// If resources failed for the current page, reload.\nif(window.___failedResources){console.log("resources failed, SW updated - reloading");window.location.reload();}}else{// At this point, everything has been precached.\n// It\'s the perfect time to display a "Content is cached for offline use." message.\nconsole.log("Content is now available offline!");// Post to service worker that install is complete.\n// Delay to allow time for the event listener to be added --\n// otherwise fetch is called too soon and resources aren\'t cached.\n(0,_api_runner_browser__WEBPACK_IMPORTED_MODULE_0__/* .apiRunner */ .h)("onServiceWorkerInstalled",{serviceWorker:reg});}break;case"redundant":console.error("The installing service worker became redundant.");(0,_api_runner_browser__WEBPACK_IMPORTED_MODULE_0__/* .apiRunner */ .h)("onServiceWorkerRedundant",{serviceWorker:reg});break;case"activated":(0,_api_runner_browser__WEBPACK_IMPORTED_MODULE_0__/* .apiRunner */ .h)("onServiceWorkerActive",{serviceWorker:reg});break;}});});}).catch(function(e){console.error("Error during service worker registration:",e);});}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU0LmpzIiwibWFwcGluZ3MiOiI7O0FBRUEsR0FDRUMsTUFBTSxDQUFDQyxRQUFQLENBQWdCQyxRQUFoQixhQUNBRixNQUFNLENBQUNDLFFBQVAsQ0FBZ0JFLFFBQWhCLGNBRkYsQ0FHRSxDQUNBQyxPQUFPLENBQUNDLEtBQVIsaUZBR0QsQ0FQRCxJQU9PLElBQUksaUJBQW1CQyxDQUFBQSxTQUF2QixDQUFrQyxDQUN2Q0EsU0FBUyxDQUFDQyxhQUFWLENBQ0dDLFFBREgsQ0FDZUMsRUFEZixXQUVHQyxJQUZILENBRVEsU0FBVUMsR0FBVixDQUFlLENBQ25CQSxHQUFHLENBQUNDLGdCQUFKLGVBQW9DLFVBQU0sQ0FDeENiLHVFQUFTLDhCQUErQixDQUFFUSxhQUFhLENBQUVJLEdBQWpCLENBQS9CLENBQVQsQ0FDQTtBQUNBO0FBQ0EsR0FBTUUsQ0FBQUEsZ0JBQWdCLENBQUdGLEdBQUcsQ0FBQ0csVUFBN0IsQ0FDQVYsT0FBTyxDQUFDVyxHQUFSLG9CQUFnQ0YsZ0JBQWhDLEVBQ0FBLGdCQUFnQixDQUFDRCxnQkFBakIsZUFBaUQsVUFBTSxDQUNyRCxPQUFRQyxnQkFBZ0IsQ0FBQ0csS0FBekIsRUFDRSxnQkFDRSxHQUFJVixTQUFTLENBQUNDLGFBQVYsQ0FBd0JVLFVBQTVCLENBQXdDLENBQ3RDO0FBQ0E7QUFFQTtBQUNBakIsTUFBTSxDQUFDa0IsWUFBUCxDQUFzQixJQUF0QixDQUNBO0FBQ0FuQix1RUFBUyw4QkFBK0IsQ0FBRVEsYUFBYSxDQUFFSSxHQUFqQixDQUEvQixDQUFULENBRUE7QUFDQSxHQUFJWCxNQUFNLENBQUNtQixrQkFBWCxDQUErQixDQUM3QmYsT0FBTyxDQUFDVyxHQUFSLDZDQUNBZixNQUFNLENBQUNDLFFBQVAsQ0FBZ0JtQixNQUFoQixHQUNELENBQ0YsQ0FkRCxJQWNPLENBQ0w7QUFDQTtBQUNBaEIsT0FBTyxDQUFDVyxHQUFSLHNDQUVBO0FBQ0E7QUFDQTtBQUNBaEIsdUVBQVMsNEJBQTZCLENBQUVRLGFBQWEsQ0FBRUksR0FBakIsQ0FBN0IsQ0FBVCxDQUNELENBQ0QsTUFFRixnQkFDRVAsT0FBTyxDQUFDQyxLQUFSLG9EQUNBTix1RUFBUyw0QkFBNkIsQ0FBRVEsYUFBYSxDQUFFSSxHQUFqQixDQUE3QixDQUFULENBQ0EsTUFFRixnQkFDRVosdUVBQVMseUJBQTBCLENBQUVRLGFBQWEsQ0FBRUksR0FBakIsQ0FBMUIsQ0FBVCxDQUNBLE1BbkNKLENBcUNELENBdENELEVBdUNELENBN0NELEVBOENELENBakRILEVBa0RHVSxLQWxESCxDQWtEUyxTQUFVQyxDQUFWLENBQWEsQ0FDbEJsQixPQUFPLENBQUNDLEtBQVIsNkNBQTJEaUIsQ0FBM0QsRUFDRCxDQXBESCxFQXFERCIsInNvdXJjZXMiOlsid2VicGFjazovL2Fzc2FwaXIuZ2l0aHViLmlvLy4vLmNhY2hlL3JlZ2lzdGVyLXNlcnZpY2Utd29ya2VyLmpzPzM1MjUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXBpUnVubmVyIH0gZnJvbSBcIi4vYXBpLXJ1bm5lci1icm93c2VyXCJcblxuaWYgKFxuICB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgIT09IGBodHRwczpgICYmXG4gIHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSAhPT0gYGxvY2FsaG9zdGBcbikge1xuICBjb25zb2xlLmVycm9yKFxuICAgIGBTZXJ2aWNlIHdvcmtlcnMgY2FuIG9ubHkgYmUgdXNlZCBvdmVyIEhUVFBTLCBvciBvbiBsb2NhbGhvc3QgZm9yIGRldmVsb3BtZW50YFxuICApXG59IGVsc2UgaWYgKGBzZXJ2aWNlV29ya2VyYCBpbiBuYXZpZ2F0b3IpIHtcbiAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXJcbiAgICAucmVnaXN0ZXIoYCR7X19CQVNFX1BBVEhfX30vc3cuanNgKVxuICAgIC50aGVuKGZ1bmN0aW9uIChyZWcpIHtcbiAgICAgIHJlZy5hZGRFdmVudExpc3RlbmVyKGB1cGRhdGVmb3VuZGAsICgpID0+IHtcbiAgICAgICAgYXBpUnVubmVyKGBvblNlcnZpY2VXb3JrZXJVcGRhdGVGb3VuZGAsIHsgc2VydmljZVdvcmtlcjogcmVnIH0pXG4gICAgICAgIC8vIFRoZSB1cGRhdGVmb3VuZCBldmVudCBpbXBsaWVzIHRoYXQgcmVnLmluc3RhbGxpbmcgaXMgc2V0OyBzZWVcbiAgICAgICAgLy8gaHR0cHM6Ly93M2MuZ2l0aHViLmlvL1NlcnZpY2VXb3JrZXIvI3NlcnZpY2Utd29ya2VyLXJlZ2lzdHJhdGlvbi11cGRhdGVmb3VuZC1ldmVudFxuICAgICAgICBjb25zdCBpbnN0YWxsaW5nV29ya2VyID0gcmVnLmluc3RhbGxpbmdcbiAgICAgICAgY29uc29sZS5sb2coYGluc3RhbGxpbmdXb3JrZXJgLCBpbnN0YWxsaW5nV29ya2VyKVxuICAgICAgICBpbnN0YWxsaW5nV29ya2VyLmFkZEV2ZW50TGlzdGVuZXIoYHN0YXRlY2hhbmdlYCwgKCkgPT4ge1xuICAgICAgICAgIHN3aXRjaCAoaW5zdGFsbGluZ1dvcmtlci5zdGF0ZSkge1xuICAgICAgICAgICAgY2FzZSBgaW5zdGFsbGVkYDpcbiAgICAgICAgICAgICAgaWYgKG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgICAgICAvLyBBdCB0aGlzIHBvaW50LCB0aGUgb2xkIGNvbnRlbnQgd2lsbCBoYXZlIGJlZW4gcHVyZ2VkIGFuZCB0aGUgZnJlc2ggY29udGVudCB3aWxsXG4gICAgICAgICAgICAgICAgLy8gaGF2ZSBiZWVuIGFkZGVkIHRvIHRoZSBjYWNoZS5cblxuICAgICAgICAgICAgICAgIC8vIFdlIHNldCBhIGZsYWcgc28gR2F0c2J5IExpbmsga25vd3MgdG8gcmVmcmVzaCB0aGUgcGFnZSBvbiBuZXh0IG5hdmlnYXRpb24gYXR0ZW1wdFxuICAgICAgICAgICAgICAgIHdpbmRvdy5fX19zd1VwZGF0ZWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgLy8gV2UgY2FsbCB0aGUgb25TZXJ2aWNlV29ya2VyVXBkYXRlUmVhZHkgQVBJIHNvIHVzZXJzIGNhbiBzaG93IHVwZGF0ZSBwcm9tcHRzLlxuICAgICAgICAgICAgICAgIGFwaVJ1bm5lcihgb25TZXJ2aWNlV29ya2VyVXBkYXRlUmVhZHlgLCB7IHNlcnZpY2VXb3JrZXI6IHJlZyB9KVxuXG4gICAgICAgICAgICAgICAgLy8gSWYgcmVzb3VyY2VzIGZhaWxlZCBmb3IgdGhlIGN1cnJlbnQgcGFnZSwgcmVsb2FkLlxuICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuX19fZmFpbGVkUmVzb3VyY2VzKSB7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgcmVzb3VyY2VzIGZhaWxlZCwgU1cgdXBkYXRlZCAtIHJlbG9hZGluZ2ApXG4gICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gQXQgdGhpcyBwb2ludCwgZXZlcnl0aGluZyBoYXMgYmVlbiBwcmVjYWNoZWQuXG4gICAgICAgICAgICAgICAgLy8gSXQncyB0aGUgcGVyZmVjdCB0aW1lIHRvIGRpc3BsYXkgYSBcIkNvbnRlbnQgaXMgY2FjaGVkIGZvciBvZmZsaW5lIHVzZS5cIiBtZXNzYWdlLlxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBDb250ZW50IGlzIG5vdyBhdmFpbGFibGUgb2ZmbGluZSFgKVxuXG4gICAgICAgICAgICAgICAgLy8gUG9zdCB0byBzZXJ2aWNlIHdvcmtlciB0aGF0IGluc3RhbGwgaXMgY29tcGxldGUuXG4gICAgICAgICAgICAgICAgLy8gRGVsYXkgdG8gYWxsb3cgdGltZSBmb3IgdGhlIGV2ZW50IGxpc3RlbmVyIHRvIGJlIGFkZGVkIC0tXG4gICAgICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIGZldGNoIGlzIGNhbGxlZCB0b28gc29vbiBhbmQgcmVzb3VyY2VzIGFyZW4ndCBjYWNoZWQuXG4gICAgICAgICAgICAgICAgYXBpUnVubmVyKGBvblNlcnZpY2VXb3JrZXJJbnN0YWxsZWRgLCB7IHNlcnZpY2VXb3JrZXI6IHJlZyB9KVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICAgIGNhc2UgYHJlZHVuZGFudGA6XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFRoZSBpbnN0YWxsaW5nIHNlcnZpY2Ugd29ya2VyIGJlY2FtZSByZWR1bmRhbnQuYClcbiAgICAgICAgICAgICAgYXBpUnVubmVyKGBvblNlcnZpY2VXb3JrZXJSZWR1bmRhbnRgLCB7IHNlcnZpY2VXb3JrZXI6IHJlZyB9KVxuICAgICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgICBjYXNlIGBhY3RpdmF0ZWRgOlxuICAgICAgICAgICAgICBhcGlSdW5uZXIoYG9uU2VydmljZVdvcmtlckFjdGl2ZWAsIHsgc2VydmljZVdvcmtlcjogcmVnIH0pXG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9KVxuICAgIC5jYXRjaChmdW5jdGlvbiAoZSkge1xuICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgZHVyaW5nIHNlcnZpY2Ugd29ya2VyIHJlZ2lzdHJhdGlvbjpgLCBlKVxuICAgIH0pXG59XG4iXSwibmFtZXMiOlsiYXBpUnVubmVyIiwid2luZG93IiwibG9jYXRpb24iLCJwcm90b2NvbCIsImhvc3RuYW1lIiwiY29uc29sZSIsImVycm9yIiwibmF2aWdhdG9yIiwic2VydmljZVdvcmtlciIsInJlZ2lzdGVyIiwiX19CQVNFX1BBVEhfXyIsInRoZW4iLCJyZWciLCJhZGRFdmVudExpc3RlbmVyIiwiaW5zdGFsbGluZ1dvcmtlciIsImluc3RhbGxpbmciLCJsb2ciLCJzdGF0ZSIsImNvbnRyb2xsZXIiLCJfX19zd1VwZGF0ZWQiLCJfX19mYWlsZWRSZXNvdXJjZXMiLCJyZWxvYWQiLCJjYXRjaCIsImUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///154\n')},1578:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": function() { return /* binding */ stripPrefix; }\n/* harmony export */ });\n/**\n * Remove a prefix from a string. Return the input string if the given prefix\n * isn\'t found.\n */function stripPrefix(str,prefix){if(prefix===void 0){prefix="";}if(!prefix){return str;}if(str===prefix){return"/";}if(str.startsWith(prefix+"/")){return str.slice(prefix.length);}return str;}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU3OC5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBQTtBQUNBO0FBQ0E7QUFDQSxHQUVlLFFBQVNBLENBQUFBLFdBQVQsQ0FBcUJDLEdBQXJCLENBQTBCQyxNQUExQixDQUF1QyxJQUFiQSxNQUFhLFdBQWJBLE1BQWEsS0FDcEQsR0FBSSxDQUFDQSxNQUFMLENBQWEsQ0FDWCxNQUFPRCxDQUFBQSxHQUFQLENBQ0QsQ0FFRCxHQUFJQSxHQUFHLEdBQUtDLE1BQVosQ0FBb0IsQ0FDbEIsVUFDRCxDQUVELEdBQUlELEdBQUcsQ0FBQ0UsVUFBSixDQUFrQkQsTUFBbEIsS0FBSixDQUFrQyxDQUNoQyxNQUFPRCxDQUFBQSxHQUFHLENBQUNHLEtBQUosQ0FBVUYsTUFBTSxDQUFDRyxNQUFqQixDQUFQLENBQ0QsQ0FFRCxNQUFPSixDQUFBQSxHQUFQLENBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hc3NhcGlyLmdpdGh1Yi5pby8uLy5jYWNoZS9zdHJpcC1wcmVmaXguanM/NzEyMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFJlbW92ZSBhIHByZWZpeCBmcm9tIGEgc3RyaW5nLiBSZXR1cm4gdGhlIGlucHV0IHN0cmluZyBpZiB0aGUgZ2l2ZW4gcHJlZml4XG4gKiBpc24ndCBmb3VuZC5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdHJpcFByZWZpeChzdHIsIHByZWZpeCA9IGBgKSB7XG4gIGlmICghcHJlZml4KSB7XG4gICAgcmV0dXJuIHN0clxuICB9XG5cbiAgaWYgKHN0ciA9PT0gcHJlZml4KSB7XG4gICAgcmV0dXJuIGAvYFxuICB9XG5cbiAgaWYgKHN0ci5zdGFydHNXaXRoKGAke3ByZWZpeH0vYCkpIHtcbiAgICByZXR1cm4gc3RyLnNsaWNlKHByZWZpeC5sZW5ndGgpXG4gIH1cblxuICByZXR1cm4gc3RyXG59XG4iXSwibmFtZXMiOlsic3RyaXBQcmVmaXgiLCJzdHIiLCJwcmVmaXgiLCJzdGFydHNXaXRoIiwic2xpY2UiLCJsZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1578\n')},9037:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n// custom typefaces\n// Highlighting for code blocks\n// normalize CSS across browsers\n// custom CSS styles\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTAzNy5qcyIsIm1hcHBpbmdzIjoiO0FBQUE7QUFLQTtBQU1BO0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hc3NhcGlyLmdpdGh1Yi5pby8uL2dhdHNieS1icm93c2VyLmpzPzE5ZDciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gY3VzdG9tIHR5cGVmYWNlc1xuaW1wb3J0IFwidHlwZWZhY2UtbW9udHNlcnJhdFwiXG5pbXBvcnQgXCJ0eXBlZmFjZS1tZXJyaXdlYXRoZXJcIlxuaW1wb3J0IFwiQGZvbnRzb3VyY2UvZmlyYS1jb2RlXCJcblxuLy8gSGlnaGxpZ2h0aW5nIGZvciBjb2RlIGJsb2Nrc1xuaW1wb3J0IFwicHJpc20tdGhlbWVzL3RoZW1lcy9wcmlzbS1jb2xkYXJrLWRhcmsuY3NzXCJcbmltcG9ydCBcInByaXNtanMvcGx1Z2lucy9saW5lLW51bWJlcnMvcHJpc20tbGluZS1udW1iZXJzLmNzc1wiXG5pbXBvcnQgXCJwcmlzbWpzL3BsdWdpbnMvY29tbWFuZC1saW5lL3ByaXNtLWNvbW1hbmQtbGluZS5jc3NcIlxuaW1wb3J0IFwicHJpc21qcy9wbHVnaW5zL2NvbW1hbmQtbGluZS9wcmlzbS1jb21tYW5kLWxpbmUuY3NzXCJcblxuLy8gbm9ybWFsaXplIENTUyBhY3Jvc3MgYnJvd3NlcnNcbmltcG9ydCBcIi4vc3JjL25vcm1hbGl6ZS5jc3NcIlxuLy8gY3VzdG9tIENTUyBzdHlsZXNcbmltcG9ydCBcIi4vc3JjL3N0eWxlLmNzc1wiXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9037\n")},4660:function(__unused_webpack_module,exports){"use strict";eval('exports.onRouteUpdate=function(_ref){var location=_ref.location;if( false||typeof gtag!=="function"){return null;}var pathIsExcluded=location&&typeof window.excludeGtagPaths!=="undefined"&&window.excludeGtagPaths.some(function(rx){return rx.test(location.pathname);});if(pathIsExcluded)return null;// wrap inside a timeout to make sure react-helmet is done with its changes (https://github.com/gatsbyjs/gatsby/issues/11592)\nvar sendPageView=function sendPageView(){var pagePath=location?location.pathname+location.search+location.hash:undefined;window.gtag("event","page_view",{page_path:pagePath});};if("requestAnimationFrame"in window){requestAnimationFrame(function(){requestAnimationFrame(sendPageView);});}else{// simulate 2 rAF calls\nsetTimeout(sendPageView,32);}return null;};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDY2MC5qcyIsIm1hcHBpbmdzIjoiQUFFQUEscUJBQUEsQ0FBd0IsU0FBVUUsSUFBVixDQUFnQixDQUN0QyxHQUFJQyxDQUFBQSxRQUFRLENBQUdELElBQUksQ0FBQ0MsUUFBcEIsQ0FFQSxHQUFJQyxNQUFBLEVBQXlDLE1BQU9HLENBQUFBLElBQVAsR0FBZ0IsVUFBN0QsQ0FBeUUsQ0FDdkUsTUFBTyxLQUFQLENBQ0QsQ0FFRCxHQUFJQyxDQUFBQSxjQUFjLENBQUdMLFFBQVEsRUFBSSxNQUFPTSxDQUFBQSxNQUFNLENBQUNDLGdCQUFkLEdBQW1DLFdBQS9DLEVBQThERCxNQUFNLENBQUNDLGdCQUFQLENBQXdCQyxJQUF4QixDQUE2QixTQUFVQyxFQUFWLENBQWMsQ0FDNUgsTUFBT0EsQ0FBQUEsRUFBRSxDQUFDQyxJQUFILENBQVFWLFFBQVEsQ0FBQ1csUUFBakIsQ0FBUCxDQUNELENBRmtGLENBQW5GLENBR0EsR0FBSU4sY0FBSixDQUFvQixNQUFPLEtBQVAsQ0FBYTtBQUVqQyxHQUFJTyxDQUFBQSxZQUFZLENBQUcsUUFBU0EsQ0FBQUEsWUFBVCxFQUF3QixDQUN6QyxHQUFJQyxDQUFBQSxRQUFRLENBQUdiLFFBQVEsQ0FBR0EsUUFBUSxDQUFDVyxRQUFULENBQW9CWCxRQUFRLENBQUNjLE1BQTdCLENBQXNDZCxRQUFRLENBQUNlLElBQWxELENBQXlEQyxTQUFoRixDQUNBVixNQUFNLENBQUNGLElBQVAsQ0FBWSxPQUFaLENBQXFCLFdBQXJCLENBQWtDLENBQ2hDYSxTQUFTLENBQUVKLFFBRHFCLENBQWxDLEVBR0QsQ0FMRCxDQU9BLEdBQUkseUJBQTJCUCxDQUFBQSxNQUEvQixDQUF1QyxDQUNyQ1kscUJBQXFCLENBQUMsVUFBWSxDQUNoQ0EscUJBQXFCLENBQUNOLFlBQUQsQ0FBckIsQ0FDRCxDQUZvQixDQUFyQixDQUdELENBSkQsSUFJTyxDQUNMO0FBQ0FPLFVBQVUsQ0FBQ1AsWUFBRCxDQUFlLEVBQWYsQ0FBVixDQUNELENBRUQsTUFBTyxLQUFQLENBQ0QsQ0E3QkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hc3NhcGlyLmdpdGh1Yi5pby8uL25vZGVfbW9kdWxlcy9nYXRzYnktcGx1Z2luLWdvb2dsZS1ndGFnL2dhdHNieS1icm93c2VyLmpzP2RjMTYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMub25Sb3V0ZVVwZGF0ZSA9IGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBsb2NhdGlvbiA9IF9yZWYubG9jYXRpb247XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiB8fCB0eXBlb2YgZ3RhZyAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgcGF0aElzRXhjbHVkZWQgPSBsb2NhdGlvbiAmJiB0eXBlb2Ygd2luZG93LmV4Y2x1ZGVHdGFnUGF0aHMgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmV4Y2x1ZGVHdGFnUGF0aHMuc29tZShmdW5jdGlvbiAocngpIHtcbiAgICByZXR1cm4gcngudGVzdChsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH0pO1xuICBpZiAocGF0aElzRXhjbHVkZWQpIHJldHVybiBudWxsOyAvLyB3cmFwIGluc2lkZSBhIHRpbWVvdXQgdG8gbWFrZSBzdXJlIHJlYWN0LWhlbG1ldCBpcyBkb25lIHdpdGggaXRzIGNoYW5nZXMgKGh0dHBzOi8vZ2l0aHViLmNvbS9nYXRzYnlqcy9nYXRzYnkvaXNzdWVzLzExNTkyKVxuXG4gIHZhciBzZW5kUGFnZVZpZXcgPSBmdW5jdGlvbiBzZW5kUGFnZVZpZXcoKSB7XG4gICAgdmFyIHBhZ2VQYXRoID0gbG9jYXRpb24gPyBsb2NhdGlvbi5wYXRobmFtZSArIGxvY2F0aW9uLnNlYXJjaCArIGxvY2F0aW9uLmhhc2ggOiB1bmRlZmluZWQ7XG4gICAgd2luZG93Lmd0YWcoXCJldmVudFwiLCBcInBhZ2Vfdmlld1wiLCB7XG4gICAgICBwYWdlX3BhdGg6IHBhZ2VQYXRoXG4gICAgfSk7XG4gIH07XG5cbiAgaWYgKFwicmVxdWVzdEFuaW1hdGlvbkZyYW1lXCIgaW4gd2luZG93KSB7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShzZW5kUGFnZVZpZXcpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIC8vIHNpbXVsYXRlIDIgckFGIGNhbGxzXG4gICAgc2V0VGltZW91dChzZW5kUGFnZVZpZXcsIDMyKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufTsiXSwibmFtZXMiOlsiZXhwb3J0cyIsIm9uUm91dGVVcGRhdGUiLCJfcmVmIiwibG9jYXRpb24iLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJndGFnIiwicGF0aElzRXhjbHVkZWQiLCJ3aW5kb3ciLCJleGNsdWRlR3RhZ1BhdGhzIiwic29tZSIsInJ4IiwidGVzdCIsInBhdGhuYW1lIiwic2VuZFBhZ2VWaWV3IiwicGFnZVBhdGgiLCJzZWFyY2giLCJoYXNoIiwidW5kZWZpbmVkIiwicGFnZV9wYXRoIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwic2V0VGltZW91dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4660\n')},2407:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "L": function() { return /* binding */ U; },\n/* harmony export */   "M": function() { return /* binding */ Q; },\n/* harmony export */   "P": function() { return /* binding */ K; },\n/* harmony export */   "_": function() { return /* binding */ p; },\n/* harmony export */   "a": function() { return /* binding */ c; },\n/* harmony export */   "b": function() { return /* binding */ C; },\n/* harmony export */   "c": function() { return /* binding */ dt; },\n/* harmony export */   "g": function() { return /* binding */ q; }\n/* harmony export */ });\n/* unused harmony exports G, S, d, e, f, h, i, j, w */\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var common_tags__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4041);\n/* harmony import */ var camelcase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4811);\n/* harmony import */ var camelcase__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(camelcase__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5697);\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(3935);\nfunction c(){return(c=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var i in r){Object.prototype.hasOwnProperty.call(r,i)&&(t[i]=r[i]);}}return t;}).apply(this,arguments);}function h(t,e){return(h=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t;})(t,e);}function p(t,e){if(null==t)return{};var r,i,a={},n=Object.keys(t);for(i=0;i<n.length;i++){e.indexOf(r=n[i])>=0||(a[r]=t[r]);}return a;}var g,f=(/* unused pure expression or super */ null && ([.25,.5,1,2])),m=(/* unused pure expression or super */ null && ([750,1080,1366,1920])),v=(/* unused pure expression or super */ null && ([320,654,768,1024,1366,1600,1920,2048,2560,3440,3840,4096])),y=function y(t){return console.warn(t);},w=function w(t,e){return t-e;},b=function b(t){return t.map(function(t){return t.src+" "+t.width+"w";}).join(",\\n");};function E(t){var e=t.lastIndexOf(".");if(-1!==e){var r=t.substr(e+1);if("jpeg"===r)return"jpg";if(3===r.length||4===r.length)return r;}}function S(t){var e=t.layout,r=void 0===e?"constrained":e,i=t.width,a=t.height,n=t.sourceMetadata,o=t.breakpoints,l=t.aspectRatio,d=t.formats,u=void 0===d?["auto","webp"]:d;return u=u.map(function(t){return t.toLowerCase();}),r=s(r),i&&a?c({},t,{formats:u,layout:r,aspectRatio:i/a}):(n.width&&n.height&&!l&&(l=n.width/n.height),"fullWidth"===r?(i=i||n.width||o[o.length-1],a=a||Math.round(i/(l||1.3333333333333333))):(i||(i=a&&l?a*l:n.width?n.width:a?Math.round(a/1.3333333333333333):800),l&&!a?a=Math.round(i/l):l||(l=i/a)),c({},t,{width:i,height:a,aspectRatio:l,layout:r,formats:u}));}function M(t,e){var r;return void 0===e&&(e=20),null==(r=(0,(t=S(t)).generateImageSource)(t.filename,e,Math.round(e/t.aspectRatio),t.sourceMetadata.format||"jpg",t.fit,t.options))?void 0:r.src;}function L(t){var e,r=(t=S(t)).pluginName,i=t.sourceMetadata,a=t.generateImageSource,n=t.layout,s=t.fit,l=t.options,d=t.width,u=t.height,h=t.filename,p=t.reporter,v=void 0===p?{warn:y}:p,w=t.backgroundColor,M=t.placeholderURL;if(r||v.warn(\'[gatsby-plugin-image] "generateImageData" was not passed a plugin name\'),"function"!=typeof a)throw new Error("generateImageSource must be a function");i&&(i.width||i.height)?i.format||(i.format=E(h)):i={width:d,height:u,format:(null==(e=i)?void 0:e.format)||E(h)||"auto"};var L=new Set(t.formats);(0===L.size||L.has("auto")||L.has(""))&&(L.delete("auto"),L.delete(""),L.add(i.format)),L.has("jpg")&&L.has("png")&&(v.warn("["+r+"] Specifying both \'jpg\' and \'png\' formats is not supported. Using \'auto\' instead"),L.delete("jpg"===i.format?"png":"jpg"));var _=function(t){var e=t.filename,r=t.layout,i=void 0===r?"constrained":r,a=t.sourceMetadata,n=t.reporter,s=void 0===n?{warn:y}:n,l=t.breakpoints,d=void 0===l?m:l,u=Object.entries({width:t.width,height:t.height}).filter(function(t){var e=t[1];return"number"==typeof e&&e<1;});if(u.length)throw new Error("Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are "+u.map(function(t){return t.join(": ");}).join(", "));return"fixed"===i?function(t){var e=t.filename,r=t.sourceMetadata,i=t.width,a=t.height,n=t.fit,s=void 0===n?"cover":n,l=t.outputPixelDensities,d=t.reporter,u=void 0===d?{warn:y}:d,c=r.width/r.height,h=k(void 0===l?f:l);if(i&&a){var p=j(r,{width:i,height:a,fit:s});i=p.width,a=p.height,c=p.aspectRatio;}i?a||(a=Math.round(i/c)):i=a?Math.round(a*c):800;var m,v,w=i;if(r.width<i||r.height<a){var b=r.width<i?"width":"height";u.warn(o(g||(m=["\\n    The requested ",\' "\',\'px" for the image \'," was larger than the actual image "," of ","px. If possible, replace the current image with a larger one."],v||(v=m.slice(0)),m.raw=v,g=m),b,"width"===b?i:a,e,b,r[b])),"width"===b?(i=r.width,a=Math.round(i/c)):i=(a=r.height)*c;}return{sizes:h.filter(function(t){return t>=1;}).map(function(t){return Math.round(t*i);}).filter(function(t){return t<=r.width;}),aspectRatio:c,presentationWidth:w,presentationHeight:Math.round(w/c),unscaledWidth:i};}(t):"constrained"===i?R(t):"fullWidth"===i?R(c({breakpoints:d},t)):(s.warn("No valid layout was provided for the image at "+e+". Valid image layouts are fixed, fullWidth, and constrained. Found "+i),{sizes:[a.width],presentationWidth:a.width,presentationHeight:a.height,aspectRatio:a.width/a.height,unscaledWidth:a.width});}(c({},t,{sourceMetadata:i})),x={sources:[]},I=t.sizes;I||(I=function(t,e){switch(e){case"constrained":return"(min-width: "+t+"px) "+t+"px, 100vw";case"fixed":return t+"px";case"fullWidth":return"100vw";default:return;}}(_.presentationWidth,n)),L.forEach(function(t){var e=_.sizes.map(function(e){var i=a(h,e,Math.round(e/_.aspectRatio),t,s,l);if(null!=i&&i.width&&i.height&&i.src&&i.format)return i;v.warn("["+r+"] The resolver for image "+h+" returned an invalid value.");}).filter(Boolean);if("jpg"===t||"png"===t||"auto"===t){var i=e.find(function(t){return t.width===_.unscaledWidth;})||e[0];i&&(x.fallback={src:i.src,srcSet:b(e),sizes:I});}else{var n;null==(n=x.sources)||n.push({srcSet:b(e),sizes:I,type:"image/"+t});}});var N={images:x,layout:n,backgroundColor:w};switch(M&&(N.placeholder={fallback:M}),n){case"fixed":N.width=_.presentationWidth,N.height=_.presentationHeight;break;case"fullWidth":N.width=1,N.height=1/_.aspectRatio;break;case"constrained":N.width=t.width||_.presentationWidth||1,N.height=(N.width||1)/_.aspectRatio;}return N;}var k=function k(t){return Array.from(new Set([1].concat(t))).sort(w);};function R(t){var e,r=t.sourceMetadata,i=t.width,a=t.height,n=t.fit,o=void 0===n?"cover":n,s=t.outputPixelDensities,l=t.breakpoints,d=t.layout,u=r.width/r.height,c=k(void 0===s?f:s);if(i&&a){var h=j(r,{width:i,height:a,fit:o});i=h.width,a=h.height,u=h.aspectRatio;}i=i&&Math.min(i,r.width),a=a&&Math.min(a,r.height),i||a||(a=(i=Math.min(800,r.width))/u),i||(i=a*u);var p=i;return(r.width<i||r.height<a)&&(i=r.width,a=r.height),i=Math.round(i),(null==l?void 0:l.length)>0?(e=l.filter(function(t){return t<=r.width;})).length<l.length&&!e.includes(r.width)&&e.push(r.width):e=(e=c.map(function(t){return Math.round(t*i);})).filter(function(t){return t<=r.width;}),"constrained"!==d||e.includes(i)||e.push(i),{sizes:e=e.sort(w),aspectRatio:u,presentationWidth:p,presentationHeight:Math.round(p/u),unscaledWidth:i};}function j(t,e){var r=t.width/t.height,i=e.width,a=e.height;switch(e.fit){case"fill":i=e.width?e.width:t.width,a=e.height?e.height:t.height;break;case"inside":var n=e.width?e.width:Number.MAX_SAFE_INTEGER,o=e.height?e.height:Number.MAX_SAFE_INTEGER;i=Math.min(n,Math.round(o*r)),a=Math.min(o,Math.round(n/r));break;case"outside":var s=e.width?e.width:0,l=e.height?e.height:0;i=Math.max(s,Math.round(l*r)),a=Math.max(l,Math.round(s/r));break;default:e.width&&!e.height&&(i=e.width,a=Math.round(e.width/r)),e.height&&!e.width&&(i=Math.round(e.height*r),a=e.height);}return{width:i,height:a,aspectRatio:i/a};}var _=(/* unused pure expression or super */ null && (["baseUrl","urlBuilder","sourceWidth","sourceHeight","pluginName","formats","breakpoints","options"])),x=(/* unused pure expression or super */ null && (["images","placeholder"])),I=new Set(),N=function N(){return"undefined"!=typeof HTMLImageElement&&"loading"in HTMLImageElement.prototype;};function O(){return true&&true;}function W(t){t&&I.add(t);}function z(t){return I.has(t);}var T=function T(t){var e;return function(t){var e,r;return Boolean(null==t||null==(e=t.images)||null==(r=e.fallback)?void 0:r.src);}(t)?t:function(t){return Boolean(null==t?void 0:t.gatsbyImageData);}(t)?t.gatsbyImageData:null==t||null==(e=t.childImageSharp)?void 0:e.gatsbyImageData;},P=function P(t){var e,r,i;return null==(e=T(t))||null==(r=e.images)||null==(i=r.fallback)?void 0:i.src;},H=function H(t){var e,r,i;return null==(e=T(t))||null==(r=e.images)||null==(i=r.fallback)?void 0:i.srcSet;};function D(t){var e,r=t.baseUrl,i=t.urlBuilder,a=t.sourceWidth,n=t.sourceHeight,o=t.pluginName,s=void 0===o?"getImageData":o,l=t.formats,d=void 0===l?["auto"]:l,u=t.breakpoints,h=t.options,g=p(t,_);return null!=(e=u)&&e.length||"fullWidth"!==g.layout&&"FULL_WIDTH"!==g.layout||(u=v),L(c({},g,{pluginName:s,generateImageSource:function generateImageSource(t,e,r,a){return{width:e,height:r,format:a,src:i({baseUrl:t,width:e,height:r,options:h,format:a})};},filename:r,formats:d,breakpoints:u,sourceMetadata:{width:a,height:n,format:"auto"}}));}function C(t,e,r,i,a,n,o,s){var l,d;return void 0===s&&(s={}),null!=o&&o.current&&!("objectFit"in document.documentElement.style)&&(o.current.dataset.objectFit=null!=(l=s.objectFit)?l:"cover",o.current.dataset.objectPosition=""+(null!=(d=s.objectPosition)?d:"50% 50%"),function(t){try{var e=function e(){window.objectFitPolyfill(t.current);},r=function(){if(!("objectFitPolyfill"in window))return Promise.resolve(__webpack_require__.e(/* import() */ 231).then(__webpack_require__.t.bind(__webpack_require__, 7231, 23))).then(function(){});}();Promise.resolve(r&&r.then?r.then(e):e());}catch(t){return Promise.reject(t);}}(o)),O()||(s=c({height:"100%",left:0,position:"absolute",top:0,transform:"translateZ(0)",transition:"opacity 250ms linear",width:"100%",willChange:"opacity"},s)),c({},r,{loading:i,shouldLoad:t,"data-main-image":"",style:c({},s,{opacity:e?1:0}),onLoad:function onLoad(t){if(!e){W(n);var r=t.currentTarget,i=new Image();i.src=r.currentSrc,i.decode?i.decode().catch(function(){}).then(function(){a(!0);}):a(!0);}},ref:o});}function q(t,e,r,i,a,n,o,s){var l={};n&&(l.backgroundColor=n,"fixed"===r?(l.width=i,l.height=a,l.backgroundColor=n,l.position="relative"):("constrained"===r||"fullWidth"===r)&&(l.position="absolute",l.top=0,l.left=0,l.bottom=0,l.right=0)),o&&(l.objectFit=o),s&&(l.objectPosition=s);var d=c({},t,{"aria-hidden":!0,"data-placeholder-image":"",style:c({opacity:e?0:1,transition:"opacity 500ms linear"},l)});return O()||(d.style={height:"100%",left:0,position:"absolute",top:0,width:"100%"}),d;}function A(t,e){var r,i,a,n=t.images,o=t.placeholder,s=c({},p(t,x),{images:c({},n,{sources:[]}),placeholder:o&&c({},o,{sources:[]})});return e.forEach(function(e){var r,i=e.media,a=e.image;i?(a.layout!==t.layout&&"development"==="production"&&console.warn(\'[gatsby-plugin-image] Mismatched image layout: expected "\'+t.layout+\'" but received "\'+a.layout+\'". All art-directed images use the same layout as the default image\'),(r=s.images.sources).push.apply(r,a.images.sources.map(function(t){return c({},t,{media:i});}).concat([{media:i,srcSet:a.images.fallback.srcSet}])),s.placeholder&&s.placeholder.sources.push({media:i,srcSet:a.placeholder.fallback})): false&&0;}),(r=s.images.sources).push.apply(r,n.sources),null!=o&&o.sources&&(null==(i=s.placeholder)||(a=i.sources).push.apply(a,o.sources)),s;}var F,G=["children"],V=function V(t){var r=t.layout,i=t.width,a=t.height;return"fullWidth"===r?/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{"aria-hidden":!0,style:{paddingTop:a/i*100+"%"}}):"constrained"===r?/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{maxWidth:i,display:"block"}},/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("img",{alt:"",role:"presentation","aria-hidden":"true",src:"data:image/svg+xml;charset=utf-8,%3Csvg height=\'"+a+"\' width=\'"+i+"\' xmlns=\'http://www.w3.org/2000/svg\' version=\'1.1\'%3E%3C/svg%3E",style:{maxWidth:"100%",display:"block",position:"static"}})):null;},U=function U(t){var i=t.children,a=p(t,G);return/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(V,c({},a)),i,!1);},B=["src","srcSet","loading","alt","shouldLoad","innerRef"],J=["fallback","sources","shouldLoad"],Y=function Y(t){var r=t.src,i=t.srcSet,a=t.loading,n=t.alt,o=void 0===n?"":n,s=t.shouldLoad,l=t.innerRef,d=p(t,B);return/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("img",c({},d,{decoding:"async",loading:a,src:s?r:void 0,"data-src":s?void 0:r,srcSet:s?i:void 0,"data-srcset":s?void 0:i,alt:o,ref:l}));},X=/*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function(t,r){var i=t.fallback,a=t.sources,n=void 0===a?[]:a,o=t.shouldLoad,s=void 0===o||o,l=p(t,J),d=l.sizes||(null==i?void 0:i.sizes),u=/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(Y,c({},l,i,{sizes:d,shouldLoad:s,innerRef:r}));return n.length?/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("picture",null,n.map(function(t){var r=t.media,i=t.srcSet,a=t.type;return/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("source",{key:r+"-"+a+"-"+i,type:a,media:r,srcSet:s?i:void 0,"data-srcset":s?void 0:i,sizes:d});}),u):u;});Y.propTypes={src:prop_types__WEBPACK_IMPORTED_MODULE_3__.string.isRequired,alt:prop_types__WEBPACK_IMPORTED_MODULE_3__.string.isRequired,sizes:prop_types__WEBPACK_IMPORTED_MODULE_3__.string,srcSet:prop_types__WEBPACK_IMPORTED_MODULE_3__.string,shouldLoad:prop_types__WEBPACK_IMPORTED_MODULE_3__.bool},X.displayName="Picture",X.propTypes={alt:prop_types__WEBPACK_IMPORTED_MODULE_3__.string.isRequired,shouldLoad:prop_types__WEBPACK_IMPORTED_MODULE_3__.bool,fallback:prop_types__WEBPACK_IMPORTED_MODULE_3__.exact({src:prop_types__WEBPACK_IMPORTED_MODULE_3__.string.isRequired,srcSet:prop_types__WEBPACK_IMPORTED_MODULE_3__.string,sizes:prop_types__WEBPACK_IMPORTED_MODULE_3__.string}),sources:prop_types__WEBPACK_IMPORTED_MODULE_3__.arrayOf(prop_types__WEBPACK_IMPORTED_MODULE_3__.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_3__.exact({media:prop_types__WEBPACK_IMPORTED_MODULE_3__.string.isRequired,type:prop_types__WEBPACK_IMPORTED_MODULE_3__.string,sizes:prop_types__WEBPACK_IMPORTED_MODULE_3__.string,srcSet:prop_types__WEBPACK_IMPORTED_MODULE_3__.string.isRequired}),prop_types__WEBPACK_IMPORTED_MODULE_3__.exact({media:prop_types__WEBPACK_IMPORTED_MODULE_3__.string,type:prop_types__WEBPACK_IMPORTED_MODULE_3__.string.isRequired,sizes:prop_types__WEBPACK_IMPORTED_MODULE_3__.string,srcSet:prop_types__WEBPACK_IMPORTED_MODULE_3__.string.isRequired})]))};var Z=["fallback"],K=function K(t){var r=t.fallback,i=p(t,Z);return r?/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(X,c({},i,{fallback:{src:r},"aria-hidden":!0,alt:""})):/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",c({},i));};K.displayName="Placeholder",K.propTypes={fallback:prop_types__WEBPACK_IMPORTED_MODULE_3__.string,sources:null==(F=X.propTypes)?void 0:F.sources,alt:function alt(t,e,r){return t[e]?new Error("Invalid prop `"+e+"` supplied to `"+r+"`. Validation failed."):null;}};var Q=/*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function(t,r){return/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(X,c({ref:r},t)),/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("noscript",null,/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(X,c({},t,{shouldLoad:!0}))));});Q.displayName="MainImage",Q.propTypes=X.propTypes;var $=function $(t,e,r){return t.alt||""===t.alt?prop_types__WEBPACK_IMPORTED_MODULE_3___default().string.apply((prop_types__WEBPACK_IMPORTED_MODULE_3___default()),[t,e,r].concat([].slice.call(arguments,3))):new Error(\'The "alt" prop is required in \'+r+\'. If the image is purely presentational then pass an empty string: e.g. alt="". Learn more: https://a11y-style-guide.com/style-guide/section-media.html\');},tt={image:(prop_types__WEBPACK_IMPORTED_MODULE_3___default().object.isRequired),alt:$},et=["style","className"],rt=function(t){var r,i;function n(e){var r;return(r=t.call(this,e)||this).root=/*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createRef)(),r.hydrated={current:!1},r.forceRender={current:"development"==="production"},r.lazyHydrator=null,r.ref=/*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createRef)(),r.unobserveRef=void 0,r.state={isLoading:N(),isLoaded:!1},r;}i=t,(r=n).prototype=Object.create(i.prototype),r.prototype.constructor=r,h(r,i);var o=n.prototype;return o._lazyHydrate=function(t,e){var r=this,i=this.root.current.querySelector("[data-gatsby-image-ssr]");return N()&&i&&!this.hydrated.current?(this.hydrated.current=!0,Promise.resolve()):__webpack_require__.e(/* import() */ 876).then(__webpack_require__.bind(__webpack_require__, 2876)).then(function(i){r.lazyHydrator=(0,i.lazyHydrate)(c({image:t.image.images,isLoading:e.isLoading,isLoaded:e.isLoaded,toggleIsLoaded:function toggleIsLoaded(){null==t.onLoad||t.onLoad(),r.setState({isLoaded:!0});},ref:r.ref},t),r.root,r.hydrated,r.forceRender);});},o._setupIntersectionObserver=function(t){var e=this;void 0===t&&(t=!0),__webpack_require__.e(/* import() */ 175).then(__webpack_require__.bind(__webpack_require__, 7175)).then(function(r){var i=(0,r.createIntersectionObserver)(function(){if(e.root.current){var r=JSON.stringify(e.props.image.images);null==e.props.onStartLoad||e.props.onStartLoad({wasCached:t&&z(r)}),e.setState({isLoading:!0,isLoaded:t&&z(r)});}});e.root.current&&(e.unobserveRef=i(e.root));});},o.shouldComponentUpdate=function(t,e){var r=this,i=!1;return this.state.isLoading||!e.isLoading||e.isLoaded||(this.forceRender.current=!0),this.props.image.images!==t.image.images&&(this.unobserveRef&&(this.unobserveRef(),this.hydrated.current&&this.lazyHydrator&&(0,react_dom__WEBPACK_IMPORTED_MODULE_4__.render)(null,this.root.current)),this.setState({isLoading:!1,isLoaded:!1},function(){r._setupIntersectionObserver(!1);}),i=!0),this.root.current&&!i&&this._lazyHydrate(t,e),!1;},o.componentDidMount=function(){if(this.root.current){var t=this.root.current.querySelector("[data-gatsby-image-ssr]"),e=JSON.stringify(this.props.image.images);if(N()&&t&&O()){var r,i;if(null==(r=(i=this.props).onStartLoad)||r.call(i,{wasCached:!1}),t.complete){var a,n;null==(a=(n=this.props).onLoad)||a.call(n),W(e);}else{var o=this;t.addEventListener("load",function r(){t.removeEventListener("load",r),null==o.props.onLoad||o.props.onLoad(),W(e);});}return;}this._setupIntersectionObserver(!0);}},o.componentWillUnmount=function(){this.unobserveRef&&(this.unobserveRef(),this.hydrated.current&&this.lazyHydrator&&this.lazyHydrator());},o.render=function(){var t=this.props.as||"div",r=this.props.image,i=r.width,a=r.height,n=r.layout,o=function(t,e,r){var i={},a="gatsby-image-wrapper";return O()||(i.position="relative",i.overflow="hidden"),"fixed"===r?(i.width=t,i.height=e):"constrained"===r&&(O()||(i.display="inline-block",i.verticalAlign="top"),a="gatsby-image-wrapper gatsby-image-wrapper-constrained"),{className:a,"data-gatsby-image-wrapper":"",style:i};}(i,a,n),s=o.style,l=o.className,d=p(o,et),u=this.props.className;this.props.class&&(u=this.props.class);var h=function(t,e,r){var i=null;return"fullWidth"===t&&(i=\'<div aria-hidden="true" style="padding-top: \'+r/e*100+\'%;"></div>\'),"constrained"===t&&(i=\'<div style="max-width: \'+e+\'px; display: block;"><img alt="" role="presentation" aria-hidden="true" src="data:image/svg+xml;charset=utf-8,%3Csvg height=\\\'\'+r+"\' width=\'"+e+"\' xmlns=\'http://www.w3.org/2000/svg\' version=\'1.1\'%3E%3C/svg%3E\\" style=\\"max-width: 100%; display: block; position: static;\\"></div>"),i;}(n,i,a);return/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(t,c({},d,{style:c({},s,this.props.style,{backgroundColor:this.props.backgroundColor}),className:l+(u?" "+u:""),ref:this.root,dangerouslySetInnerHTML:{__html:h},suppressHydrationWarning:!0}));},n;}(react__WEBPACK_IMPORTED_MODULE_0__.Component),it=function it(t){if(!t.image)return false&&0,null;O()||console.error(\'[gatsby-plugin-image] You\\\'re missing out on some cool performance features. Please add "gatsby-plugin-image" to your gatsby-config.js\');var r=t.image,i=JSON.stringify([r.width,r.height,r.layout,t.className,t.class,t.backgroundColor]);return/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(rt,c({key:i},t));};it.propTypes=tt,it.displayName="GatsbyImage";var at=["src","__imageData","__error","width","height","aspectRatio","tracedSVGOptions","placeholder","formats","quality","transformOptions","jpgOptions","pngOptions","webpOptions","avifOptions","blurredOptions"],nt=function nt(t,e){return"fullWidth"!==t.layout||"width"!==e&&"height"!==e||!t[e]?prop_types__WEBPACK_IMPORTED_MODULE_3___default().number.apply((prop_types__WEBPACK_IMPORTED_MODULE_3___default()),[t,e].concat([].slice.call(arguments,2))):new Error(\'"\'+e+\'" \'+t[e]+" may not be passed when layout is fullWidth.");},ot=new Set(["fixed","fullWidth","constrained"]),st={src:(prop_types__WEBPACK_IMPORTED_MODULE_3___default().string.isRequired),alt:$,width:nt,height:nt,sizes:(prop_types__WEBPACK_IMPORTED_MODULE_3___default().string),layout:function layout(t){if(void 0!==t.layout&&!ot.has(t.layout))return new Error("Invalid value "+t.layout+\'" provided for prop "layout". Defaulting to "constrained". Valid values are "fixed", "fullWidth" or "constrained".\');}},lt=function(t){return function(r){var i=r.src,a=r.__imageData,n=r.__error,o=p(r,at);return n&&console.warn(n),a?/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(t,c({image:a},o)):(console.warn("Image not loaded",i),n||"development"!=="production"||console.warn(\'Please ensure that "gatsby-plugin-image" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78\'),null);};}(it);function dt(e){var r=e.children;return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function(){__webpack_require__.e(/* import() */ 876).then(__webpack_require__.bind(__webpack_require__, 2876));},[]),r;}lt.displayName="StaticImage",lt.propTypes=st;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2407\n')},6988:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "wrapRootElement": function() { return /* binding */ wrapRootElement; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2407);\nfunction wrapRootElement(_ref){var element=_ref.element;return/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(___WEBPACK_IMPORTED_MODULE_1__.c,null,element);}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjk4OC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFHTyxRQUFTRSxDQUFBQSxlQUFULE1BQXNDLElBQVhDLENBQUFBLE9BQVcsTUFBWEEsT0FBVyxDQUMzQyxtQkFBTyxpREFBQyxnQ0FBRCxNQUFnQkEsT0FBaEIsQ0FBUCxDQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXNzYXBpci5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvZ2F0c2J5LXBsdWdpbi1pbWFnZS9nYXRzYnktYnJvd3Nlci5qcz9iNzc0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IHsgTGF0ZXJIeWRyYXRvciB9IGZyb20gXCIuXCJcblxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBSb290RWxlbWVudCh7IGVsZW1lbnQgfSkge1xuICByZXR1cm4gPExhdGVySHlkcmF0b3I+e2VsZW1lbnR9PC9MYXRlckh5ZHJhdG9yPlxufVxuIl0sIm5hbWVzIjpbIlJlYWN0IiwiTGF0ZXJIeWRyYXRvciIsIndyYXBSb290RWxlbWVudCIsImVsZW1lbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6988\n')},992:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('var _interopRequireDefault=__webpack_require__(5318);var _gatsby=__webpack_require__(5444);var _getManifestPathname=_interopRequireDefault(__webpack_require__(1632));/* global __MANIFEST_PLUGIN_HAS_LOCALISATION__ */ // when we don\'t have localisation in our manifest, we tree shake everything away\nif(undefined){exports.onRouteUpdate=function(_ref,pluginOptions){var location=_ref.location;var localize=pluginOptions.localize;var manifestFilename=(0,_getManifestPathname.default)(location.pathname,localize);var manifestEl=document.head.querySelector("link[rel=\\"manifest\\"]");if(manifestEl){manifestEl.setAttribute("href",(0,_gatsby.withPrefix)(manifestFilename));}};}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTkyLmpzIiwibWFwcGluZ3MiOiJBQUVBLEdBQUlBLENBQUFBLHNCQUFzQixDQUFHQyxtQkFBTyxDQUFDLElBQUQsQ0FBcEMsQ0FFQSxHQUFJQyxDQUFBQSxPQUFPLENBQUdELG1CQUFPLENBQUMsSUFBRCxDQUFyQixDQUVBLEdBQUlFLENBQUFBLG9CQUFvQixDQUFHSCxzQkFBc0IsQ0FBQ0MsbUJBQU8sQ0FBQyxJQUFELENBQVIsQ0FBakQsQ0FFQSxpRCxDQUNBO0FBQ0EsR0FBSUcsU0FBSixDQUEwQyxDQUN4Q0MscUJBQUEsQ0FBd0IsU0FBVUUsSUFBVixDQUFnQkMsYUFBaEIsQ0FBK0IsQ0FDckQsR0FBSUMsQ0FBQUEsUUFBUSxDQUFHRixJQUFJLENBQUNFLFFBQXBCLENBQ0EsR0FBSUMsQ0FBQUEsUUFBUSxDQUFHRixhQUFhLENBQUNFLFFBQTdCLENBQ0EsR0FBSUMsQ0FBQUEsZ0JBQWdCLENBQUcsQ0FBQyxFQUFHUixvQkFBb0IsQ0FBQ1MsT0FBekIsRUFBa0NILFFBQVEsQ0FBQ0ksUUFBM0MsQ0FBcURILFFBQXJELENBQXZCLENBQ0EsR0FBSUksQ0FBQUEsVUFBVSxDQUFHQyxRQUFRLENBQUNDLElBQVQsQ0FBY0MsYUFBZCxDQUE0Qix3QkFBNUIsQ0FBakIsQ0FFQSxHQUFJSCxVQUFKLENBQWdCLENBQ2RBLFVBQVUsQ0FBQ0ksWUFBWCxDQUF3QixNQUF4QixDQUFnQyxDQUFDLEVBQUdoQixPQUFPLENBQUNpQixVQUFaLEVBQXdCUixnQkFBeEIsQ0FBaEMsRUFDRCxDQUNGLENBVEQsQ0FVRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Fzc2FwaXIuZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzL2dhdHNieS1wbHVnaW4tbWFuaWZlc3QvZ2F0c2J5LWJyb3dzZXIuanM/OWU5NiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbnZhciBfZ2F0c2J5ID0gcmVxdWlyZShcImdhdHNieVwiKTtcblxudmFyIF9nZXRNYW5pZmVzdFBhdGhuYW1lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9nZXQtbWFuaWZlc3QtcGF0aG5hbWVcIikpO1xuXG4vKiBnbG9iYWwgX19NQU5JRkVTVF9QTFVHSU5fSEFTX0xPQ0FMSVNBVElPTl9fICovXG4vLyB3aGVuIHdlIGRvbid0IGhhdmUgbG9jYWxpc2F0aW9uIGluIG91ciBtYW5pZmVzdCwgd2UgdHJlZSBzaGFrZSBldmVyeXRoaW5nIGF3YXlcbmlmIChfX01BTklGRVNUX1BMVUdJTl9IQVNfTE9DQUxJU0FUSU9OX18pIHtcbiAgZXhwb3J0cy5vblJvdXRlVXBkYXRlID0gZnVuY3Rpb24gKF9yZWYsIHBsdWdpbk9wdGlvbnMpIHtcbiAgICB2YXIgbG9jYXRpb24gPSBfcmVmLmxvY2F0aW9uO1xuICAgIHZhciBsb2NhbGl6ZSA9IHBsdWdpbk9wdGlvbnMubG9jYWxpemU7XG4gICAgdmFyIG1hbmlmZXN0RmlsZW5hbWUgPSAoMCwgX2dldE1hbmlmZXN0UGF0aG5hbWUuZGVmYXVsdCkobG9jYXRpb24ucGF0aG5hbWUsIGxvY2FsaXplKTtcbiAgICB2YXIgbWFuaWZlc3RFbCA9IGRvY3VtZW50LmhlYWQucXVlcnlTZWxlY3RvcihcImxpbmtbcmVsPVxcXCJtYW5pZmVzdFxcXCJdXCIpO1xuXG4gICAgaWYgKG1hbmlmZXN0RWwpIHtcbiAgICAgIG1hbmlmZXN0RWwuc2V0QXR0cmlidXRlKFwiaHJlZlwiLCAoMCwgX2dhdHNieS53aXRoUHJlZml4KShtYW5pZmVzdEZpbGVuYW1lKSk7XG4gICAgfVxuICB9O1xufSJdLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9nYXRzYnkiLCJfZ2V0TWFuaWZlc3RQYXRobmFtZSIsIl9fTUFOSUZFU1RfUExVR0lOX0hBU19MT0NBTElTQVRJT05fXyIsImV4cG9ydHMiLCJvblJvdXRlVXBkYXRlIiwiX3JlZiIsInBsdWdpbk9wdGlvbnMiLCJsb2NhdGlvbiIsImxvY2FsaXplIiwibWFuaWZlc3RGaWxlbmFtZSIsImRlZmF1bHQiLCJwYXRobmFtZSIsIm1hbmlmZXN0RWwiLCJkb2N1bWVudCIsImhlYWQiLCJxdWVyeVNlbGVjdG9yIiwic2V0QXR0cmlidXRlIiwid2l0aFByZWZpeCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///992\n')},1632:function(__unused_webpack_module,exports){"use strict";eval('exports.__esModule=true;exports.default=void 0;/**\n * Get a manifest filename depending on localized pathname\n *\n * @param {string} pathname\n * @param {Array<{start_url: string, lang: string}>} localizedManifests\n * @return string\n */var _default=function _default(pathname,localizedManifests){var defaultFilename="manifest.webmanifest";if(!Array.isArray(localizedManifests)){return defaultFilename;}var localizedManifest=localizedManifests.find(function(app){return pathname.startsWith(app.start_url);});if(!localizedManifest){return defaultFilename;}return"manifest_"+localizedManifest.lang+".webmanifest";};exports.default=_default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYzMi5qcyIsIm1hcHBpbmdzIjoiQUFFQUEsa0JBQUEsQ0FBcUIsSUFBckIsQ0FDQUEsZUFBQSxDQUFrQixJQUFLLEVBQXZCLENBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FDQSxHQUFJRyxDQUFBQSxRQUFRLENBQUcsUUFBU0EsQ0FBQUEsUUFBVCxDQUFrQkMsUUFBbEIsQ0FBNEJDLGtCQUE1QixDQUFnRCxDQUM3RCxHQUFJQyxDQUFBQSxlQUFlLENBQUcsc0JBQXRCLENBRUEsR0FBSSxDQUFDQyxLQUFLLENBQUNDLE9BQU4sQ0FBY0gsa0JBQWQsQ0FBTCxDQUF3QyxDQUN0QyxNQUFPQyxDQUFBQSxlQUFQLENBQ0QsQ0FFRCxHQUFJRyxDQUFBQSxpQkFBaUIsQ0FBR0osa0JBQWtCLENBQUNLLElBQW5CLENBQXdCLFNBQVVDLEdBQVYsQ0FBZSxDQUM3RCxNQUFPUCxDQUFBQSxRQUFRLENBQUNRLFVBQVQsQ0FBb0JELEdBQUcsQ0FBQ0UsU0FBeEIsQ0FBUCxDQUNELENBRnVCLENBQXhCLENBSUEsR0FBSSxDQUFDSixpQkFBTCxDQUF3QixDQUN0QixNQUFPSCxDQUFBQSxlQUFQLENBQ0QsQ0FFRCxNQUFPLFlBQWNHLGlCQUFpQixDQUFDSyxJQUFoQyxDQUF1QyxjQUE5QyxDQUNELENBaEJELENBa0JBZCxlQUFBLENBQWtCRyxRQUFsQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Fzc2FwaXIuZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzL2dhdHNieS1wbHVnaW4tbWFuaWZlc3QvZ2V0LW1hbmlmZXN0LXBhdGhuYW1lLmpzP2Y2MTUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbi8qKlxuICogR2V0IGEgbWFuaWZlc3QgZmlsZW5hbWUgZGVwZW5kaW5nIG9uIGxvY2FsaXplZCBwYXRobmFtZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRobmFtZVxuICogQHBhcmFtIHtBcnJheTx7c3RhcnRfdXJsOiBzdHJpbmcsIGxhbmc6IHN0cmluZ30+fSBsb2NhbGl6ZWRNYW5pZmVzdHNcbiAqIEByZXR1cm4gc3RyaW5nXG4gKi9cbnZhciBfZGVmYXVsdCA9IGZ1bmN0aW9uIF9kZWZhdWx0KHBhdGhuYW1lLCBsb2NhbGl6ZWRNYW5pZmVzdHMpIHtcbiAgdmFyIGRlZmF1bHRGaWxlbmFtZSA9IFwibWFuaWZlc3Qud2VibWFuaWZlc3RcIjtcblxuICBpZiAoIUFycmF5LmlzQXJyYXkobG9jYWxpemVkTWFuaWZlc3RzKSkge1xuICAgIHJldHVybiBkZWZhdWx0RmlsZW5hbWU7XG4gIH1cblxuICB2YXIgbG9jYWxpemVkTWFuaWZlc3QgPSBsb2NhbGl6ZWRNYW5pZmVzdHMuZmluZChmdW5jdGlvbiAoYXBwKSB7XG4gICAgcmV0dXJuIHBhdGhuYW1lLnN0YXJ0c1dpdGgoYXBwLnN0YXJ0X3VybCk7XG4gIH0pO1xuXG4gIGlmICghbG9jYWxpemVkTWFuaWZlc3QpIHtcbiAgICByZXR1cm4gZGVmYXVsdEZpbGVuYW1lO1xuICB9XG5cbiAgcmV0dXJuIFwibWFuaWZlc3RfXCIgKyBsb2NhbGl6ZWRNYW5pZmVzdC5sYW5nICsgXCIud2VibWFuaWZlc3RcIjtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyJdLCJuYW1lcyI6WyJleHBvcnRzIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfZGVmYXVsdCIsInBhdGhuYW1lIiwibG9jYWxpemVkTWFuaWZlc3RzIiwiZGVmYXVsdEZpbGVuYW1lIiwiQXJyYXkiLCJpc0FycmF5IiwibG9jYWxpemVkTWFuaWZlc3QiLCJmaW5kIiwiYXBwIiwic3RhcnRzV2l0aCIsInN0YXJ0X3VybCIsImxhbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1632\n')},2862:function(__unused_webpack_module,exports){"use strict";eval('exports.DEFAULT_OPTIONS={maxWidth:650,wrapperStyle:"",backgroundColor:"white",linkImagesToOriginal:true,showCaptions:false,markdownCaptions:false,withWebp:false,withAvif:false,tracedSVG:false,loading:"lazy",decoding:"async",disableBgImageOnAlpha:false,disableBgImage:false};exports.EMPTY_ALT="GATSBY_EMPTY_ALT";exports.imageClass="gatsby-resp-image-image";exports.imageWrapperClass="gatsby-resp-image-wrapper";exports.imageBackgroundClass="gatsby-resp-image-background-image";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjg2Mi5qcyIsIm1hcHBpbmdzIjoiQUFFQUEsdUJBQUEsQ0FBMEIsQ0FDeEJFLFFBQVEsQ0FBRSxHQURjLENBRXhCQyxZQUFZLENBQUUsRUFGVSxDQUd4QkMsZUFBZSxDQUFFLE9BSE8sQ0FJeEJDLG9CQUFvQixDQUFFLElBSkUsQ0FLeEJDLFlBQVksQ0FBRSxLQUxVLENBTXhCQyxnQkFBZ0IsQ0FBRSxLQU5NLENBT3hCQyxRQUFRLENBQUUsS0FQYyxDQVF4QkMsUUFBUSxDQUFFLEtBUmMsQ0FTeEJDLFNBQVMsQ0FBRSxLQVRhLENBVXhCQyxPQUFPLENBQUUsTUFWZSxDQVd4QkMsUUFBUSxDQUFFLE9BWGMsQ0FZeEJDLHFCQUFxQixDQUFFLEtBWkMsQ0FheEJDLGNBQWMsQ0FBRSxLQWJRLENBQTFCLENBZUFkLGlCQUFBLENBQW9CLGtCQUFwQixDQUNBQSxrQkFBQSxDQUFxQix5QkFBckIsQ0FDQUEseUJBQUEsQ0FBNEIsMkJBQTVCLENBQ0FBLDRCQUFBLENBQStCLG9DQUEvQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Fzc2FwaXIuZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzL2dhdHNieS1yZW1hcmstaW1hZ2VzL2NvbnN0YW50cy5qcz85ZjBjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLkRFRkFVTFRfT1BUSU9OUyA9IHtcbiAgbWF4V2lkdGg6IDY1MCxcbiAgd3JhcHBlclN0eWxlOiBcIlwiLFxuICBiYWNrZ3JvdW5kQ29sb3I6IFwid2hpdGVcIixcbiAgbGlua0ltYWdlc1RvT3JpZ2luYWw6IHRydWUsXG4gIHNob3dDYXB0aW9uczogZmFsc2UsXG4gIG1hcmtkb3duQ2FwdGlvbnM6IGZhbHNlLFxuICB3aXRoV2VicDogZmFsc2UsXG4gIHdpdGhBdmlmOiBmYWxzZSxcbiAgdHJhY2VkU1ZHOiBmYWxzZSxcbiAgbG9hZGluZzogXCJsYXp5XCIsXG4gIGRlY29kaW5nOiBcImFzeW5jXCIsXG4gIGRpc2FibGVCZ0ltYWdlT25BbHBoYTogZmFsc2UsXG4gIGRpc2FibGVCZ0ltYWdlOiBmYWxzZVxufTtcbmV4cG9ydHMuRU1QVFlfQUxUID0gXCJHQVRTQllfRU1QVFlfQUxUXCI7XG5leHBvcnRzLmltYWdlQ2xhc3MgPSBcImdhdHNieS1yZXNwLWltYWdlLWltYWdlXCI7XG5leHBvcnRzLmltYWdlV3JhcHBlckNsYXNzID0gXCJnYXRzYnktcmVzcC1pbWFnZS13cmFwcGVyXCI7XG5leHBvcnRzLmltYWdlQmFja2dyb3VuZENsYXNzID0gXCJnYXRzYnktcmVzcC1pbWFnZS1iYWNrZ3JvdW5kLWltYWdlXCI7Il0sIm5hbWVzIjpbImV4cG9ydHMiLCJERUZBVUxUX09QVElPTlMiLCJtYXhXaWR0aCIsIndyYXBwZXJTdHlsZSIsImJhY2tncm91bmRDb2xvciIsImxpbmtJbWFnZXNUb09yaWdpbmFsIiwic2hvd0NhcHRpb25zIiwibWFya2Rvd25DYXB0aW9ucyIsIndpdGhXZWJwIiwid2l0aEF2aWYiLCJ0cmFjZWRTVkciLCJsb2FkaW5nIiwiZGVjb2RpbmciLCJkaXNhYmxlQmdJbWFnZU9uQWxwaGEiLCJkaXNhYmxlQmdJbWFnZSIsIkVNUFRZX0FMVCIsImltYWdlQ2xhc3MiLCJpbWFnZVdyYXBwZXJDbGFzcyIsImltYWdlQmFja2dyb3VuZENsYXNzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2862\n')},3207:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('var _require=__webpack_require__(2862),DEFAULT_OPTIONS=_require.DEFAULT_OPTIONS,imageClass=_require.imageClass,imageBackgroundClass=_require.imageBackgroundClass,imageWrapperClass=_require.imageWrapperClass;exports.onRouteUpdate=function(apiCallbackContext,pluginOptions){var options=Object.assign({},DEFAULT_OPTIONS,pluginOptions);var imageWrappers=document.querySelectorAll("."+imageWrapperClass);// https://css-tricks.com/snippets/javascript/loop-queryselectorall-matches/\n// for cross-browser looping through NodeList without polyfills\nvar _loop=function _loop(i){var imageWrapper=imageWrappers[i];var backgroundElement=imageWrapper.querySelector("."+imageBackgroundClass);var imageElement=imageWrapper.querySelector("."+imageClass);var onImageLoad=function onImageLoad(){backgroundElement.style.transition="opacity 0.5s 0.5s";imageElement.style.transition="opacity 0.5s";onImageComplete();};var onImageComplete=function onImageComplete(){backgroundElement.style.opacity=0;imageElement.style.opacity=1;imageElement.style.color="inherit";imageElement.style.boxShadow="inset 0px 0px 0px 400px "+options.backgroundColor;imageElement.removeEventListener("load",onImageLoad);imageElement.removeEventListener("error",onImageComplete);};imageElement.style.opacity=0;imageElement.addEventListener("load",onImageLoad);imageElement.addEventListener("error",onImageComplete);if(imageElement.complete){onImageComplete();}};for(var i=0;i<imageWrappers.length;i++){_loop(i);}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzIwNy5qcyIsIm1hcHBpbmdzIjoiQUFFQSxHQUFJQSxDQUFBQSxRQUFRLENBQUdDLG1CQUFPLENBQUMsSUFBRCxDQUF0QixDQUNJQyxlQUFlLENBQUdGLFFBQVEsQ0FBQ0UsZUFEL0IsQ0FFSUMsVUFBVSxDQUFHSCxRQUFRLENBQUNHLFVBRjFCLENBR0lDLG9CQUFvQixDQUFHSixRQUFRLENBQUNJLG9CQUhwQyxDQUlJQyxpQkFBaUIsQ0FBR0wsUUFBUSxDQUFDSyxpQkFKakMsQ0FNQUMscUJBQUEsQ0FBd0IsU0FBVUUsa0JBQVYsQ0FBOEJDLGFBQTlCLENBQTZDLENBQ25FLEdBQUlDLENBQUFBLE9BQU8sQ0FBR0MsTUFBTSxDQUFDQyxNQUFQLENBQWMsRUFBZCxDQUFrQlYsZUFBbEIsQ0FBbUNPLGFBQW5DLENBQWQsQ0FDQSxHQUFJSSxDQUFBQSxhQUFhLENBQUdDLFFBQVEsQ0FBQ0MsZ0JBQVQsQ0FBMEIsSUFBTVYsaUJBQWhDLENBQXBCLENBQXdFO0FBQ3hFO0FBRUEsR0FBSVcsQ0FBQUEsS0FBSyxDQUFHLFFBQVNBLENBQUFBLEtBQVQsQ0FBZUMsQ0FBZixDQUFrQixDQUM1QixHQUFJQyxDQUFBQSxZQUFZLENBQUdMLGFBQWEsQ0FBQ0ksQ0FBRCxDQUFoQyxDQUNBLEdBQUlFLENBQUFBLGlCQUFpQixDQUFHRCxZQUFZLENBQUNFLGFBQWIsQ0FBMkIsSUFBTWhCLG9CQUFqQyxDQUF4QixDQUNBLEdBQUlpQixDQUFBQSxZQUFZLENBQUdILFlBQVksQ0FBQ0UsYUFBYixDQUEyQixJQUFNakIsVUFBakMsQ0FBbkIsQ0FFQSxHQUFJbUIsQ0FBQUEsV0FBVyxDQUFHLFFBQVNBLENBQUFBLFdBQVQsRUFBdUIsQ0FDdkNILGlCQUFpQixDQUFDSSxLQUFsQixDQUF3QkMsVUFBeEIsQ0FBcUMsbUJBQXJDLENBQ0FILFlBQVksQ0FBQ0UsS0FBYixDQUFtQkMsVUFBbkIsQ0FBZ0MsY0FBaEMsQ0FDQUMsZUFBZSxHQUNoQixDQUpELENBTUEsR0FBSUEsQ0FBQUEsZUFBZSxDQUFHLFFBQVNBLENBQUFBLGVBQVQsRUFBMkIsQ0FDL0NOLGlCQUFpQixDQUFDSSxLQUFsQixDQUF3QkcsT0FBeEIsQ0FBa0MsQ0FBbEMsQ0FDQUwsWUFBWSxDQUFDRSxLQUFiLENBQW1CRyxPQUFuQixDQUE2QixDQUE3QixDQUNBTCxZQUFZLENBQUNFLEtBQWIsQ0FBbUJJLEtBQW5CLENBQTJCLFNBQTNCLENBQ0FOLFlBQVksQ0FBQ0UsS0FBYixDQUFtQkssU0FBbkIsQ0FBK0IsMkJBQTZCbEIsT0FBTyxDQUFDbUIsZUFBcEUsQ0FDQVIsWUFBWSxDQUFDUyxtQkFBYixDQUFpQyxNQUFqQyxDQUF5Q1IsV0FBekMsRUFDQUQsWUFBWSxDQUFDUyxtQkFBYixDQUFpQyxPQUFqQyxDQUEwQ0wsZUFBMUMsRUFDRCxDQVBELENBU0FKLFlBQVksQ0FBQ0UsS0FBYixDQUFtQkcsT0FBbkIsQ0FBNkIsQ0FBN0IsQ0FDQUwsWUFBWSxDQUFDVSxnQkFBYixDQUE4QixNQUE5QixDQUFzQ1QsV0FBdEMsRUFDQUQsWUFBWSxDQUFDVSxnQkFBYixDQUE4QixPQUE5QixDQUF1Q04sZUFBdkMsRUFFQSxHQUFJSixZQUFZLENBQUNXLFFBQWpCLENBQTJCLENBQ3pCUCxlQUFlLEdBQ2hCLENBQ0YsQ0EzQkQsQ0E2QkEsSUFBSyxHQUFJUixDQUFBQSxDQUFDLENBQUcsQ0FBYixDQUFnQkEsQ0FBQyxDQUFHSixhQUFhLENBQUNvQixNQUFsQyxDQUEwQ2hCLENBQUMsRUFBM0MsQ0FBK0MsQ0FDN0NELEtBQUssQ0FBQ0MsQ0FBRCxDQUFMLENBQ0QsQ0FDRixDQXJDRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Fzc2FwaXIuZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzL2dhdHNieS1yZW1hcmstaW1hZ2VzL2dhdHNieS1icm93c2VyLmpzP2FiZDkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKSxcbiAgICBERUZBVUxUX09QVElPTlMgPSBfcmVxdWlyZS5ERUZBVUxUX09QVElPTlMsXG4gICAgaW1hZ2VDbGFzcyA9IF9yZXF1aXJlLmltYWdlQ2xhc3MsXG4gICAgaW1hZ2VCYWNrZ3JvdW5kQ2xhc3MgPSBfcmVxdWlyZS5pbWFnZUJhY2tncm91bmRDbGFzcyxcbiAgICBpbWFnZVdyYXBwZXJDbGFzcyA9IF9yZXF1aXJlLmltYWdlV3JhcHBlckNsYXNzO1xuXG5leHBvcnRzLm9uUm91dGVVcGRhdGUgPSBmdW5jdGlvbiAoYXBpQ2FsbGJhY2tDb250ZXh0LCBwbHVnaW5PcHRpb25zKSB7XG4gIHZhciBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9PUFRJT05TLCBwbHVnaW5PcHRpb25zKTtcbiAgdmFyIGltYWdlV3JhcHBlcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLlwiICsgaW1hZ2VXcmFwcGVyQ2xhc3MpOyAvLyBodHRwczovL2Nzcy10cmlja3MuY29tL3NuaXBwZXRzL2phdmFzY3JpcHQvbG9vcC1xdWVyeXNlbGVjdG9yYWxsLW1hdGNoZXMvXG4gIC8vIGZvciBjcm9zcy1icm93c2VyIGxvb3BpbmcgdGhyb3VnaCBOb2RlTGlzdCB3aXRob3V0IHBvbHlmaWxsc1xuXG4gIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKGkpIHtcbiAgICB2YXIgaW1hZ2VXcmFwcGVyID0gaW1hZ2VXcmFwcGVyc1tpXTtcbiAgICB2YXIgYmFja2dyb3VuZEVsZW1lbnQgPSBpbWFnZVdyYXBwZXIucXVlcnlTZWxlY3RvcihcIi5cIiArIGltYWdlQmFja2dyb3VuZENsYXNzKTtcbiAgICB2YXIgaW1hZ2VFbGVtZW50ID0gaW1hZ2VXcmFwcGVyLnF1ZXJ5U2VsZWN0b3IoXCIuXCIgKyBpbWFnZUNsYXNzKTtcblxuICAgIHZhciBvbkltYWdlTG9hZCA9IGZ1bmN0aW9uIG9uSW1hZ2VMb2FkKCkge1xuICAgICAgYmFja2dyb3VuZEVsZW1lbnQuc3R5bGUudHJhbnNpdGlvbiA9IFwib3BhY2l0eSAwLjVzIDAuNXNcIjtcbiAgICAgIGltYWdlRWxlbWVudC5zdHlsZS50cmFuc2l0aW9uID0gXCJvcGFjaXR5IDAuNXNcIjtcbiAgICAgIG9uSW1hZ2VDb21wbGV0ZSgpO1xuICAgIH07XG5cbiAgICB2YXIgb25JbWFnZUNvbXBsZXRlID0gZnVuY3Rpb24gb25JbWFnZUNvbXBsZXRlKCkge1xuICAgICAgYmFja2dyb3VuZEVsZW1lbnQuc3R5bGUub3BhY2l0eSA9IDA7XG4gICAgICBpbWFnZUVsZW1lbnQuc3R5bGUub3BhY2l0eSA9IDE7XG4gICAgICBpbWFnZUVsZW1lbnQuc3R5bGUuY29sb3IgPSBcImluaGVyaXRcIjtcbiAgICAgIGltYWdlRWxlbWVudC5zdHlsZS5ib3hTaGFkb3cgPSBcImluc2V0IDBweCAwcHggMHB4IDQwMHB4IFwiICsgb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgICBpbWFnZUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgb25JbWFnZUxvYWQpO1xuICAgICAgaW1hZ2VFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCBvbkltYWdlQ29tcGxldGUpO1xuICAgIH07XG5cbiAgICBpbWFnZUVsZW1lbnQuc3R5bGUub3BhY2l0eSA9IDA7XG4gICAgaW1hZ2VFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIG9uSW1hZ2VMb2FkKTtcbiAgICBpbWFnZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIG9uSW1hZ2VDb21wbGV0ZSk7XG5cbiAgICBpZiAoaW1hZ2VFbGVtZW50LmNvbXBsZXRlKSB7XG4gICAgICBvbkltYWdlQ29tcGxldGUoKTtcbiAgICB9XG4gIH07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbWFnZVdyYXBwZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgX2xvb3AoaSk7XG4gIH1cbn07Il0sIm5hbWVzIjpbIl9yZXF1aXJlIiwicmVxdWlyZSIsIkRFRkFVTFRfT1BUSU9OUyIsImltYWdlQ2xhc3MiLCJpbWFnZUJhY2tncm91bmRDbGFzcyIsImltYWdlV3JhcHBlckNsYXNzIiwiZXhwb3J0cyIsIm9uUm91dGVVcGRhdGUiLCJhcGlDYWxsYmFja0NvbnRleHQiLCJwbHVnaW5PcHRpb25zIiwib3B0aW9ucyIsIk9iamVjdCIsImFzc2lnbiIsImltYWdlV3JhcHBlcnMiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJfbG9vcCIsImkiLCJpbWFnZVdyYXBwZXIiLCJiYWNrZ3JvdW5kRWxlbWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJpbWFnZUVsZW1lbnQiLCJvbkltYWdlTG9hZCIsInN0eWxlIiwidHJhbnNpdGlvbiIsIm9uSW1hZ2VDb21wbGV0ZSIsIm9wYWNpdHkiLCJjb2xvciIsImJveFNoYWRvdyIsImJhY2tncm91bmRDb2xvciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJhZGRFdmVudExpc3RlbmVyIiwiY29tcGxldGUiLCJsZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3207\n')},9499:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "BaseContext": function() { return /* binding */ BaseContext; },\n  "Link": function() { return /* binding */ Link; },\n  "Location": function() { return /* binding */ Location; },\n  "LocationProvider": function() { return /* binding */ LocationProvider; },\n  "Match": function() { return /* binding */ Match; },\n  "Redirect": function() { return /* binding */ Redirect; },\n  "Router": function() { return /* binding */ Router; },\n  "ServerLocation": function() { return /* binding */ ServerLocation; },\n  "createHistory": function() { return /* reexport */ createHistory; },\n  "createMemorySource": function() { return /* reexport */ createMemorySource; },\n  "globalHistory": function() { return /* reexport */ globalHistory; },\n  "isRedirect": function() { return /* binding */ isRedirect; },\n  "matchPath": function() { return /* reexport */ match; },\n  "navigate": function() { return /* reexport */ history_navigate; },\n  "redirectTo": function() { return /* binding */ redirectTo; },\n  "useLocation": function() { return /* binding */ useLocation; },\n  "useMatch": function() { return /* binding */ useMatch; },\n  "useNavigate": function() { return /* binding */ useNavigate; },\n  "useParams": function() { return /* binding */ useParams; }\n});\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(7294);\n// EXTERNAL MODULE: ./node_modules/invariant/browser.js\nvar browser = __webpack_require__(1143);\nvar browser_default = /*#__PURE__*/__webpack_require__.n(browser);\n// EXTERNAL MODULE: ./.cache/react-lifecycles-compat.js\nvar react_lifecycles_compat = __webpack_require__(3639);\n;// CONCATENATED MODULE: ./node_modules/@gatsbyjs/reach-router/es/lib/utils.js\n ////////////////////////////////////////////////////////////////////////////////\n// startsWith(string, search) - Check if `string` starts with `search`\n\nvar startsWith = function startsWith(string, search) {\n  return string.substr(0, search.length) === search;\n}; ////////////////////////////////////////////////////////////////////////////////\n// pick(routes, uri)\n//\n// Ranks and picks the best route to match. Each segment gets the highest\n// amount of points, then the type of segment gets an additional amount of\n// points where\n//\n//     static > dynamic > splat > root\n//\n// This way we don\'t have to worry about the order of our routes, let the\n// computers do it.\n//\n// A route looks like this\n//\n//     { path, default, value }\n//\n// And a returned match looks like:\n//\n//     { route, params, uri }\n//\n// I know, I should use TypeScript not comments for these types.\n\n\nvar pick = function pick(routes, uri) {\n  var match = void 0;\n  var default_ = void 0;\n\n  var _uri$split = uri.split("?"),\n      uriPathname = _uri$split[0];\n\n  var uriSegments = segmentize(uriPathname);\n  var isRootUri = uriSegments[0] === "";\n  var ranked = rankRoutes(routes);\n\n  for (var i = 0, l = ranked.length; i < l; i++) {\n    var missed = false;\n    var route = ranked[i].route;\n\n    if (route.default) {\n      default_ = {\n        route: route,\n        params: {},\n        uri: uri\n      };\n      continue;\n    }\n\n    var routeSegments = segmentize(route.path);\n    var params = {};\n    var max = Math.max(uriSegments.length, routeSegments.length);\n    var index = 0;\n\n    for (; index < max; index++) {\n      var routeSegment = routeSegments[index];\n      var uriSegment = uriSegments[index];\n\n      if (isSplat(routeSegment)) {\n        // Hit a splat, just grab the rest, and return a match\n        // uri:   /files/documents/work\n        // route: /files/*\n        var param = routeSegment.slice(1) || "*";\n        params[param] = uriSegments.slice(index).map(decodeURIComponent).join("/");\n        break;\n      }\n\n      if (uriSegment === undefined) {\n        // URI is shorter than the route, no match\n        // uri:   /users\n        // route: /users/:userId\n        missed = true;\n        break;\n      }\n\n      var dynamicMatch = paramRe.exec(routeSegment);\n\n      if (dynamicMatch && !isRootUri) {\n        var matchIsNotReserved = reservedNames.indexOf(dynamicMatch[1]) === -1;\n        !matchIsNotReserved ?  false ? 0 : browser_default()(false) : void 0;\n        var value = decodeURIComponent(uriSegment);\n        params[dynamicMatch[1]] = value;\n      } else if (routeSegment !== uriSegment) {\n        // Current segments don\'t match, not dynamic, not splat, so no match\n        // uri:   /users/123/settings\n        // route: /users/:id/profile\n        missed = true;\n        break;\n      }\n    }\n\n    if (!missed) {\n      match = {\n        route: route,\n        params: params,\n        uri: "/" + uriSegments.slice(0, index).join("/")\n      };\n      break;\n    }\n  }\n\n  return match || default_ || null;\n}; ////////////////////////////////////////////////////////////////////////////////\n// match(path, uri) - Matches just one path to a uri, also lol\n\n\nvar match = function match(path, uri) {\n  return pick([{\n    path: path\n  }], uri);\n}; ////////////////////////////////////////////////////////////////////////////////\n// resolve(to, basepath)\n//\n// Resolves URIs as though every path is a directory, no files.  Relative URIs\n// in the browser can feel awkward because not only can you be "in a directory"\n// you can be "at a file", too. For example\n//\n//     browserSpecResolve(\'foo\', \'/bar/\') => /bar/foo\n//     browserSpecResolve(\'foo\', \'/bar\') => /foo\n//\n// But on the command line of a file system, it\'s not as complicated, you can\'t\n// `cd` from a file, only directories.  This way, links have to know less about\n// their current path. To go deeper you can do this:\n//\n//     <Link to="deeper"/>\n//     // instead of\n//     <Link to=`{${props.uri}/deeper}`/>\n//\n// Just like `cd`, if you want to go deeper from the command line, you do this:\n//\n//     cd deeper\n//     # not\n//     cd $(pwd)/deeper\n//\n// By treating every path as a directory, linking to relative paths should\n// require less contextual information and (fingers crossed) be more intuitive.\n\n\nvar resolve = function resolve(to, base) {\n  // /foo/bar, /baz/qux => /foo/bar\n  if (startsWith(to, "/")) {\n    return to;\n  }\n\n  var _to$split = to.split("?"),\n      toPathname = _to$split[0],\n      toQuery = _to$split[1];\n\n  var _base$split = base.split("?"),\n      basePathname = _base$split[0];\n\n  var toSegments = segmentize(toPathname);\n  var baseSegments = segmentize(basePathname); // ?a=b, /users?b=c => /users?a=b\n\n  if (toSegments[0] === "") {\n    return addQuery(basePathname, toQuery);\n  } // profile, /users/789 => /users/789/profile\n\n\n  if (!startsWith(toSegments[0], ".")) {\n    var pathname = baseSegments.concat(toSegments).join("/");\n    return addQuery((basePathname === "/" ? "" : "/") + pathname, toQuery);\n  } // ./         /users/123  =>  /users/123\n  // ../        /users/123  =>  /users\n  // ../..      /users/123  =>  /\n  // ../../one  /a/b/c/d    =>  /a/b/one\n  // .././one   /a/b/c/d    =>  /a/b/c/one\n\n\n  var allSegments = baseSegments.concat(toSegments);\n  var segments = [];\n\n  for (var i = 0, l = allSegments.length; i < l; i++) {\n    var segment = allSegments[i];\n    if (segment === "..") segments.pop();else if (segment !== ".") segments.push(segment);\n  }\n\n  return addQuery("/" + segments.join("/"), toQuery);\n}; ////////////////////////////////////////////////////////////////////////////////\n// insertParams(path, params)\n\n\nvar insertParams = function insertParams(path, params) {\n  var _path$split = path.split("?"),\n      pathBase = _path$split[0],\n      _path$split$ = _path$split[1],\n      query = _path$split$ === undefined ? "" : _path$split$;\n\n  var segments = segmentize(pathBase);\n  var constructedPath = "/" + segments.map(function (segment) {\n    var match = paramRe.exec(segment);\n    return match ? params[match[1]] : segment;\n  }).join("/");\n  var _params$location = params.location;\n  _params$location = _params$location === undefined ? {} : _params$location;\n  var _params$location$sear = _params$location.search,\n      search = _params$location$sear === undefined ? "" : _params$location$sear;\n  var searchSplit = search.split("?")[1] || "";\n  constructedPath = addQuery(constructedPath, query, searchSplit);\n  return constructedPath;\n};\n\nvar validateRedirect = function validateRedirect(from, to) {\n  var filter = function filter(segment) {\n    return isDynamic(segment);\n  };\n\n  var fromString = segmentize(from).filter(filter).sort().join("/");\n  var toString = segmentize(to).filter(filter).sort().join("/");\n  return fromString === toString;\n}; ////////////////////////////////////////////////////////////////////////////////\n// Junk\n\n\nvar paramRe = /^:(.+)/;\nvar SEGMENT_POINTS = 4;\nvar STATIC_POINTS = 3;\nvar DYNAMIC_POINTS = 2;\nvar SPLAT_PENALTY = 1;\nvar ROOT_POINTS = 1;\n\nvar isRootSegment = function isRootSegment(segment) {\n  return segment === "";\n};\n\nvar isDynamic = function isDynamic(segment) {\n  return paramRe.test(segment);\n};\n\nvar isSplat = function isSplat(segment) {\n  return segment && segment[0] === "*";\n};\n\nvar rankRoute = function rankRoute(route, index) {\n  var score = route.default ? 0 : segmentize(route.path).reduce(function (score, segment) {\n    score += SEGMENT_POINTS;\n    if (isRootSegment(segment)) score += ROOT_POINTS;else if (isDynamic(segment)) score += DYNAMIC_POINTS;else if (isSplat(segment)) score -= SEGMENT_POINTS + SPLAT_PENALTY;else score += STATIC_POINTS;\n    return score;\n  }, 0);\n  return {\n    route: route,\n    score: score,\n    index: index\n  };\n};\n\nvar rankRoutes = function rankRoutes(routes) {\n  return routes.map(rankRoute).sort(function (a, b) {\n    return a.score < b.score ? 1 : a.score > b.score ? -1 : a.index - b.index;\n  });\n};\n\nvar segmentize = function segmentize(uri) {\n  return uri // strip starting/ending slashes\n  .replace(/(^\\/+|\\/+$)/g, "").split("/");\n};\n\nvar addQuery = function addQuery(pathname) {\n  for (var _len = arguments.length, query = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    query[_key - 1] = arguments[_key];\n  }\n\n  query = query.filter(function (q) {\n    return q && q.length > 0;\n  });\n  return pathname + (query && query.length > 0 ? "?" + query.join("&") : "");\n};\n\nvar reservedNames = ["uri", "path"];\n/**\n * Shallow compares two objects.\n * @param {Object} obj1 The first object to compare.\n * @param {Object} obj2 The second object to compare.\n */\n\nvar shallowCompare = function shallowCompare(obj1, obj2) {\n  var obj1Keys = Object.keys(obj1);\n  return obj1Keys.length === Object.keys(obj2).length && obj1Keys.every(function (key) {\n    return obj2.hasOwnProperty(key) && obj1[key] === obj2[key];\n  });\n}; ////////////////////////////////////////////////////////////////////////////////\n\n\n\n;// CONCATENATED MODULE: ./node_modules/@gatsbyjs/reach-router/es/lib/history.js\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar getLocation = function getLocation(source) {\n  var _source$location = source.location,\n      search = _source$location.search,\n      hash = _source$location.hash,\n      href = _source$location.href,\n      origin = _source$location.origin,\n      protocol = _source$location.protocol,\n      host = _source$location.host,\n      hostname = _source$location.hostname,\n      port = _source$location.port;\n  var pathname = source.location.pathname;\n\n  if (!pathname && href && canUseDOM) {\n    var url = new URL(href);\n    pathname = url.pathname;\n  }\n\n  return {\n    pathname: encodeURI(decodeURI(pathname)),\n    search: search,\n    hash: hash,\n    href: href,\n    origin: origin,\n    protocol: protocol,\n    host: host,\n    hostname: hostname,\n    port: port,\n    state: source.history.state,\n    key: source.history.state && source.history.state.key || "initial"\n  };\n};\n\nvar createHistory = function createHistory(source, options) {\n  var listeners = [];\n  var location = getLocation(source);\n  var transitioning = false;\n\n  var resolveTransition = function resolveTransition() {};\n\n  return {\n    get location() {\n      return location;\n    },\n\n    get transitioning() {\n      return transitioning;\n    },\n\n    _onTransitionComplete: function _onTransitionComplete() {\n      transitioning = false;\n      resolveTransition();\n    },\n    listen: function listen(listener) {\n      listeners.push(listener);\n\n      var popstateListener = function popstateListener() {\n        location = getLocation(source);\n        listener({\n          location: location,\n          action: "POP"\n        });\n      };\n\n      source.addEventListener("popstate", popstateListener);\n      return function () {\n        source.removeEventListener("popstate", popstateListener);\n        listeners = listeners.filter(function (fn) {\n          return fn !== listener;\n        });\n      };\n    },\n    navigate: function navigate(to) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          state = _ref.state,\n          _ref$replace = _ref.replace,\n          replace = _ref$replace === undefined ? false : _ref$replace;\n\n      if (typeof to === "number") {\n        source.history.go(to);\n      } else {\n        state = _extends({}, state, {\n          key: Date.now() + ""\n        }); // try...catch iOS Safari limits to 100 pushState calls\n\n        try {\n          if (transitioning || replace) {\n            source.history.replaceState(state, null, to);\n          } else {\n            source.history.pushState(state, null, to);\n          }\n        } catch (e) {\n          source.location[replace ? "replace" : "assign"](to);\n        }\n      }\n\n      location = getLocation(source);\n      transitioning = true;\n      var transition = new Promise(function (res) {\n        return resolveTransition = res;\n      });\n      listeners.forEach(function (listener) {\n        return listener({\n          location: location,\n          action: "PUSH"\n        });\n      });\n      return transition;\n    }\n  };\n}; ////////////////////////////////////////////////////////////////////////////////\n// Stores history entries in memory for testing or other platforms like Native\n\n\nvar createMemorySource = function createMemorySource() {\n  var initialPath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "/";\n  var searchIndex = initialPath.indexOf("?");\n  var initialLocation = {\n    pathname: searchIndex > -1 ? initialPath.substr(0, searchIndex) : initialPath,\n    search: searchIndex > -1 ? initialPath.substr(searchIndex) : ""\n  };\n  var index = 0;\n  var stack = [initialLocation];\n  var states = [null];\n  return {\n    get location() {\n      return stack[index];\n    },\n\n    addEventListener: function addEventListener(name, fn) {},\n    removeEventListener: function removeEventListener(name, fn) {},\n    history: {\n      get entries() {\n        return stack;\n      },\n\n      get index() {\n        return index;\n      },\n\n      get state() {\n        return states[index];\n      },\n\n      pushState: function pushState(state, _, uri) {\n        var _uri$split = uri.split("?"),\n            pathname = _uri$split[0],\n            _uri$split$ = _uri$split[1],\n            search = _uri$split$ === undefined ? "" : _uri$split$;\n\n        index++;\n        stack.push({\n          pathname: pathname,\n          search: search.length ? "?" + search : search\n        });\n        states.push(state);\n      },\n      replaceState: function replaceState(state, _, uri) {\n        var _uri$split2 = uri.split("?"),\n            pathname = _uri$split2[0],\n            _uri$split2$ = _uri$split2[1],\n            search = _uri$split2$ === undefined ? "" : _uri$split2$;\n\n        stack[index] = {\n          pathname: pathname,\n          search: search\n        };\n        states[index] = state;\n      },\n      go: function go(to) {\n        var newIndex = index + to;\n\n        if (newIndex < 0 || newIndex > states.length - 1) {\n          return;\n        }\n\n        index = newIndex;\n      }\n    }\n  };\n}; ////////////////////////////////////////////////////////////////////////////////\n// global history - uses window.history as the source if available, otherwise a\n// memory history\n\n\nvar canUseDOM = !!(typeof window !== "undefined" && window.document && window.document.createElement);\n\nvar getSource = function getSource() {\n  return canUseDOM ? window : createMemorySource();\n};\n\nvar globalHistory = createHistory(getSource());\nvar history_navigate = globalHistory.navigate; ////////////////////////////////////////////////////////////////////////////////\n\n\n;// CONCATENATED MODULE: ./node_modules/@gatsbyjs/reach-router/es/index.js\nvar es_extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError("Cannot call a class as a function");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n  }\n\n  return call && (typeof call === "object" || typeof call === "function") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== "function" && superClass !== null) {\n    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/* eslint-disable jsx-a11y/anchor-has-content */\n\n\n\n\n\n\n ////////////////////////////////////////////////////////////////////////////////\n\nvar createNamedContext = function createNamedContext(name, defaultValue) {\n  var Ctx = (0,react.createContext)(defaultValue);\n  Ctx.displayName = name;\n  return Ctx;\n}; ////////////////////////////////////////////////////////////////////////////////\n// Location Context/Provider\n\n\nvar LocationContext = createNamedContext("Location"); // sets up a listener if there isn\'t one already so apps don\'t need to be\n// wrapped in some top level provider\n\nvar Location = function Location(_ref) {\n  var children = _ref.children;\n  return react.createElement(LocationContext.Consumer, null, function (context) {\n    return context ? children(context) : react.createElement(LocationProvider, null, children);\n  });\n};\n\nvar LocationProvider = function (_React$Component) {\n  _inherits(LocationProvider, _React$Component);\n\n  function LocationProvider() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, LocationProvider);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {\n      context: _this.getContext(),\n      refs: {\n        unlisten: null\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  LocationProvider.prototype.getContext = function getContext() {\n    var _props$history = this.props.history,\n        navigate = _props$history.navigate,\n        location = _props$history.location;\n    return {\n      navigate: navigate,\n      location: location\n    };\n  };\n\n  LocationProvider.prototype.componentDidCatch = function componentDidCatch(error, info) {\n    if (isRedirect(error)) {\n      var _navigate = this.props.history.navigate;\n\n      _navigate(error.uri, {\n        replace: true\n      });\n    } else {\n      throw error;\n    }\n  };\n\n  LocationProvider.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n    if (prevState.context.location !== this.state.context.location) {\n      this.props.history._onTransitionComplete();\n    }\n  };\n\n  LocationProvider.prototype.componentDidMount = function componentDidMount() {\n    var _this2 = this;\n\n    var refs = this.state.refs,\n        history = this.props.history;\n\n    history._onTransitionComplete();\n\n    refs.unlisten = history.listen(function () {\n      Promise.resolve().then(function () {\n        // TODO: replace rAF with react deferred update API when it\'s ready https://github.com/facebook/react/issues/13306\n        requestAnimationFrame(function () {\n          if (!_this2.unmounted) {\n            _this2.setState(function () {\n              return {\n                context: _this2.getContext()\n              };\n            });\n          }\n        });\n      });\n    });\n  };\n\n  LocationProvider.prototype.componentWillUnmount = function componentWillUnmount() {\n    var refs = this.state.refs;\n    this.unmounted = true;\n    refs.unlisten();\n  };\n\n  LocationProvider.prototype.render = function render() {\n    var context = this.state.context,\n        children = this.props.children;\n    return react.createElement(LocationContext.Provider, {\n      value: context\n    }, typeof children === "function" ? children(context) : children || null);\n  };\n\n  return LocationProvider;\n}(react.Component); ////////////////////////////////////////////////////////////////////////////////\n\n\nLocationProvider.defaultProps = {\n  history: globalHistory\n};\n false ? 0 : void 0;\n\nvar ServerLocation = function ServerLocation(_ref2) {\n  var url = _ref2.url,\n      children = _ref2.children;\n  var searchIndex = url.indexOf("?");\n  var searchExists = searchIndex > -1;\n  var pathname = void 0;\n  var search = "";\n  var hash = "";\n\n  if (searchExists) {\n    pathname = url.substring(0, searchIndex);\n    search = url.substring(searchIndex);\n  } else {\n    pathname = url;\n  }\n\n  return react.createElement(LocationContext.Provider, {\n    value: {\n      location: {\n        pathname: pathname,\n        search: search,\n        hash: hash\n      },\n      navigate: function navigate() {\n        throw new Error("You can\'t call navigate on the server.");\n      }\n    }\n  }, children);\n}; ////////////////////////////////////////////////////////////////////////////////\n// Sets baseuri and basepath for nested routers and links\n\n\nvar BaseContext = createNamedContext("Base", {\n  baseuri: "/",\n  basepath: "/",\n  navigate: globalHistory.navigate\n}); ////////////////////////////////////////////////////////////////////////////////\n// The main event, welcome to the show everybody.\n\nvar Router = function Router(props) {\n  return react.createElement(BaseContext.Consumer, null, function (baseContext) {\n    return react.createElement(Location, null, function (locationContext) {\n      return react.createElement(RouterImpl, es_extends({}, baseContext, locationContext, props));\n    });\n  });\n};\n\nvar RouterImpl = function (_React$PureComponent) {\n  _inherits(RouterImpl, _React$PureComponent);\n\n  function RouterImpl() {\n    _classCallCheck(this, RouterImpl);\n\n    return _possibleConstructorReturn(this, _React$PureComponent.apply(this, arguments));\n  }\n\n  RouterImpl.prototype.render = function render() {\n    var _props = this.props,\n        location = _props.location,\n        _navigate2 = _props.navigate,\n        basepath = _props.basepath,\n        primary = _props.primary,\n        children = _props.children,\n        baseuri = _props.baseuri,\n        _props$component = _props.component,\n        component = _props$component === undefined ? "div" : _props$component,\n        domProps = _objectWithoutProperties(_props, ["location", "navigate", "basepath", "primary", "children", "baseuri", "component"]);\n\n    var routes = react.Children.toArray(children).reduce(function (array, child) {\n      var routes = createRoute(basepath)(child);\n      return array.concat(routes);\n    }, []);\n    var pathname = location.pathname;\n    var match = pick(routes, pathname);\n\n    if (match) {\n      var params = match.params,\n          uri = match.uri,\n          route = match.route,\n          element = match.route.value; // remove the /* from the end for child routes relative paths\n\n      basepath = route.default ? basepath : route.path.replace(/\\*$/, "");\n\n      var props = es_extends({}, params, {\n        uri: uri,\n        location: location,\n        navigate: function navigate(to, options) {\n          return _navigate2(resolve(to, uri), options);\n        }\n      });\n\n      var clone = react.cloneElement(element, props, element.props.children ? react.createElement(Router, {\n        location: location,\n        primary: primary\n      }, element.props.children) : undefined); // using \'div\' for < 16.3 support\n\n      var FocusWrapper = primary ? FocusHandler : component; // don\'t pass any props to \'div\'\n\n      var wrapperProps = primary ? es_extends({\n        uri: uri,\n        location: location,\n        component: component\n      }, domProps) : domProps;\n      return react.createElement(BaseContext.Provider, {\n        value: {\n          baseuri: uri,\n          basepath: basepath,\n          navigate: props.navigate\n        }\n      }, react.createElement(FocusWrapper, wrapperProps, clone));\n    } else {\n      // Not sure if we want this, would require index routes at every level\n      // warning(\n      //   false,\n      //   `<Router basepath="${basepath}">\\n\\nNothing matched:\\n\\t${\n      //     location.pathname\n      //   }\\n\\nPaths checked: \\n\\t${routes\n      //     .map(route => route.path)\n      //     .join(\n      //       "\\n\\t"\n      //     )}\\n\\nTo get rid of this warning, add a default NotFound component as child of Router:\n      //   \\n\\tlet NotFound = () => <div>Not Found!</div>\n      //   \\n\\t<Router>\\n\\t  <NotFound default/>\\n\\t  {/* ... */}\\n\\t</Router>`\n      // );\n      return null;\n    }\n  };\n\n  return RouterImpl;\n}(react.PureComponent);\n\nRouterImpl.defaultProps = {\n  primary: true\n};\nvar FocusContext = createNamedContext("Focus");\n\nvar FocusHandler = function FocusHandler(_ref3) {\n  var uri = _ref3.uri,\n      location = _ref3.location,\n      component = _ref3.component,\n      domProps = _objectWithoutProperties(_ref3, ["uri", "location", "component"]);\n\n  return react.createElement(FocusContext.Consumer, null, function (requestFocus) {\n    return react.createElement(FocusHandlerImpl, es_extends({}, domProps, {\n      component: component,\n      requestFocus: requestFocus,\n      uri: uri,\n      location: location\n    }));\n  });\n}; // don\'t focus on initial render\n\n\nvar initialRender = true;\nvar focusHandlerCount = 0;\n\nvar FocusHandlerImpl = function (_React$Component2) {\n  _inherits(FocusHandlerImpl, _React$Component2);\n\n  function FocusHandlerImpl() {\n    var _temp2, _this4, _ret2;\n\n    _classCallCheck(this, FocusHandlerImpl);\n\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return _ret2 = (_temp2 = (_this4 = _possibleConstructorReturn(this, _React$Component2.call.apply(_React$Component2, [this].concat(args))), _this4), _this4.state = {}, _this4.requestFocus = function (node) {\n      if (!_this4.state.shouldFocus && node) {\n        node.focus();\n      }\n    }, _temp2), _possibleConstructorReturn(_this4, _ret2);\n  }\n\n  FocusHandlerImpl.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    var initial = prevState.uri == null;\n\n    if (initial) {\n      return es_extends({\n        shouldFocus: true\n      }, nextProps);\n    } else {\n      var myURIChanged = nextProps.uri !== prevState.uri;\n      var navigatedUpToMe = prevState.location.pathname !== nextProps.location.pathname && nextProps.location.pathname === nextProps.uri;\n      return es_extends({\n        shouldFocus: myURIChanged || navigatedUpToMe\n      }, nextProps);\n    }\n  };\n\n  FocusHandlerImpl.prototype.componentDidMount = function componentDidMount() {\n    focusHandlerCount++;\n    this.focus();\n  };\n\n  FocusHandlerImpl.prototype.componentWillUnmount = function componentWillUnmount() {\n    focusHandlerCount--;\n\n    if (focusHandlerCount === 0) {\n      initialRender = true;\n    }\n  };\n\n  FocusHandlerImpl.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n    if (prevProps.location !== this.props.location && this.state.shouldFocus) {\n      this.focus();\n    }\n  };\n\n  FocusHandlerImpl.prototype.focus = function focus() {\n    if (false) {}\n\n    var requestFocus = this.props.requestFocus;\n\n    if (requestFocus) {\n      requestFocus(this.node);\n    } else {\n      if (initialRender) {\n        initialRender = false;\n      } else if (this.node) {\n        // React polyfills [autofocus] and it fires earlier than cDM,\n        // so we were stealing focus away, this line prevents that.\n        if (!this.node.contains(document.activeElement)) {\n          this.node.focus();\n        }\n      }\n    }\n  };\n\n  FocusHandlerImpl.prototype.render = function render() {\n    var _this5 = this;\n\n    var _props2 = this.props,\n        children = _props2.children,\n        style = _props2.style,\n        requestFocus = _props2.requestFocus,\n        _props2$component = _props2.component,\n        Comp = _props2$component === undefined ? "div" : _props2$component,\n        uri = _props2.uri,\n        location = _props2.location,\n        domProps = _objectWithoutProperties(_props2, ["children", "style", "requestFocus", "component", "uri", "location"]);\n\n    return react.createElement(Comp, es_extends({\n      style: es_extends({\n        outline: "none"\n      }, style),\n      tabIndex: "-1",\n      ref: function ref(n) {\n        return _this5.node = n;\n      }\n    }, domProps), react.createElement(FocusContext.Provider, {\n      value: this.requestFocus\n    }, this.props.children));\n  };\n\n  return FocusHandlerImpl;\n}(react.Component);\n\n(0,react_lifecycles_compat/* polyfill */.O)(FocusHandlerImpl);\n\nvar k = function k() {}; ////////////////////////////////////////////////////////////////////////////////\n\n\nvar forwardRef = react.forwardRef;\n\nif (typeof forwardRef === "undefined") {\n  forwardRef = function forwardRef(C) {\n    return C;\n  };\n}\n\nvar Link = forwardRef(function (_ref4, ref) {\n  var innerRef = _ref4.innerRef,\n      props = _objectWithoutProperties(_ref4, ["innerRef"]);\n\n  return react.createElement(BaseContext.Consumer, null, function (_ref5) {\n    var basepath = _ref5.basepath,\n        baseuri = _ref5.baseuri;\n    return react.createElement(Location, null, function (_ref6) {\n      var location = _ref6.location,\n          navigate = _ref6.navigate;\n\n      var to = props.to,\n          state = props.state,\n          replace = props.replace,\n          _props$getProps = props.getProps,\n          getProps = _props$getProps === undefined ? k : _props$getProps,\n          anchorProps = _objectWithoutProperties(props, ["to", "state", "replace", "getProps"]);\n\n      var href = resolve(to, baseuri);\n      var encodedHref = encodeURI(href);\n      var isCurrent = location.pathname === encodedHref;\n      var isPartiallyCurrent = startsWith(location.pathname, encodedHref);\n      return react.createElement("a", es_extends({\n        ref: ref || innerRef,\n        "aria-current": isCurrent ? "page" : undefined\n      }, anchorProps, getProps({\n        isCurrent: isCurrent,\n        isPartiallyCurrent: isPartiallyCurrent,\n        href: href,\n        location: location\n      }), {\n        href: href,\n        onClick: function onClick(event) {\n          if (anchorProps.onClick) anchorProps.onClick(event);\n\n          if (shouldNavigate(event)) {\n            event.preventDefault();\n            var shouldReplace = replace;\n\n            if (typeof replace !== "boolean" && isCurrent) {\n              var _location$state = es_extends({}, location.state),\n                  key = _location$state.key,\n                  restState = _objectWithoutProperties(_location$state, ["key"]);\n\n              shouldReplace = shallowCompare(es_extends({}, state), restState);\n            }\n\n            navigate(href, {\n              state: state,\n              replace: shouldReplace\n            });\n          }\n        }\n      }));\n    });\n  });\n});\nLink.displayName = "Link";\n false ? 0 : void 0; ////////////////////////////////////////////////////////////////////////////////\n\nfunction RedirectRequest(uri) {\n  this.uri = uri;\n}\n\nvar isRedirect = function isRedirect(o) {\n  return o instanceof RedirectRequest;\n};\n\nvar redirectTo = function redirectTo(to) {\n  throw new RedirectRequest(to);\n};\n\nvar RedirectImpl = function (_React$Component3) {\n  _inherits(RedirectImpl, _React$Component3);\n\n  function RedirectImpl() {\n    _classCallCheck(this, RedirectImpl);\n\n    return _possibleConstructorReturn(this, _React$Component3.apply(this, arguments));\n  } // Support React < 16 with this hook\n\n\n  RedirectImpl.prototype.componentDidMount = function componentDidMount() {\n    var _props3 = this.props,\n        navigate = _props3.navigate,\n        to = _props3.to,\n        from = _props3.from,\n        _props3$replace = _props3.replace,\n        replace = _props3$replace === undefined ? true : _props3$replace,\n        state = _props3.state,\n        noThrow = _props3.noThrow,\n        baseuri = _props3.baseuri,\n        props = _objectWithoutProperties(_props3, ["navigate", "to", "from", "replace", "state", "noThrow", "baseuri"]);\n\n    Promise.resolve().then(function () {\n      var resolvedTo = resolve(to, baseuri);\n      navigate(insertParams(resolvedTo, props), {\n        replace: replace,\n        state: state\n      });\n    });\n  };\n\n  RedirectImpl.prototype.render = function render() {\n    var _props4 = this.props,\n        navigate = _props4.navigate,\n        to = _props4.to,\n        from = _props4.from,\n        replace = _props4.replace,\n        state = _props4.state,\n        noThrow = _props4.noThrow,\n        baseuri = _props4.baseuri,\n        props = _objectWithoutProperties(_props4, ["navigate", "to", "from", "replace", "state", "noThrow", "baseuri"]);\n\n    var resolvedTo = resolve(to, baseuri);\n    if (!noThrow) redirectTo(insertParams(resolvedTo, props));\n    return null;\n  };\n\n  return RedirectImpl;\n}(react.Component);\n\nvar Redirect = function Redirect(props) {\n  return react.createElement(BaseContext.Consumer, null, function (_ref7) {\n    var baseuri = _ref7.baseuri;\n    return react.createElement(Location, null, function (locationContext) {\n      return react.createElement(RedirectImpl, es_extends({}, locationContext, {\n        baseuri: baseuri\n      }, props));\n    });\n  });\n};\n\n false ? 0 : void 0; ////////////////////////////////////////////////////////////////////////////////\n\nvar Match = function Match(_ref8) {\n  var path = _ref8.path,\n      children = _ref8.children;\n  return react.createElement(BaseContext.Consumer, null, function (_ref9) {\n    var baseuri = _ref9.baseuri;\n    return react.createElement(Location, null, function (_ref10) {\n      var navigate = _ref10.navigate,\n          location = _ref10.location;\n      var resolvedPath = resolve(path, baseuri);\n      var result = match(resolvedPath, location.pathname);\n      return children({\n        navigate: navigate,\n        location: location,\n        match: result ? es_extends({}, result.params, {\n          uri: result.uri,\n          path: path\n        }) : null\n      });\n    });\n  });\n}; ////////////////////////////////////////////////////////////////////////////////\n// Hooks\n\n\nvar useLocation = function useLocation() {\n  var context = (0,react.useContext)(LocationContext);\n\n  if (!context) {\n    throw new Error("useLocation hook was used but a LocationContext.Provider was not found in the parent tree. Make sure this is used in a component that is a child of Router");\n  }\n\n  return context.location;\n};\n\nvar useNavigate = function useNavigate() {\n  var context = (0,react.useContext)(BaseContext);\n\n  if (!context) {\n    throw new Error("useNavigate hook was used but a BaseContext.Provider was not found in the parent tree. Make sure this is used in a component that is a child of Router");\n  }\n\n  return context.navigate;\n};\n\nvar useParams = function useParams() {\n  var context = (0,react.useContext)(BaseContext);\n\n  if (!context) {\n    throw new Error("useParams hook was used but a LocationContext.Provider was not found in the parent tree. Make sure this is used in a component that is a child of Router");\n  }\n\n  var location = useLocation();\n  var results = match(context.basepath, location.pathname);\n  return results ? results.params : null;\n};\n\nvar useMatch = function useMatch(path) {\n  if (!path) {\n    throw new Error("useMatch(path: string) requires an argument of a string to match against");\n  }\n\n  var context = (0,react.useContext)(BaseContext);\n\n  if (!context) {\n    throw new Error("useMatch hook was used but a LocationContext.Provider was not found in the parent tree. Make sure this is used in a component that is a child of Router");\n  }\n\n  var location = useLocation();\n  var resolvedPath = resolve(path, context.baseuri);\n  var result = match(resolvedPath, location.pathname);\n  return result ? es_extends({}, result.params, {\n    uri: result.uri,\n    path: path\n  }) : null;\n}; ////////////////////////////////////////////////////////////////////////////////\n// Junk\n\n\nvar stripSlashes = function stripSlashes(str) {\n  return str.replace(/(^\\/+|\\/+$)/g, "");\n};\n\nvar createRoute = function createRoute(basepath) {\n  return function (element) {\n    if (!element) {\n      return null;\n    }\n\n    if (element.type === react.Fragment && element.props.children) {\n      return react.Children.map(element.props.children, createRoute(basepath));\n    }\n\n    !(element.props.path || element.props.default || element.type === Redirect) ?  false ? 0 : browser_default()(false) : void 0;\n    !!(element.type === Redirect && (!element.props.from || !element.props.to)) ?  false ? 0 : browser_default()(false) : void 0;\n    !!(element.type === Redirect && !validateRedirect(element.props.from, element.props.to)) ?  false ? 0 : browser_default()(false) : void 0;\n\n    if (element.props.default) {\n      return {\n        value: element,\n        default: true\n      };\n    }\n\n    var elementPath = element.type === Redirect ? element.props.from : element.props.path;\n    var path = elementPath === "/" ? basepath : stripSlashes(basepath) + "/" + stripSlashes(elementPath);\n    return {\n      value: element,\n      default: element.props.default,\n      path: element.props.children ? stripSlashes(path) + "/*" : path\n    };\n  };\n};\n\nvar shouldNavigate = function shouldNavigate(event) {\n  return !event.defaultPrevented && event.button === 0 && !(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}; ////////////////////////////////////////////////////////////////////////\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9499\n')},1143:function(module){"use strict";eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (false) {}\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE0My5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNLEtBQXFDLEVBQUUsRUFJMUM7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsMEJBQTBCO0FBQ3JFO0FBQ0E7QUFDQTs7QUFFQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXNzYXBpci5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvaW52YXJpYW50L2Jyb3dzZXIuanM/NDBiNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIGludmFyaWFudCA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgK1xuICAgICAgICAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJnc1thcmdJbmRleCsrXTsgfSlcbiAgICAgICk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1143\n")},8577:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "Z": function() { return /* binding */ _inheritsLoose; }\n});\n\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODU3Ny5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEM7O0FDUGlEO0FBQ2xDO0FBQ2Y7QUFDQTtBQUNBLEVBQUUsZUFBYztBQUNoQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Fzc2FwaXIuZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NldFByb3RvdHlwZU9mLmpzPzM1Y2MiLCJ3ZWJwYWNrOi8vYXNzYXBpci5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcz9lNjBiIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufSIsImltcG9ydCBzZXRQcm90b3R5cGVPZiBmcm9tIFwiLi9zZXRQcm90b3R5cGVPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8577\n')},4934:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "Z": function() { return /* binding */ _toConsumableArray; }\n});\n\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArray.js\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === "string") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === "Object" && o.constructor) n = o.constructor.name;\n  if (n === "Map" || n === "Set") return Array.from(o);\n  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js\nfunction _nonIterableSpread() {\n  throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\n\n\n\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDkzNC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWU7QUFDZjs7QUFFQSx5Q0FBeUMsU0FBUztBQUNsRDtBQUNBOztBQUVBO0FBQ0EsQzs7QUNScUQ7QUFDdEM7QUFDZixpQ0FBaUMsaUJBQWdCO0FBQ2pELEM7O0FDSGU7QUFDZjtBQUNBLEM7O0FDRnFEO0FBQ3RDO0FBQ2Y7QUFDQSxvQ0FBb0MsaUJBQWdCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBLHNGQUFzRixpQkFBZ0I7QUFDdEcsQzs7QUNSZTtBQUNmO0FBQ0EsQzs7QUNGdUQ7QUFDSjtBQUNzQjtBQUNsQjtBQUN4QztBQUNmLFNBQVMsa0JBQWlCLFNBQVMsZ0JBQWUsU0FBUywyQkFBMEIsU0FBUyxrQkFBaUI7QUFDL0ciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hc3NhcGlyLmdpdGh1Yi5pby8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hcnJheUxpa2VUb0FycmF5LmpzPzU2MjkiLCJ3ZWJwYWNrOi8vYXNzYXBpci5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlXaXRob3V0SG9sZXMuanM/YmU3NiIsIndlYnBhY2s6Ly9hc3NhcGlyLmdpdGh1Yi5pby8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pdGVyYWJsZVRvQXJyYXkuanM/MmJiZSIsIndlYnBhY2s6Ly9hc3NhcGlyLmdpdGh1Yi5pby8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qcz81ZDYwIiwid2VicGFjazovL2Fzc2FwaXIuZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL25vbkl0ZXJhYmxlU3ByZWFkLmpzPzJhZDQiLCJ3ZWJwYWNrOi8vYXNzYXBpci5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXkuanM/MDdmOCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHtcbiAgICBhcnIyW2ldID0gYXJyW2ldO1xuICB9XG5cbiAgcmV0dXJuIGFycjI7XG59IiwiaW1wb3J0IGFycmF5TGlrZVRvQXJyYXkgZnJvbSBcIi4vYXJyYXlMaWtlVG9BcnJheS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShhcnIpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge1xuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBpdGVyW1N5bWJvbC5pdGVyYXRvcl0gIT0gbnVsbCB8fCBpdGVyW1wiQEBpdGVyYXRvclwiXSAhPSBudWxsKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTtcbn0iLCJpbXBvcnQgYXJyYXlMaWtlVG9BcnJheSBmcm9tIFwiLi9hcnJheUxpa2VUb0FycmF5LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7XG4gIGlmICghbykgcmV0dXJuO1xuICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59IiwiaW1wb3J0IGFycmF5V2l0aG91dEhvbGVzIGZyb20gXCIuL2FycmF5V2l0aG91dEhvbGVzLmpzXCI7XG5pbXBvcnQgaXRlcmFibGVUb0FycmF5IGZyb20gXCIuL2l0ZXJhYmxlVG9BcnJheS5qc1wiO1xuaW1wb3J0IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IGZyb20gXCIuL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzXCI7XG5pbXBvcnQgbm9uSXRlcmFibGVTcHJlYWQgZnJvbSBcIi4vbm9uSXRlcmFibGVTcHJlYWQuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgcmV0dXJuIGFycmF5V2l0aG91dEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5KGFycikgfHwgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBub25JdGVyYWJsZVNwcmVhZCgpO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4934\n')}},function(Q){Q.O(0,[774,532],(function(){return B=678,Q(Q.s=B);var B}));Q.O()}]);