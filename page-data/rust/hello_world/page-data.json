{"componentChunkName":"component---src-templates-blog-post-js","path":"/rust/hello_world/","result":{"data":{"site":{"siteMetadata":{"title":"מחשבות על תכנות"}},"markdownRemark":{"id":"d4fbc5de-a3eb-5bfd-9c2a-6d6b13e547c5","excerpt":"התקנו את כל מה שצריך בשביל לכתוב קוד, והיום ממש ממש נכתוב קוד. כמקובל בענף, נתחיל עם התוכנית הידועה בה נדפיס “Hello World…","html":"<p>התקנו את כל מה שצריך בשביל לכתוב קוד, והיום ממש ממש נכתוב קוד. כמקובל בענף, נתחיל עם התוכנית הידועה בה נדפיס “Hello World”. גם כאן, קארגו יסייע לנו לעשות זאת בקלות. תחילה, נעבור לתיקיה בה נרצה ליצור את הפרויקט החדש שלנו. שימו לב: לא התיקיה בה הקוד שלנו יהיה, אלא התיקיה המכילה אותה. לדוגמה, אני אוהב לרכז את כל הקוד שלא קשור לעבודה שלי בתיקיה private תחת המשתמש שלי, ולכן זה מה שאעשה:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\"><span class=\"command-line-prompt\"><span data-user=assaf data-host=ass.af></span></span><span class=\"token builtin class-name\">cd</span> ~/private</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>ניצור פרויקט חדש באמצעות קרגו. נריץ:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\"><span class=\"command-line-prompt\"><span data-user=assaf data-host=ass.af></span></span>cargo new hello_world</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>ונקבל בתגובה</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber 1\" class=\"language-shell line-numbers\"><code class=\"language-shell\"><span class=\"command-line-prompt\"><span></span></span>Created binary <span class=\"token punctuation\">(</span>application<span class=\"token punctuation\">)</span> <span class=\"token variable\"><span class=\"token variable\">`</span>hello_world<span class=\"token variable\">`</span></span> package</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>מעולה! קרגו יצר לנו את הבסיס לתוכנה שלנו. הוא יצא לנו תיקיה בשם <code class=\"language-text\">hello_world</code>, כי זה שם הפרויקט שהעברנו לקרגו כפרמטר. נכנס לתיקיה ונפתח את VSCODE:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\"><span class=\"command-line-prompt\"><span data-user=assaf data-host=ass.af></span><span data-user=assaf data-host=ass.af></span></span><span class=\"token builtin class-name\">cd</span> hello_world\ncode <span class=\"token builtin class-name\">.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>כעת, אם נבחן את הפרויקט שלנו, נוכל לשים לב לכמה דברים בנוסף לתיקיה עצמה שקרגו יצר לנו. נתחיל מהקובץ <code class=\"language-text\">gitignore.</code>. זה לא המקום להרחיב, אבל זה יכול לרמוז לנו שהתיקיה שלנו היא כבר ריפוזיטורי של git. מעולה! נחסך לנו שלב אם וכאשר נרצה להעלות את הקוד שלנו לגיטהאב, או סתם יקל עלינו לנהל גרסאות שלו מקומית.</p>\n<p>בנוסף, נוצר לנו גם קובץ בשם <code class=\"language-text\">Cargo.toml</code>. כפי ששם הקובץ מרמז, הוא משמש כקובץ הגדרות לקרגו בזמן שאנחנו בפרויקט, בדומה לקובץ <code class=\"language-text\">package.json</code> בפרויקטים של Node. הסיומת <code class=\"language-text\">toml</code> היא של סוג מידע שגם בני אדם וגם מחשבים יכולים לקרוא, ולקרוב משמש להגדרות, בדומה לקבצי <code class=\"language-text\">yaml</code> או <code class=\"language-text\">json</code>.\nנפתח את הקובץ ונבחן אותו:</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-toml line-numbers\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token table class-name\">package</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">name</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"hello_world\"</span>\n<span class=\"token key property\">version</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"0.1.0\"</span>\n<span class=\"token key property\">edition</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"2018\"</span>\n\n<span class=\"token comment\"># See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">dependencies</span><span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>החלק הראשון, לאחר הכותרת <code class=\"language-text\">package</code> מכיל פרטים על החבילה שאנחנו נבנה: שם החבילה, גירסה שלה, ובאיזו גירסה של ראסט אנחנו נשתמש.\nבחלק השני, לאחר הכותרת <code class=\"language-text\">dependency</code>, אין כרגע כלום, אך בעתיד נשתמש בה כדי לציין חבילות נוספות שנדרשות לפיתוח התוכנה שלנו. כרגע, אין לנו שום תלויות, ולכן החלק הזה ריק.</p>\n<p>התיקיה החשובה יותר היא תיקיית <code class=\"language-text\">src</code>, קיצור של <code class=\"language-text\">source</code>. כאן נמצאת התוכנה שלנו ממש. שם נמצא קובץ בשם <code class=\"language-text\">main.rs</code>. כל חבילה של ראסט שתתקמפל לקובץ הרצה, <strong>חייבת</strong> להכיל קובץ בשם <code class=\"language-text\">main.rs</code>. משם הקומפיילר יודע מאיפה להתחיל. <code class=\"language-text\">rs</code> היא הסיומת לקבצים של ראסט. בתוך הקובץ נוכל לראות שכברירת מחדל, יש לנו כבר תוכנת “שלום עולם” מוכנה:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>נעבור על הקובץ שורה שורה:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>כפי שכל תוכנה של ראסט חייבת להכיל קובץ <code class=\"language-text\">main.rs</code>, כך גם הקובץ הזה חייב להכיל פונקציה בשם <code class=\"language-text\">main</code> (עוד על מה זה בדיוק פונקציות, בהמשך). ההצהרה על הפונקציה <code class=\"language-text\">main</code> נעשית באמצעות מילת המפתח <code class=\"language-text\">fn</code> (קיצור של function), שם הפונקציה (בראסט מקובל להשתמש ב snake_case, כלומר להפריד מילים באמצעות קו תחתון ולא במאצעות אותו גדולה), ורשימת הארגומנטים שהיא מקבל, בתוך הסוגריים. כיוון שבמקרה שלנו <code class=\"language-text\">main</code> לא מקבלת שום ארגומנטים, היא מכילה סוגריים רייקים. החלק האחרון בשורה הראשונה הוא סוגריים מסולסלים, שפותחים את טווח ההכרה, הסקופ, של הפונקציה.</p>\n<p>השורה הבאה שלנו היא</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber 1\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>כאן אנו משתמשים ב<em>מקרו</em> (וגם על מקרואים אשתדל לכתוב עוד בהמשך) <code class=\"language-text\">!println</code>. מקרואים בראסט מזוהים באמצעות העובדה שלפני העברת הפרמטרים אליהם יש סימן קריאה. זו היא לא קונבנציה, בניגוד לשם של המקרו, אלא ממש דרישה של השפה שבקריאה למקרו יהיה שימוש ב־<code class=\"language-text\">!</code>. הפרמטר אותו העברנו למקרו הוא הטקסט שברצוננו לכתוב. ראסט משתמשת כברירת מחדל בקידוד <a href=\"https://he.wikipedia.org/wiki/UTF-8\">utf8</a>, כלומר, ניתן להשתמש גם בעברית בתוך מחרוזות טקסט.</p>\n<p>בשורה האחרונה אנו סוגרים את הבלוק שפתחתנו בשורה מספר 1.</p>\n<p>נריץ את הפרויקט ע”י קריאה, שוב, לקרגו:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\"><span class=\"command-line-prompt\"><span data-user=assaf data-host=ass.af></span><span></span><span></span><span></span><span></span></span>cargo run\n   Compiling hello_world v0.1.0 <span class=\"token punctuation\">(</span>/Users/assapir/private/hello_world<span class=\"token punctuation\">)</span>\n    Finished dev <span class=\"token punctuation\">[</span>unoptimized + debuginfo<span class=\"token punctuation\">]</span> target<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> <span class=\"token number\">0</span>.47s\n     Running <span class=\"token variable\"><span class=\"token variable\">`</span>target/debug/hello_world<span class=\"token variable\">`</span></span>\nHello, world<span class=\"token operator\">!</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>קרגו מבשר לנו כי הוא קימפל את התוכנה <code class=\"language-text\">hello_world</code> בגירסה 0.1.0 (זוכרים את ההגדרה בקובץ Cargo.toml?), בתצורה של <code class=\"language-text\">dev</code>, ללא אופטמיזציה ועם <a href=\"https://en.wikipedia.org/wiki/Debug_symbol\">“סימבולים”</a>, כדי שאם נרצה לדבג, נוכל לעשות את זה. בשורה האחרונה: התוצאה של הריצה:</p>\n<p>אם נסתכל היטב, נראה שנוספה לנו תיקיה נוספת, בשם <code class=\"language-text\">target</code>, שגיט מתעלם ממנה. שם נוצרים התוצרים השונים של הקומפילציה. הקובץ שאותנו מעניין יהיה תחת <code class=\"language-text\">target/debug</code>, ויהיה בשם של הפרויקט (כפי שהגדרנו בקובץ toml), ללא כל סיומת (במק או לינוקס) או עם סיומת exe בחלונות. את הקובץ הזה אנחנו יכולים להריץ לגמרי לבד:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\"><span class=\"command-line-prompt\"><span data-user=assaf data-host=ass.af></span><span></span></span>./target/debug/hello_world\nHello, world<span class=\"token operator\">!</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>איזה יופי! תוכנה משלנו!</p>\n<h4>אם משהו לא עובד</h4>\n<p>יתכן מצב ובו נקבל שגיאה כאשר נריץ את קרגו, למשל:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\"><span class=\"command-line-prompt\"><span data-user=assaf data-host=ass.af></span><span></span></span>cargo run\nerror: no override and no default toolchain <span class=\"token builtin class-name\">set</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>בשביל לתקן את זה נצטרך להתקין את ה toolchain המתאים:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\"><span class=\"command-line-prompt\"><span data-user=assaf data-host=ass.af></span><span></span><span></span></span>rustup <span class=\"token function\">install</span> stable\n<span class=\"token punctuation\">..</span>.\ninfo: default toolchain <span class=\"token builtin class-name\">set</span> to <span class=\"token punctuation\">..</span>.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>","frontmatter":{"title":"בוקר טוב עולם","date":"25/7/2021","fromNow":"לפני 10 ימים","description":null,"tags":["rust","ראסט"]},"fields":{"slug":"/rust/hello_world/"}},"previous":{"fields":{"slug":"/rust/setup/"},"frontmatter":{"title":"להתקין הכל מהתחלה, כמו לנשום בפעם הראשונה"}},"next":{"fields":{"slug":"/rust/vars/"},"frontmatter":{"title":"משתנים שאי אפשר לשנות (בערך)"}}},"pageContext":{"id":"d4fbc5de-a3eb-5bfd-9c2a-6d6b13e547c5","previousPostId":"c719e5bb-e5ae-5648-97c6-f6c608f70159","nextPostId":"71b4c8aa-c43a-5dd1-b5f3-92dbc931db80"}},"staticQueryHashes":["2841359383","3257411868"]}