{"componentChunkName":"component---src-templates-blog-post-js","path":"/rust/functions-1/","result":{"data":{"site":{"siteMetadata":{"title":"מחשבות על תכנות"}},"markdownRemark":{"id":"6d4e802a-9044-531e-a381-068f88cdf5e1","excerpt":"פונקציות הן כלי חשוב בכמעט כל שפת תכנות. הן מאפשרות שימוש חוזר בקוד בקלות יחסית וכך לשמור על העיקרון החשוב של DRY – Don’t Repeat Yourself…","html":"<p>פונקציות הן כלי חשוב בכמעט כל שפת תכנות. הן מאפשרות שימוש חוזר בקוד בקלות יחסית וכך לשמור על העיקרון החשוב של DRY – Don’t Repeat Yourself, שבתורו מאפשר לקוד להיות קריא הרבה יותר, וכתוב בצורה שמאפשרת בקלות יותר לעקוב אחרי מה שהתוכנה שכתבנו עושה. בעצם, כבר פגשנו פונקציה אחת בפוסטים הקודמים, אולי אפילו הפונקציה החשובה ביותר: <code class=\"language-text\">main</code>, שכפי שראינו, שם מתחילה התוכנה שלנו.</p>\n<p>פונקציה בראסט מוגדרת באמצעות החתימה (signature) הבאה:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">function_name</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">:</span> argumentType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> returnValue <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>החתימה מתחילה בשימוש במילה השמורה <code class=\"language-text\">fn</code>, ולאחריה שם הפונקציה. מקובל כי שמות הפונקציות בראסט כתובות ב <em>snake_case</em>, כלומר, אותיות קטנות בלבד ושימוש בקו תחחתון (<code class=\"language-text\">_</code>) כדי להפריד בין מילים.\nלאחר מכן, בסוגריים, נתונה רשימת הארגומנטים (נקראים גם <em>פרמטרים</em>) המועברים לפונקציה, כאשר נתון השם של הארגומנט ולאחריו הסוג של הארגומנט. אם לא מועברים פרמטרים לפונקציה, יש צורך בסוגריים ריקות. לבסוף, לאחר סימן חץ (מקף אמצעי ולאחריו סוגריים משולשים ימינה &#x3C;-), ישנו הסוג של ערך החזרה של הפונקציה, כאשר אם היא לא מחזירה שום ערך (כמו <code class=\"language-text\">void</code> בשפות אחרות), אפשר לא לכתוב את החלק הזה כלל. גוף הפונקציה מוכל בתוך סוגריים מסולסלים.</p>\n<p>נכתוב קצת קוד!\nניצור פרויקט חדש בעזרת קרגו, ונקרא לו functions. בקובץ <code class=\"language-text\">src/main.rs</code> נכתוב את הקוד הבא:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">another_function</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">another_function</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The value of x is: {}\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>ונריץ את התוכנה המתוחכמת שלנו.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\"><span class=\"command-line-prompt\"><span data-user=assaf data-host=ass.af></span><span></span><span></span><span></span><span></span></span>cargo run\n   Compiling functions v0.1.0 …\n    Finished dev <span class=\"token punctuation\">[</span>unoptimized + debuginfo<span class=\"token punctuation\">]</span> target<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> <span class=\"token number\">0</span>.35s\n     Running <span class=\"token variable\"><span class=\"token variable\">`</span>target/debug/functions<span class=\"token variable\">`</span></span>\nThe value of x is: <span class=\"token number\">5</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>נעבור על מה שעשינו: בשורה 2 קראנו לפונקציה בשם <code class=\"language-text\">another_function</code> (שניתן לראות אותה בשורה 5), תוך העברת הפרמטר <code class=\"language-text\">5</code>. כאמור, בשורה 5 הצהרנו על הפונקציה הנ”ל, כאשר היא מקבלת ארגומנט בשם <code class=\"language-text\">x</code>, מסוג <code class=\"language-text\">i32</code>. בשורה 6, שהיא <em>גוף הפונקציה</em>, אנחנו מדפיסים באמצעות המקרו <code class=\"language-text\">println</code> את השורה <code class=\"language-text\">”The value of x is 5”</code>, כאשר במקום הסוגריים המסולסלים הריקים, המקרו יציג את ה<strong>ערך</strong> של המשתנה שהועבר לו, במקרה הזה <code class=\"language-text\">x</code>. ואכן, זה מה שראינו על כתוצאה מריצת התוכנה שלנו.</p>\n<p>מאחורי הקלעים, כאשר המעבד נתקל בקריאה לפונקציה, הוא מחפש איפה הפונקציה הזאת מוגדרת, ומעביר את השליטה אליה, תוך העברת הפרמטרים לפונקציה לפי הסדר שבהם הם נכתבו. לאחר סיום הפונקציה, כלומר כאשר מגיעים לסוגריים המסולסלים הסוגרים את גוף הפונקציה, השליטה בזרימת הקוד חוזרת בדיוק למקום ממנו הגענו לפונקציה. כיוון שבמקרה שלנו אין יותר קוד, התוכנה פשוט מסיימת את הריצה שלה ויוצאת.</p>\n<p>מה יקרה אם נעביר סוג אחר של ארגומנט לפונקציה ממה שהיא מצפה לו? ננסה: נחליף את שורה 2 בקוד כך שהיא תעביר לפונקציה את הארגומנט <code class=\"language-text\">’hello’</code> במקום 5.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber 1\" class=\"language-rust line-numbers\"><code class=\"language-rust\">    <span class=\"token function\">another_function</span><span class=\"token punctuation\">(</span>“hello”<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>ונריץ:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\"><span class=\"command-line-prompt\"><span data-user=assaf data-host=ass.af></span><span></span><span></span><span></span><span></span><span></span><span></span></span>cargo run\n   Compiling functions v0.1.0 ….\nerror<span class=\"token punctuation\">[</span>E0308<span class=\"token punctuation\">]</span>: mismatched types\n --<span class=\"token operator\">></span> src/main.rs:2:22\n  <span class=\"token operator\">|</span>\n<span class=\"token number\">2</span> <span class=\"token operator\">|</span>     another_function<span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">|</span>                      ^^^^^^^ expected <span class=\"token variable\"><span class=\"token variable\">`</span>i32<span class=\"token variable\">`</span></span>, found <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token operator\">&amp;</span>str<span class=\"token variable\">`</span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>אז כן, התוכנה לא תתקמפל ותסרב לרוץ, כיוון שהפונקציה מצפה לסוג מסוים של פרמטר, מספר בגודל 32 ביט, אבל קיבלה רפרנס למחרוזת (<code class=\"language-text\">&amp;str</code>). שגיאה אחרת נוכל לקבל גם אם נעביר מספר לא מספיק או יותר מדי פרמטרים לפונקציה. מוזמנים לנסות בעצמכם!</p>\n<p>מה לגבי החזרה של ערך מהפונקציה? נכתוב את הפונקציה הבאה:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">i32</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> val <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>בשורה 2, הצהרנו (מלשון <em>statement</em>) על הפעולה הבאה סכמנו את הפרמטרים <code class=\"language-text\">a</code> ו <code class=\"language-text\">b</code> לתוך המשתנה <code class=\"language-text\">val</code>. הצהרות, בהגדרה, הן פעולות שלא מחזירות ערך. כלומר, לפעולה <code class=\"language-text\">let val…</code> אין שום ערך, ולא ניתן להציב את התוצאה שלה למשתנה (בשונה למשל משפת C). בשורה 3, החזרנו את הערך של <code class=\"language-text\">val</code> באמצעות השימוש במילה השמורה <code class=\"language-text\">return</code>.\nנקרא לפונקציה מהפונקציה <code class=\"language-text\">main</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> val <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5 + 6 = {}\"</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>כשנריץ, אכן נקבל את הפלט הרצוי:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\"><span class=\"command-line-prompt\"><span></span></span><span class=\"token number\">5</span> + <span class=\"token number\">6</span> <span class=\"token operator\">=</span> <span class=\"token number\">11</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>בשורה 2 של הפונקציה main, הצבנו את הערך החוזר לתוך משתנה בשם <code class=\"language-text\">val</code>, והדפסנו אותו בשורה 3. ניתן להשתמש באותו שם למשתנה כיוון שבראסט, כמו בשפות אחרות, שמות של משתנים מוכלים לתוך ה <em>Scope</em> , טווח ההכרה, של הפונקציה, כך שהפונקציה שקוראת או הפונקציה שנקראת לא מכירות מה קורה בתוך הפונקציה האחרת.</p>\n<p>דרך נוספת להחזיר תוצאה מפונקציה בראסט, ולרוב המקובלת יותר, היא ללא המילה <code class=\"language-text\">return</code>. בראסט, כברירת מחדל, אם אין נקודה פסיק בסוף המשפט האחרון בפונקציה, הערך במשפט האחרון של הפונקציה הוא הערך שיחזור. אם נשנה את מה שכתבנו ונכתוב</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">i32</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> val <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n    val\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>עדיין נקבל את אותה התוצאה, ואפילו עם נכתוב -</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">i32</span> <span class=\"token punctuation\">{</span>\n    a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>נקבל את אותה התוצאה בדיוק.</p>\n<p>בפוסט הבא אשתדל לכתוב עוד קצת על פונקציות, ונתמקד בסוג של העברת פרמטרים לפונקציה.</p>","frontmatter":{"title":"פונקציות או לא להיות","date":"18/8/2021","fromNow":"לפני חודש","description":null,"tags":["rust","ראסט"]},"fields":{"slug":"/rust/functions-1/"}},"previous":{"fields":{"slug":"/rust/vars/"},"frontmatter":{"title":"משתנים שאי אפשר לשנות (בערך)"}},"next":{"fields":{"slug":"/general/k3s/"},"frontmatter":{"title":"להשתמש בכח של כמה עוגות יחד"}}},"pageContext":{"id":"6d4e802a-9044-531e-a381-068f88cdf5e1","previousPostId":"71b4c8aa-c43a-5dd1-b5f3-92dbc931db80","nextPostId":"2c5ee940-cc15-5c1d-8c4f-e465939e8e7a"}},"staticQueryHashes":["2841359383","3257411868"]}